[32mGENERATING DOCUMENTATION[39m
Compiling file src/latest/js_doc/Array.js


 Arrays are list-like objects that come with a several built-in methods to perform traversal and mutation operations. Neither the size of a Javascript array nor the types of its elements are fixed. Since an array's size can grow or shrink at any time, Javascript arrays are not guaranteed to be dense. In general, these are convenient characteristics, but if these are desirable things to have for your use case, you might consider using WebGL typed arrays.

 Note that [you shouldn't use an array as an associative array](http://www.andrewdupont.net/2006/05/18/javascript-associative-arrays-considered-harmful/). You can use plain [[Object objects]] instead, although doing so comes with its own caveats. See the post on [lightweight Javascript dictionaries with arbitrary keys](http://monogatari.doukut.su/2010/12/lightweight-javascript-dictionaries.html) as an example.

 #### Accessing array elements

 Javascript arrays are zero-indexed; the first element of an array is actually at index 0, and the last element is at the index one less than the value of the array's [[Array.length `length`]] property:

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Array/array.examples.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 Array elements are just object properties, in the way that [[Array.toString `toString()`]] is a property. However, note that trying to access the first element of an array as follows will throw a syntax error:

 	console.log(arr.0);

 There is nothing unique about Javascript arrays and their properties that causes this. Javascript properties that begin with a digit can't be referenced with the dot notation. They must be accessed using bracket notation. For example, if you had an object with a property `3d`, it would not be possible to access it using dot notation, either. It, too, would have to be referenced using bracket notation. This similarity is exhibited in the following two code samples:

     var years = [1950, 1960, 1970, 1980, 1990, 2000, 2010];
 	try {
 		console.log(years.0);
 	}
 	catch (ex) {
 		console.log("Using bracket notation");
 		console.log(years[0]);
 	}

 	try {
 		renderer.3d.setTexture(model, "character.png");
 	}
	catch (ex) {
 		console.log("Using bracket notation");
 		renderer["3d"].setTexture(model, "character.png");
	}

 Note that `3d` had to be quoted. It's possible to quote the Javascript array indexes as well (_e.g._, `years["2"]` instead of `years[2]`), though it's not necessary. The 2 in years[2] eventually gets coerced into a string by the Javascript engine anyway, through an implicit toString conversion. It is for this reason that "2" and "02" would refer to two different slots on the years object and the following example logs true:

 	console.log(years["2"] != years["02"]);

 #### Relationship between length and numerical properties

 A Javascript array's [[Array.length `length`]] property and numerical properties are connected. Several of the built-in array methods (_e.g._, [[Array.join `join()`]], [[Array.slice `slice()`]], [[Array.indexOf `indexOf()`]], etc.) take into account the value of an array's length property when they're called. Other methods (_e.g._, [[Array.push `push()`]], [[Array.splice `splice()`]], etc.) also result in updates to an array's length property.

	var fruits = [];
	fruits.push("banana", "apple", "peach");

 	console.log(fruits.length); // logs 3

 When setting a property on a Javascript array when the property is a valid array index and that index is outside the current bounds of the array, the array will grow to a size large enough to accommodate an element at that index, and the engine will update the array's length property accordingly:

	fruits[3] = "mango";
	console.log(fruits[3]);
	console.log(fruits.length); // logs 4

 Setting the length property directly also results in special behavior.

 	fruits.length = 10;
 	console.log(fruits);		// The array gets padded with undefined
 	console.log(fruits.length); // 10

 This is explained further on the [[Array.length length]] page.

 #### Creating an array using the result of a match

 The result of a match between a regular expression and a string can create a Javascript array. This array has properties and elements that provide information about the match. An array is the return value of [[RegExp.exec `RegExp.exec()`]], [[String.match `match()`]], and [[String.replace `replace()`]]. To help explain these properties and elements, look at the following example and then refer to the table below:

 	// Match one d followed by one or more b's followed by one d
 	// Remember matched b's and the following d
 	// Ignore case

 	var myRe = /d(b+)(d)/i;
 	var myArray = myRe.exec("cdbBdbsbz");

 The properties and elements returned from this match are as follows:
 <table class = \"fullwidth-table\"> <tbody> <tr> <td class = \"header\">Property/Element</td> <td class = \"header\">Description</td> <td class = \"header\">Example</td> </tr> <tr> <td>`input`</td> <td>A read-only property that reflects the original string against which the regular expression was matched.</td> <td>cdbBdbsbz</td> </tr> <tr> <td>`index`</td> <td>A read-only property that is the zero-based index of the match in the string.</td> <td>1</td> </tr> <tr> <td>`[0]`</td> <td>A read-only element that specifies the last matched characters.</td> <td>dbBd</td> </tr> <tr> <td>`[1], ...[n]`</td> <td>Read-only elements that specify the parenthesized substring matches, if included in the regular expression. The number of possible parenthesized substrings is unlimited.</td> <td>[1]: bB<br/> [2]: d</td> </tr> </tbody></table>

 #### Example: Creating an Array

 The following example creates an array, msgArray, with a length of 0, then assigns values to msgArray[0] and msgArray[99], changing the length of the array to 100.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Array/array.examples.2.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### Example: Creating a Two-dimensional Array

 The following creates chess board as a two dimensional array of strings. The first move is made by copying the 'P' in 6,4 to 4,4. The position 4,4 is left blank.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Array/array.examples.3.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 	// Move King's Pawn forward 2
 	board[4][4] = board[6][4];
 	board[6][4] = ' ';
 	print(board.join('\n'));

 Here is the output:

 	R,N,B,Q,K,B,N,R
 	P,P,P,P,P,P,P,P
 	 , , , , , , ,
 	 , , , , , , ,
 	 , , , , , , ,
 	 , , , , , , ,
 	p,p,p,p,p,p,p,p
 	r,n,b,q,k,b,n,r

 	R,N,B,Q,K,B,N,R
 	P,P,P,P,P,P,P,P
 	 , , , , , , ,
 	 , , , , , , ,
 	 , , , ,p, , ,
 	 , , , , , , ,
 	p,p,p,p, ,p,p,p
 	r,n,b,q,k,b,n,r

 #### See Also

 * [Indexing Object Properties](https://developer.mozilla.org/en/Javascript/Guide/Working_with_Objects#Indexing_Object_Properties]()
 * [New in Javascript 1.7: Array comprehensions](https://developer.mozilla.org/en/Javascript/New_in_Javascript/1.7#Array_comprehensions)
 * [New in Javascript 1.6: Array extras](https://developer.mozilla.org/en/Javascript/New_in_Javascript/1.6#Array_extras)
 * [Typed Arrays](https://developer.mozilla.org/en/Javascript_typed_arrays)
 
 

 	new Array(arrayLength)
 - elementN (Object): A Javascript array is initialized with the given elements, except in the case where a single argument is passed to theArray constructor and that argument is a number. Note that this special case only applies to Javascript arrays created with the `Array` constructor, not with array literals created with the bracket syntax.
 - arrayLength (Number): If the first argument passed to the `Array` constructor is an integer between 0 and 232-1 (inclusive), a new Javascript array is created with that number of elements. If the argument is any other number, a [[RangeError `RangeError`]] exception is thrown.

 Constructs a new array. Note that you can also just create a new array by defining a sequence of elements, like this: `[element0, element1, ..., elementN]`.

 	
 


 An unsigned, 32-bit integer (a value less than 2^32) that specifies the number of elements in an array.

 You can set the `length` property to truncate an array at any time. When you extend an array by changing its `length` property, the number of actual elements does not increase; for example, if you set `length` to 3 when it is currently 2, the array still contains only 2 elements.

 #### Example: Iterating over an array

 In the following example the array numbers is iterated through by looking at the length property to see how many elements it has. Each value is then doubled.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Array/array.length.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### Example: Shortening an array

 The following example shortens the array `statesUS` to a length of 50 if the current length is greater than 50.

 	if (statesUS.length > 50) {
		statesUS.length=50
 	}
 	
 

 - separator (String): A string to separate each element of the array. The separator is converted to a string if necessary.

 Joins all elements of an array into a string.

 #### Example: Joining an array three different ways

 The following example creates an array, a, with three elements, then joins the array three times: using the default separator, then a comma and a space, and then a plus.

 	var a = new Array("Wind","Rain","Fire");
 	var myVar1 = a.join(); 	 // assigns "Wind,Rain,Fire" to myVar1
 	var myVar2 = a.join(", ");  // assigns "Wind, Rain, Fire" to myVar2
 	var myVar3 = a.join(" + "); // assigns "Wind + Rain + Fire" to myVar3

 #### See Also

 * [[Array.reverse `reverse()`]]
 * [[String.split `String.split()`]]
 * [[Array.toString `toString()`]]
 

 - begin (Number): Zero-based index at which to begin extraction. As a negative index, start indicates an offset from the end of the sequence. slice(-2) extracts the second-to-last element and the last element in the sequence.
 - end (Number): Zero-based index at which to end extraction. slice extracts up to but not including end. slice(1,4) extracts the second element through the fourth element (elements indexed 1, 2, and 3). As a negative index, end indicates an offset from the end of the sequence. slice(2,-1) extracts the third element through the second-to-last element in the sequence. If end is omitted, slice extracts to the end of the sequence.

 Returns a one-level deep copy of a portion of an array.

 This method doesn't alter the original array, but returns a new "one level deep" copy that contains copies of the elements sliced from the original array. Elements of the original array are copied into the new array as follows:

  * For object references (and not the actual object), slice copies object references into the new array. Both the original and new array refer to the same object. If a referenced object changes, the changes are visible to both the new and original arrays.

  * For strings and numbers (not String and Number objects), slice copies strings and numbers into the new array. Changes to the string or number in one array does not affect the other array.

 If a new element is added to either array, the other array is not affected.

 #### Example: Using slice

  In the following example, `slice()` creates a new array, `newCar`, from `myCar`. Both include a reference to the object `myHonda`. When the color of `myHonda` is changed to purple, both arrays reflect the change.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Array/array.slice.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 This script writes:

 	myCar = [{color:"red", wheels:4, engine:{cylinders:4, size:2.2}}, 2, "cherry condition", "purchased 1997"]
 	newCar = [{color:"red", wheels:4, engine:{cylinders:4, size:2.2}}, 2]
 	myCar[0].color = red
 	newCar[0].color = red
 	The new color of my Honda is purple
 	myCar[0].color = purple
 	newCar[0].color = purple
 	
 

 - searchElement (String): Element to locate in the array.
 - fromIndex (Number): The index at which to begin the search. Defaults to 0, i.e. the whole array will be searched. If the index is greater than or equal to the length of the array, -1 is returned, i.e. the array will not be searched. If negative, it is taken as the offset from the end of the array. Note that even when the index is negative, the array is still searched from front to back. If the calculated index is less than 0, the whole array will be searched.

  Returns the first index at which a given element can be found in the array, or -1 if it is not present.

 `indexOf()` compares `searchElement` to elements of the Array using strict equality (the same method used by the `===,` or triple-equals, operator).

 #### Example: Using indexOf

 The following example uses indexOf to locate values in an array.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Array/array.indexof.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### Example: Finding all the occurrences of an element

 The following example uses indexOf to find all the indices of an element in a given array, using push to add them to another array as they are found.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Array/array.indexof.2.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### See also

 * [[Array.lastIndexOf `lastIndexOf()`]]
 

 - elementN (Object): The elements to add to the end of the array.

 Mutates an array by appending the given elements to the end of an array and returning its new length.

 `push()` is intentionally generic. This method can be called or applied to objects resembling arrays. The `push()` method relies on a `length` property to determine where to start inserting the given values. If the `length` property can't be converted into a number, the index used is 0. This includes the possibility of length being nonexistent, in which case length will also be created.
 The only native, array-like objects are strings, although they are not suitable in applications of this method, as strings are immutable.

 #### Example: Adding elements to an array

 The following code creates the sports array containing two elements, then appends two elements to it. After the code executes, sports contains 4 elements: "soccer", "baseball", "football", and "swimming".

 	var sports = ["soccer", "baseball"];
 	sports.push("football", "swimming");

 #### Returns

 The new length property of the object upon which the method was called.

 #### See Also

 * [[Array.pop `pop()`]]
 * [[Array.shift `shift()`]]
 * [[Array.unshift `unshift()`]]
 * [[Array.concat `concat()`]]
 
 

 Array.splice(index[, howMany[, element1[, element2...[, elementN]]]]) -> Array
 - index (Number): Index at which to start changing the array. If negative, will begin that many elements from the end.
 - howMany (Number): Indicates the number of old array elements to remove. If howMany is 0, no elements are removed. In this case, you should specify at least one new element. If no howMany parameter is specified (second syntax above, which is a SpiderMonkey extension), all elements after index are removed.
 - elementN (Object): The elements to add to the array. If you don't specify any elements, splice simply removes elements from the array.

 Changes the content of an array, adding new elements while removing old elements.

 If you specify a different number of elements to insert than the number you're removing, the array will have a different length at the end of the call.

 #### Example: Using `splice`

 The following script illustrate the use of splice:

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Array/array.splice.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### Returns

 An array containing the removed elements. If only one element is removed, an array of one element is returned.

 

 - obj (Object): The object to be checked

 Returns `true` if an object is an array, `false` if it is not.

 This function is part of the ECMAScript 5 standard. See the [Web Tech Blog](https://developer.mozilla.org/web-tech/2010/07/26/determining-with-absolute-accuracy-whether-or-not-a-javascript-object-is-an-array) for more details.

 #### Examples

 	// all following calls return true
 	Array.isArray([]);
 	Array.isArray([1]);
 	Array.isArray( new Array() );
 	Array.isArray( Array.prototype ); // Little known fact: Array.prototype itself is an array.

 	// all following calls return false
 	Array.isArray();
 	Array.isArray({});
 	Array.isArray(null);
 	Array.isArray(undefined);
 	Array.isArray(17);
 	Array.isArray("Array");
 	Array.isArray(true);
 	Array.isArray(false);
	 	
 


 Removes the last element from an array and returns that element.

 The `pop()` method removes the last element from an array and returns that value to the caller.

 `pop` is intentionally generic; this method can be [[Function.call called]] or [[Function.apply applied]] to objects resembling arrays. Objects which don't contain a `length` property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.
undefined

 #### Example: Removing the last element of an array

  The following code creates the myFish array containing four elements, then removes its last element.

 	myFish = ["angel", "clown", "mandarin", "surgeon"];
 	popped = myFish.pop();


 #### See Also

 * [[Array.push `push()`]]
 * [[Array.shift `shift()`]]
 * [[Array.unshift `unshift()`]]
 


 Reverses an array in place. The first array element becomes the last and the last becomes the first.

 The `reverse()` method transposes the elements of the calling array object in place, mutating the array, and returning a reference to the array.

 #### Example: Reversing the elements in an array

 The following example creates an array myArray, containing three elements, then reverses the array.

 	var myArray = ["one", "two", "three"];
 	myArray.reverse();

 This code changes `myArray` so that:

 * `myArray[0]` is "three"
 * `myArray[1]` is "two
 * `myArray[2]` is "one"


 #### See Also
 * [[Array.join `join()`]]
 * [[Array.sort `sort()`]]
 


 Removes the first element from an array and returns that element. This method changes the length of the array.

 `shift` is intentionally generic; this method can be can be [[Function.call called]] or [[Function.apply applied]] to objects resembling arrays. Objects which don't contain a `length` property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.

 #### Example: Removing an element from an array
 The following code displays the `myFish` array before and after removing its first element. It also displays the removed element:

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Array/array.shift.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 This example displays the following:

 	myFish before: angel,clown,mandarin,surgeon
 	myFish after: clown,mandarin,surgeon
 	Removed this element: angel

 #### See also
 * [[Array.pop `pop()`]]
 * [[Array.push `push()`]]
 * [[Array.unshift `unshift()`]]
 

 - compareFunction (Function): Defines the sort order. If omitted, the array is sorted lexicographically according to the string conversion of each element.

 Sorts the elements of an array in place and returns the array.

 If `compareFunction` is not supplied, elements are sorted by converting them to strings and comparing strings in lexicographic () order. For example, "80" comes before "9" in lexicographic order, but in a numeric sort 9 comes before 80.

 If `compareFunction` is supplied, the array elements are sorted according to the return value of the compare function. If `a` and `b` are two elements being compared, then:

 * If `compareFunction(a, b)` is less than 0, sort `a` to a lower index than `b`.
 * If `compareFunction(a, b)` returns 0, leave `a` and `b` unchanged with respect to each other, but sorted with respect to all different elements. Note: the ECMAscript standard does not guarantee this behaviour, and thus not all browsers (e.g. Mozilla versions dating back to at least 2003, respect this.
 * If `compareFunction(a, b)` is greater than 0, sort `b` to a lower index than `a`.
 * compareFunction(a, b)` must always returns the same value when given a specific pair of elements a and b as its two arguments. If inconsistent results are returned then the sort order is undefined

 So, the compare function has the following form:

 	function compare(a, b)
 	{
   	if (a is less than b by some ordering criterion)
 	 	return -1;
   	if (a is greater than b by the ordering criterion)
 	 	return 1;
   	// a must be equal to b
   	return 0;
 	}

 To compare numbers instead of strings, the compare function can simply subtract `b` from `a`:

 	function compareNumbers(a, b)
 	{
   	return a - b;
 	}

 Some implementations of Javascript implement a stable sort: the index partial order of `a` and `b` does not change if `a` and `b` are equal. If `a`'s index was less than `b`'s before sorting, it will be after sorting, no matter how `a` and `b` move due to sorting.

 The `sort()` method can be conveniently used with [closures](https://developer.mozilla.org/en/Javascript/Guide/Closures "en/Core Javascript 1.5 Guide/Working with Closures"):

 	var numbers = [4, 2, 5, 1, 3];
 	numbers.sort(function(a, b) {
 	return a - b;
 	});
 	print(numbers);

 #### Example: Creating, displaying, and sorting an array

 The following example creates four arrays and displays the original array, then the sorted arrays. The numeric arrays are sorted without, then with, a compare function.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Array/array.sort.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 This example produces the following output. As the output shows, when a compare function is used, numbers sort correctly whether they are numbers or numeric strings.

 	stringArray: Blue,Humpback,Beluga
 	Sorted: Beluga,Blue,Humpback

 	numberArray: 40,1,5,200
 	Sorted without a compare function: 1,200,40,5
 	Sorted with compareNumbers: 1,5,40,200

 	numericStringArray: 80,9,700
 	Sorted without a compare function: 700,80,9
 	Sorted with compareNumbers: 9,80,700

 	mixedNumericArray: 80,9,700,40,1,5,200
 	Sorted without a compare function: 1,200,40,5,700,80,9
 	Sorted with compareNumbers: 1,5,9,40,80,200,700


 #### See Also
 * [[Array.join `join()`]]
 * [[Array.reverse `reverse()`]]
 

 - valueN (Object | Array): Objects and/or arrays to concatenate to the resulting array

 Returns a new array comprised of this array joined with other array(s) and/or value(s).

 `concat` creates a new array consisting of the elements in the `this` object on which it is called, followed in order by, for each argument, the elements of that argument (if the argument is an array) or the argument itself (if the argument is not an array).

 `concat` does not alter `this` or any of the arrays provided as arguments but instead returns a "one level deep" copy that contains copies of the same elements combined from the original arrays. Elements of the original arrays are copied into the new array as follows:

 * Object references (and not the actual object): `concat` copies object references into the new array. Both the original and new array refer to the same object. That is, if a referenced object is modified, the changes are visible to both the new and original arrays.

 * Strings and numbers (not [[String `String]] and [[Number `Number`]]: `concat` copies the values of strings and numbers into the new array.

 Any operation on the new array will have no effect on the original arrays, and vice versa.

 #### Example: Concatenating two arrays

 The following code concatenates two arrays:

 	var alpha = ["a", "b", "c"];
 	var numeric = [1, 2, 3];

 	// creates array ["a", "b", "c", 1, 2, 3];
 	// alpha and numeric are unchanged
 	var alphaNumeric = alpha.concat(numeric);


 #### Example: Concatenating three arrays

 The following code concatenates three arrays:

 	var num1 = [1, 2, 3];
 	var num2 = [4, 5, 6];
 	var num3 = [7, 8, 9];

	// creates array [1, 2, 3, 4, 5, 6, 7, 8, 9];
 	// num1, num2, num3 are unchanged
	var nums = num1.concat(num2, num3);


 #### Example: Concatenating values to an array
 The following code concatenates three values to an array:

 	var alpha = ['a', 'b', 'c'];

 	// creates array ["a", "b", "c", 1, 2, 3], leaving alpha unchanged
 	var alphaNumeric = alpha.concat(1, [2, 3]);

 

 - elementN (Object): The elements to add to the front of the array.

 Adds one or more elements to the beginning of an array and returns the new length of the array.

 `unshift` is intentionally generic; this method can be [[Function.call called]] or [[Function.apply applied]] to objects resembling arrays. Objects which don't contain a `length` property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.

 #### Example: Adding elements to an array

 	The following code displays the `myFish` array before and after adding elements to it.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Array/array.unshift.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 	This example displays the following:

 	myFish before: ["angel", "clown"]
 	myFish after: ["drum", "lion", "angel", "clown"]
 	New length: 4

 #### Returns
  The new [[Array.length `length`]] property of the object upon which the method was called.
 #### See Also
 * [[Array.pop `pop()`]]
 * [[Array.push `push()`]]
 * [[Array.shift `shift()`]]
 


 	Returns a string representing the specified array and its elements.

 The [[Array `Array`]] object overrides the `toString` method of [[Object `Object`]]. For Array objects, the `toString` method joins the array and returns one string containing each array element separated by commas. For example, the following code creates an array and uses `toString` to convert the array to a string:

 		var monthNames = ['Jan', 'Feb', 'Mar', 'Apr'];
 		var myVar = monthNames.toString(); // assigns "Jan,Feb,Mar,Apr" to myVar.

 Javascript calls the `toString` method automatically when an array is to be represented as a text value or when an array is referred to in a string concatenation.

 
 

 - searchElement (Object): Element to locate in the array.
 - fromIndex (Number): The index at which to start searching backwards. Defaults to the array's length, i.e. the whole array will be searched. If the index is greater than or equal to the length of the array, the whole array will be searched. If negative, it is taken as the offset from the end of the array. Note that even when the index is negative, the array is still searched from back to front. If the calculated index is less than 0, -1 is returned, i.e. the array will not be searched.

 	Returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at `fromIndex`.

 `lastIndexOf` compares `searchElement` to elements of the Array using strict equality (the same method used by the `===`, or triple-equals, operator).

 #### Example: Using `lastIndexOf()`

 The following example uses `lastIndexOf` to locate values in an array:

 		var array = [2, 5, 9, 2];
 		var index = array.lastIndexOf(2);
 		// index is 3
 		index = array.lastIndexOf(7);
 		// index is -1
 		index = array.lastIndexOf(2, 3);
 		// index is 3
 		index = array.lastIndexOf(2, 2);
 		// index is 0
 		index = array.lastIndexOf(2, -2);
 		// index is 0
 		index = array.lastIndexOf(2, -1);
 		// index is 3

 #### Example: Finding all the occurrences of an element

 	The following example uses `lastIndexOf()` to find all the indices of an element in a given array, using [[Array.push `push()`]] to add them to another array as they are found:

 		var indices = [];
 		var idx = array.lastIndexOf(element);
 		while (idx!= -1)
 		{
 	 	 indices.push(idx);
 	 	 idx = (idx > 0 ? array.lastIndexOf(element, idx - 1) : -1);
 		}

 	Note that we have to handle the case `idx == 0, separately here because the element will always be found regardless of the `fromIndex` parameter if it is the first element of the array. This is different from the [[Array.indexOf `Array.indexOf()`]] method.

 #### See also
  [[Array.indexOf `indexOf()`]]
  
 

 - callback (Function): Used to test each element of the array.
 - element (Object): The value of the current element
 - index (Number): The index of the element
 - array (Object): The array object being traversed
 - thisObject (Object): Used when executing callback.

 Creates a new array with all elements that pass the test implemented by the provided function.

 `filter` calls a provided `callback` function once for each element in an array, and constructs a new array of all the values for which `callback` returns a true value. `callback` is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values. Array elements which don't pass the `callback` test are simply skipped, and are not included in the new array.

 If a `thisObject` parameter is provided to `filter`, it will be used as the `this` for each invocation of the `callback`. If it is not provided, or is `null`, the global object associated with `callback` is used instead.

 `filter` does not mutate the array on which it is called.

 The range of elements processed by `filter` is set before the first invocation of `callback`. Elements which are appended to the array after the call to `filter` begins will not be visited by `callback`. If existing elements of the array are changed, or deleted, their value as passed to `callback` will be the value at the time `filter` visits them; elements that are deleted are not visited.

 #### Example: Filtering out all small values

 The following example uses `filter` to create a filtered array that has all elements with values less than 1, removed.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Array/array.filter.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>
		
 

 - callback (Function): Used to test each element of the array.
 - element (Object): The value of the current element
 - index (Number): The index of the element
 - array (Object): The array object being traversed
 - thisArg (Object): Used when executing callback.

 Executes a provided function once per array element.

 `callback` is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.

 If a `thisArg` parameter is provided to `forEach`, it will be used as the `this` value for each `callback` invocation as if `callback.call(thisArg, element, index, array)` was called. If `thisArg` is `undefined` or `null`, the `this` value within the function depends on whether the function is in [strict mode](https://developer.mozilla.org/en/Javascript/Strict_mode "en/Javascript/Strict_mode") or not (passed value if in strict mode, global object if in non-strict mode).

 The range of elements processed by `forEach` is set before the first invocation of `callback`. Elements which are appended to the array after the call to `forEach` begins will not be visited by `callback`. If existing elements of the array are changed, or deleted, their value as passed to `callback` will be the value at the time `forEach` visits them; elements that are deleted are not visited.

 #### Example: Printing the contents of an array

  The following code logs a line for each element in an array:

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Array/array.foreach.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### Example: An object copy function

  The following code creates a copy of a given object. There are different ways to create a copy of an object. This one is just one of them here to explain how `Array.prototype.forEach` works. It uses a couple of new ECMAScript 5 Object.* functions.

 	function copy(o){
	var copy = Object.create( Object.getPrototypeOf(o) );
	var propNames = Object.getOwnPropertyNames(o);
		propNames.forEach(function(name){
			var desc = Object.getOwnPropertyDescriptor(o, name);
			Object.defineProperty(copy, name, desc);
		});
	return copy;
  	}

  	var o1 = {a:1, b:2};
  	var o2 = copy(o1); // o2 looks like o1 now
	 	 	 
 

 - callback (Function): Used to test each element of the array.
 - element (Object): The value of the current element
 - index (Number): The index of the element
 - array (Object): The array object being traversed
 - thisArg (Object): Used when executing callback.

 	Tests whether all elements in the array pass the test implemented by the provided function.

 `every` executes the provided `callback` function once for each element present in the array until it finds one where `callback` returns a false value. If such an element is found, the `every` method immediately returns `false`. Otherwise, if `callback` returned a true value for all elements, `every` will return `true`. `callback` is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.

 If a `thisObject` parameter is provided to `every`, it will be used as the `this` for each invocation of the `callback`. If it is not provided, or is `null`, the global object associated with `callback` is used instead.

 `every` does not mutate the array on which it is called.

 The range of elements processed by `every` is set before the first invocation of `callback`. Elements which are appended to the array after the call to `every` begins will not be visited by `callback`. If existing elements of the array are changed, their value as passed to `callback` will be the value at the time `every` visits them; elements that are deleted are not visited.

 `every` acts like the "for all" quantifier in mathematics. In particular, for an empty array, it returns true. (It is [vacuously true](http://en.wikipedia.org/wiki/Vacuous_truth#Vacuous_truths_in_mathematics "http://en.wikipedia.org/wiki/Vacuous_truth#Vacuous_truths_in_mathematics") that all elements of the [empty set](http://en.wikipedia.org/wiki/Empty_set#Common_problems "http://en.wikipedia.org/wiki/Empty_set#Common_problems") satisfy any given condition.)

 #### Example: Testing size of all array elements

 	The following example tests whether all elements in the array are bigger than 10.

 		function isBigEnough(element, index, array) {
 			return (element >= 10);
 		}
 		var passed = [12, 5, 8, 130, 44].every(isBigEnough);
 		// passed is false
 		passed = [12, 54, 18, 130, 44].every(isBigEnough);
 		// passed is true
 	
 

 - callback (Function): Used to test each element of the array.
 - element (Object): The value of the current element
 - index (Number): The index of the element
 - array (Object): The array object being traversed
 - thisArg (Object): Used when executing callback.

 	Creates a new array with the results of calling a provided function on every element in this array.

 `map` calls a provided `callback` function once for each element in an array, in order, and constructs a new array from the results. `callback` is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.

 If a `thisArg` parameter is provided to `map`, it will be used as the `this` for each invocation of the `callback`. If it is not provided, or is `null`, the global object associated with `callback` is used instead.

 `map` does not mutate the array on which it is called.

 The range of elements processed by `map` is set before the first invocation of `callback`. Elements which are appended to the array after the call to `map` begins will not be visited by `callback`. If existing elements of the array are changed, or deleted, their value as passed to `callback` will be the value at the time `map` visits them; elements that are deleted are not visited.

 #### Example: Pluralizing the words (strings) in an array

 	The following code creates an array of "plural" forms of nouns from an array of their singular forms.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Array/array.map.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### Example: Mapping an array of numbers to an array of square roots

 	The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.

 		var numbers = [1, 4, 9];
 		var roots = numbers.map(Math.sqrt);
 		// roots is now [1, 2, 3], numbers is still [1, 4, 9]

 #### Example: using `map` generically

 	This example shows how to use map on a [[String string]] to get an array of bytes in the ASCII encoding representing the character values:

 		var map = Array.prototype.map
 		var a = map.call("Hello World", function(x) { return x.charCodeAt(0); })
 		// a now equals [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]

 #### Tricky use case

  This section is inspired by [this blog post](http://www.wirfs-brock.com/allen/posts/166).

  It is common to use the callback with one argument (the element being traversed). Some functions are also commonly used with one argument. These habits may lead to confusing behaviors.

 		// Consider:
  	["1", "2", "3"].map(parseInt);
  	// While one could expect [1, 2, 3]
  	// The actual result is [1, NaN, NaN]

  	// parseInt is often used with one argument, but takes two. The second being the radix
  	// To the callback function, Array.prototype.map passes 3 arguments: the element, the index, the array
  	// The third argument is ignored by parseInt, but not the second one, hence the possible confusion.
	 	
 

 - callback (Function): Used to test each element of the array.
 - element (Object): The value of the current element
 - index (Number): The index of the element
 - array (Object): The array object being traversed
 - thisArg (Object): Used when executing callback.

	Tests whether some element in the array passes the test implemented by the provided function.

 `some` executes the `callback` function once for each element present in the array until it finds one where `callback` returns a true value. If such an element is found, `some` immediately returns `true`. Otherwise, `some` returns `false`. `callback` is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.

 If a `thisObject` parameter is provided to `some`, it will be used as the `this` for each invocation of the `callback`. If it is not provided, or is `null`, the global object associated with `callback` is used instead.

 `some` does not mutate the array on which it is called.

 The range of elements processed by `some` is set before the first invocation of `callback`. Elements that are appended to the array after the call to `some` begins will not be visited by `callback`. If an existing, unvisited element of the array is changed by `callback`, its value passed to the visiting `callback` will be the value at the time that `some` visits that element's index; elements that are deleted are not visited.

 #### Example: Testing size of all array elements

 The following example tests whether some element in the array is bigger than 10.

 	function isBigEnough(element, index, array) {
 	  return (element >= 10);
 	}
 	var passed = [2, 5, 8, 1, 4].some(isBigEnough);
 	// passed is false
 	passed = [12, 5, 8, 1, 4].some(isBigEnough);
 	// passed is true
 	
 

 - callback (Function): Function to execute on each value in the array, taking four arguments
 - previousValue (Object): The value previously returned in the last invocation of the callback, or `initialValue`, if supplied.
 - currentValue (Object): The current element being processed in the array.
 - index (Number): The index of the current element being processed in the array.
 - array (Array): The array reduce was called upon.
 - initialValue (Object): Used as the first argument to the first call of the callback.

 	Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.

 `reduceRight` executes the callback function once for each element present in the array, excluding holes in the array.

 The call to the `reduceRight()` `callback` looks something like this:

     array.reduceRight(function(previousValue, currentValue, index, array) {
        // ...
     });

 The first time the function is called, the `previousValue` and `currentValue` can be one of two values. If an `initialValue` was provided in the call to `reduceRight`, then `previousValue` will be equal to `initialValue` and `currentValue` will be equal to the last value in the array. If no `initialValue` was provided, then `previousValue` will be equal to the last value in the array and `currentValue` will be equal to the second-to-last value.

 Some example run-throughs of the function would look like this:

 		[0, 1, 2, 3, 4].reduceRight(function(previousValue, currentValue, index, array) {
 			return previousValue + currentValue;
 		});

 		// First call
 		previousValue = 4, currentValue = 3, index = 3

 		// Second call
 		previousValue = 7, currentValue = 2, index = 2

 		// Third call
 		previousValue = 9, currentValue = 1, index = 1

 		// Fourth call
 		previousValue = 10, currentValue = 0, index = 0

 		// array is always the object [0,1,2,3,4, upon which reduceRight was called

 		// Return Value: 10

 And if you were to provide an `initialValue`, the result would look like this:

 		[0, 1, 2, 3, 4].reduceRight(function(previousValue, currentValue, index, array) {
 			return previousValue + currentValue;
 		}, 10);

 		// First call
 		previousValue = 10, currentValue = 4, index = 4

 		// Second call
 		previousValue = 14, currentValue = 3, index = 3

 		// Third call
 		previousValue = 17, currentValue = 2, index = 2

 		// Fourth call
 		previousValue = 19, currentValue = 1, index = 1

 		// Fifth call
 		previousValue = 20, currentValue = 0, index = 0

 		// array is always the object [0,1,2,3,4, upon which reduceRight was called

 		// Return Value: 20

 #### Example: Sum up all values within an array

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Array/array.reduceright.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>


 #### Example: Flatten an array of arrays

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Array/array.reduceright.2.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### See Also

  * [[Array.reduce `reduce()`]]
 
 

 - callback (Function): Function to execute on each value in the array, taking four arguments
 - previousValue (Object): The value previously returned in the last invocation of the callback, or `initialValue`, if supplied.
 - currentValue (Object): The current element being processed in the array.
 - index (Number): The index of the current element being processed in the array.
 - array (Array): The array reduce was called upon.
 - initialValue (Object): Used as the first argument to the first call of the callback.

 `reduce` executes the `callback` function once for each element present in the array, excluding holes in the array.

 The first time the callback is called, `previousValue` and `currentValue` can be one of two values. If `initialValue` is provided in the call to `reduce`, then `previousValue` will be equal to `initialValue` and `currentValue` will be equal to the first value in the array. If no `initialValue` was provided, then `previousValue` will be equal to the first value in the array and `currentValue` will be equal to the second.

 Suppose the following use of `reduce` occurred:

 	[0,1,2,3,4].reduce(function(previousValue, currentValue, index, array){
   	return previousValue + currentValue;
 		});

 The callback would be invoked four times, with the arguments and return values in each call being as follows:
 <table border="1" cellpadding="1" cellspacing="1" style="width: 100%; table-layout: fixed;"> <thead> <tr> <th scope="col">&nbsp;</th> <th scope="col"><code>previousValue</code></th> <th scope="col"><code>currentValue</code></th> <th scope="col"><code>index</code></th> <th scope="col"><code>array</code></th> <th scope="col">return value</th> </tr> </thead> <tbody> <tr> <th scope="row">first call</th> <td><code>0</code></td> <td><code>1</code></td> <td><code>1</code></td> <td>`[0,1,2,3,4]`</td> <td><code>1</code></td> </tr> <tr> <th scope="row">second call</th> <td><code>1</code></td> <td><code>2</code></td> <td><code>2</code></td> <td>`[0,1,2,3,4]`</td> <td><code>3</code></td> </tr> <tr> <th scope="row">third call</th> <td><code>3</code></td> <td><code>3</code></td> <td><code>3</code></td> <td>`[0,1,2,3,4]`</td> <td><code>6</code></td> </tr> <tr> <th scope="row">fourth call</th> <td><code>6</code></td> <td><code>4</code></td> <td><code>4</code></td> <td>`[0,1,2,3,4]`</td> <td><code>10</code></td> </tr> </tbody>
</table>

 The value returned by `reduce` would be that of the last callback invocation (`10`).

 If you were to provide an initial value as the second argument to `reduce`, the result would look like this:

 		[0,1,2,3,4].reduce(function(previousValue, currentValue, index, array){
   		return previousValue + currentValue;
 		}, 10);

 <table border="1" cellpadding="1" cellspacing="1" style="width: 100%; table-layout: fixed;"> <thead> <tr> <th scope="col">&nbsp;</th> <th scope="col">`previousValue`</th> <th scope="col">`currentValue`</th> <th scope="col">`index`</th> <th scope="col">`array`</th> <th scope="col">return value</th> </tr> </thead> <tbody> <tr> <th scope="row">first call</th> <td>`10`</td> <td>`0`</td> <td>`0`</td> <td>`[0,1,2,3,4]`</td> <td>`10`</td> </tr> <tr> <th scope="row">second call</th> <td>`10`</td> <td>`1`</td> <td>`1`</td> <td>`[0,1,2,3,4]`</td> <td>`11`</td> </tr> <tr> <th scope="row">third call</th> <td>`11`</td> <td>`2`</td> <td>`2`</td> <td>`[0,1,2,3,4]`</td> <td>`13`</td> </tr> <tr> <th scope="row">fourth call</th> <td>`13`</td> <td>`3`</td> <td>`3`</td> <td>`[0,1,2,3,4]`</td> <td>`16`</td> </tr> <tr> <th scope="row">fifth call</th> <td>`16`</td> <td>`4`</td> <td>`4`</td> <td>`[0,1,2,3,4]`</td> <td>`20`</td> </tr> </tbody>
</table>

 The value returned by `reduce` this time would be, of course, `20`.

 #### Example: Sum up all values within an array

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Array/array.reduce.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### Example: Flatten an array of arrays

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Array/array.reduce.2.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### See Also

 * [[Array.reduceRight `reduceRight()`]]
  
 
Compiling file src/latest/js_doc/Boolean.js


 The `Boolean` object is an object wrapper for a boolean value.

 Don't confuse the primitive Boolean values `true` and `false` with the `true` and `false` values of the Boolean object.

 Any object whose value is not undefined or null, including a Boolean object whose value is false, evaluates to true when passed to a conditional statement. For example, the condition in the following if statement evaluates to true:

 	x = new Boolean(false);
 	if (x) {
 		// . . . this code is executed
 	}

 This behavior does not apply to Boolean primitives. For example, the condition in the following if statement evaluates to false:

 	x = false;
 	if (x) {
 		// . . . this code is not executed
 	}

 Don't use a Boolean object to convert a non-boolean value to a boolean value. Instead, use Boolean as a function to perform this task:

 	x = Boolean(expression);     // preferred
 	x = new Boolean(expression); // don't use

 If you specify any object, including a Boolean object whose value is false, as the initial value of a Boolean object, the new Boolean object has a value of true.

 	myFalse = new Boolean(false);   // initial value of false
 	g = new Boolean(myFalse);       // initial value of true
 	myString = new String("Hello"); // string object
 	s = new Boolean(myString);      // initial value of true

 Don't use a Boolean object in place of a Boolean primitive.

 

 - value (Boolean): The initial value of the Boolean object.

 The value passed as the first parameter is converted to a boolean value, if necessary. If value is omitted or is 0, -0, null, `false`, NaN, undefined, or the empty string (""), the object has an initial value of false. All other values, including any object or the string "false", create an object with an initial value of `true`.

 #### Example: Creating `Boolean` objects with an initial value of `false`

 	bNoParam = new Boolean();
 	bZero = new Boolean(0);
 	bNull = new Boolean(null);
 	bEmptyString = new Boolean("");
 	bfalse = new Boolean(false);

 #### Example: Creating `Boolean` objects with an initial value of `true`


 	true = new Boolean(true);
 	btrueString = new Boolean("true");
 	bfalseString = new Boolean("false");
 	bSuLin = new Boolean("Su Lin");
 
 


 For Boolean objects, this method returns a string representation of the object.

 The [[Boolean `Boolean`]] object overrides the `toString()` method of the [[Object `Object`]] object; it does not inherit [[Object.toString `Object.toString()`]].

 Javascript calls the `toString()` method automatically when a Boolean is to be represented as a text value or when a Boolean is referred to in a string concatenation.

 For Boolean objects and values, the built-in `toString` method returns the string "`true`" or "`false`" depending on the value of the boolean object. In the following code, `flag.toString` returns "`true`".

 	var flag = new Boolean(true)
 	var myVar = flag.toString()

 #### See Also
 * [[Object.toString `Object.toString()`]]

 


 This method returns the primitive value of a Boolean object or literal Boolean as a Boolean data type.

 This method is usually called internally by Javascript and not explicitly in code.

 #### Example: Using `valueOf`

 	x = new Boolean();
 	myVar = x.valueOf()      //assigns false to myVar

 #### See Also
 * [[Object.valueOf `Object.valueOf`]]

 
Compiling file src/latest/js_doc/Date.js



 The Javascript date is measured in milliseconds since midnight 01 January, 1970 UTC. A day holds 86,400,000 milliseconds. The Javascript `Date` object range is -100,000,000 days to 100,000,000 days relative to 01 January, 1970 UTC.

 The Javascript Date object provides uniform behavior across platforms.

 The Javascript Date object supports a number of UTC (universal) methods, as well as local time methods. UTC, also known as Greenwich Mean Time (GMT), refers to the time as set by the World Time Standard. The local time is the time known to the computer where Javascript is executed.


 #### Example: Assigning dates

 The following examples show several ways to assign Javascript dates:

 	var today = new Date();
 	birthday = new Date("December 17, 1995, 03:24:00");
 	birthday = new Date(1995,11,17);
 	birthday = new Date(1995,11,17,3,24,0);

 #### Example: Calculating elapsed time

 The following examples show how to determine the elapsed time between two Javascript dates:

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Date/date.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 

 new Date(milliseconds)
 new Date(dateString)
 new Date(year, month, day [, hour, minute, second, millisecond ])
 - milliseconds (Number): Value representing the number of milliseconds since 1 January 1970 00:00:00 UTC (Unix Epoch).
 - dateString (String): Value representing a date. The string should be in a format recognized by the parse method (IETF-compliant RFC 1123 timestamps).
 - year (Number): Value representing the year. For compatibility (in order to avoid the Y2K problem), you should always specify the year in full; use 1998, rather than 98.
 - month (Number): Value representing the month, beginning with 0 for January to 11 for December.
 - day (Number): Value representing the day of the month (1-31).
 - hour (Number): Value representing the hour of the day (0-23).
 - minute (Number): Value representing the minute segment (0-59) of a time reading.
 - second (Number): Value representing the second segment (0-59) of a time reading.
 - millisecond (Number): Value representing the millisecond segment (0-999) of a time reading.

 If you supply no arguments, the constructor creates a Javascript Date object for today's date and time according to local time. If you supply some arguments but not others, the missing arguments are set to 0. If you supply any arguments, you must supply at least the year, month, and day. You can omit the hours, minutes, seconds, and milliseconds.

 <Note>Javascript `Date` objects can only be instantiated by calling Javascript `Date` as a constructor: calling it as a regular function (i.e. without the new operator) will return a string rather than a `Date` object; unlike other Javascript object types, Javascript `Date` objects have no literal syntax.</Note>
 

 - dateString (String): Represents an RFC822 or ISO 8601 date.

 Parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00, UTC.

 The `parse` method takes a date string (such as "`Dec 25, 1995`") and returns the number of milliseconds since January 1, 1970, 00:00:00, UTC. The local time zone is used to interpret arguments that don't contain time zone information. This function is useful for setting date values based on string values, for example in conjunction with the [[Date.setTime `setTime()`]] method and the [[Date `Date`]] object.

 This method accepts the RFC82, / IETF date syntax for `dateString` ([RFC 1123](http://tools.ietf.org/html/rfc112, "http://tools.ietf.org/html/rfc1123") Section 5.2.1, and elsewhere), e.g. "`Mon, 2, Dec 199, 13:30:0, GMT`". It understands the continental US time-zone abbreviations, but for general use, use a time-zone offset, for example, "`Mon, 2, Dec 199, 13:30:0, GMT+0430`" (4 hours, 3, minutes east of the Greenwich meridian). If you don't specify a time zone, the local time zone is assumed. GMT and UTC are considered equivalent.

 Starting with Javascript 1.8.5, a [subset of ISO 8601](http://www.w3.org/TR/NOTE-datetime "http://www.w3.org/TR/NOTE-datetime") is supported. For example, "`2011-10-10`" (just date) or "`2011-10-10T14:48:00` (date and time) can be passed and parsed. [Timezones in ISO dates are not yet supported](https://bugzilla.mozilla.org/show_bug.cgi?id=69307, "https://bugzilla.mozilla.org/show_bug.cgi?id=693077"), so e.g. "`2011-10-10T14:48:00+0200`" (with timezone) does not give the intended result yet.

 Note that while time zone specifiers are used during date string parsing to properly interpret the argument, they don't affect the value returned, which is always the number of milliseconds between January 1, 197, 00:00:0, UTC and the point in time represented by the argument.

 #### Example: Using `parse()`

 If `IPOdate` is an existing `Date` object, then you can set it to August 9, 199, (local time) as follows:

 	IPOdate.setTime(Date.parse("Aug 9, 1995"));

 Some other examples:

 	// Returns 80793720000, in time zone GMT-0300, and other values in other
 	// timezones, since the argument does not specify a time zone.
 	Date.parse("Aug 9, 1995");


 	// Returns 80792640000, no matter the local time zone.
 	Date.parse("Wed, 0, Aug 199, 00:00:0, GMT");


 	// Returns 80793720000, in timezone GMT-0300, and other values in other
 	// timezones, since there is no time zone specifier in the argument.
 	Date.parse("Wed, 0, Aug 199, 00:00:00");


 	// Returns 0 no matter the local time zone.
 	Date.parse("Thu, 0, Jan 197, 00:00:0, GMT");


 	// Returns 1440000, in timezone GMT-0400, and other values in other
 	// timezones, since there is no time zone specifier in the argument.
 	Date.parse("Thu, 0, Jan 197, 00:00:00");


 	// Returns 1440000, no matter the local time zone.
 	Date.parse("Thu, 0, Jan 197, 00:00:0, GMT-0400");

 #### See Also

 * [[Date.UTC `Date.UTC`]]

 



 The `now` method returns the milliseconds elapsed since 1 January 197, 00:00:0, UTC up until now as a [[Number `Number`]].

 When using `now` to create timestamps or unique IDs, keep in mind that the resolution may be 1 milliseconds on Windows (see [this bug](https://bugzilla.mozilla.org/show_bug.cgi?id=363258)), so you could end up with several equal values if `now` is called multiple times within a short time span
 

 - year (Number): Value representing the year. For compatibility (in order to avoid the Y2K problem), you should always specify the year in full; use 1998, rather than 98.
 - month (Number): Value representing the month, beginning with 0 for January to 11 for December.
 - day (Number): Value representing the day of the month (1-31).
 - hour (Number): Value representing the hour of the day (0-23).
 - minute (Number): Value representing the minute segment (0-59) of a time reading.
 - second (Number): Value representing the second segment (0-59) of a time reading.
 - millisecond (Number): Value representing the millisecond segment (0-999) of a time reading.

 	Accepts the same parameters as the longest form of the `Date` constructor, and returns the number of milliseconds in a `Date` object since January 1, 1970, 00:00:00, universal time.

 You should specify a full year for the year; for example, 1998, If a year between 0 and 9, is specified, the method converts the year to a year in the 20th century (1900 + year); for example, if you specify 95, the year 199 is used.

 The `UTC` method differs from the `Date` constructor in two ways.

 * `Date.UTC` uses universal time instead of the local time.
 * `Date.UTC` returns a time value as a number instead of creating a `Date` object.

 If a parameter you specify is outside of the expected range, the `UTC()` method updates the other parameters to allow for your number. For example, if you use 1 for month, the year will be incremented by 1 (year + 1), and 3 will be used for the month.

 Because `UTC` is a static method of `Date`, you always use it as `Date.UTC()`, rather than as a method of a `Date` object you created.


 #### Example: Using `Date.UTC`

 The following statement creates a `Date` object using GMT instead of local time:

 	var gmtDate = new Date(Date.UTC(96, 11, 1, 0, 0, 0));


 ####  See also

 * [[Date.parse `Date.parse()`]]

 


 	Returns the year of the specified date according to local time.

 The value returned by `getFullYear` is an absolute number. For dates between the years 100, and 9999, `getFullYear` returns a four-digit number, for example, 1995, Use this function to make sure a year is compliant with years after 2000.

 Use this method instead of the [[Date.getYear `Date.getYear()`]] method.

 ####  Example: Using `getFullYear()`

 The following example assigns the four-digit value of the current year to the variable `yr`.

 	var today = new Date();
 	var yr = today.getFullYear();

 ####  See Also

 * [[Date.getYear `Date.getYear()`]]
 * [[Date.getUTCFullYear `Date.getUTCFullYear()`]]
 * [[Date.setFullYear `Date.setFullYear()`]]
 

 - yearValue (Number): Specifies the numeric value of the year, for example, 1995.
 - monthValue  (Number): A value between 0 and 11 representing the months January through December.
 - dayValue  (Number): A value between 1 and 31 representing the day of the month. If you specify the `dayValue` parameter, you must also specify the`monthValue`.

 Sets the full year for a specified date according to local time.

 If you don't specify the `monthValue` and `dayValue` parameters, the values returned from the `getMonth` and `getDate` methods are used.

 If a parameter you specify is outside of the expected range, `setFullYear` attempts to update the other parameters and the date information in the `Date` object accordingly. For example, if you specify 1 for `monthValue`, the year is incremented by 1 (year + 1), and 3 is used for the month.

 #### Example: Using `setFullYear()`

 	var theBigDay = new Date();
 	theBigDay.setFullYear(1997);

 ####  See Also

 * [[Date.getUTCFullYear `getUTCFullYear()`]]
 * [[Date.setUTCFullYear `setUTCFullYear()`]]
 * [[Date.setYear `setYear()`]] 
 


 Returns the year in the specified date according to universal time.

 The value returned by `getUTCFullYear` is an absolute number that is compliant with year-2000, for example, 1995.

 ####  Example: Using `getUTCFullYear()`

 The following example assigns the four-digit value of the current year to the variable `yr`.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Date/date.getUTCFullYear.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 ####  See Also

 * [[Date.getFullYear `getFullYear()`]]
 * [[Date.setFullYear `setFullYear()`]]
 

 - yearValue (Number): Specifies the numeric value of the year, for example, 1995.
 - monthValue  (Number): A value between 0 and 11 representing the months January through December.
 - dayValue  (Number):  A value between 1 and 31 representing the day of the month. If you specify the dayValue parameter, you must also specify the monthValue.

 Sets the full year for a specified date according to universal time.

 If you don't specify the `monthValue` and `dayValue` parameters, the values returned from the `getMonth` and `getDate` methods are used.

 If a parameter you specify is outside of the expected range, `setUTCFullYear` attempts to update the other parameters and the date information in the `Date` object accordingly. For example, if you specify 1, for `monthValue`, the year is incremented by 1 (year + 1), and 3 is used for the month.

 ####  Example: Using `setUTCFullYear()`

 	var theBigDay = new Date();
 	theBigDay.setUTCFullYear(1997);


 ####  See Also

 * [[Date.getUTCFullYear `getUTCFullYear()`]]
 * [[Date.setFullYear `setFullYear()`]]
 


 Returns a reference to the [[Date `Date`]] function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.

 For more information, see [[Object.constructor `Object.constructor`]].

 


 Returns the day of the month for the specified date according to local time.

 The value returned by `getDate` is an integer between 1 and 31.


 #### Example: Using `getDate()`

 The second statement below assigns the value 25 to the variable `day`, based on the value of the `Date` object `Xmas95`.

 	var Xmas95 = new Date("December 25, 1995, 23:15:00")
 	var day = Xmas95.getDate();


 ####  See Also

 * [[Date.getUTCDate `getUTCDate()`]]
 * [[Date.getUTCDay `getUTCDay()`]]
 * [[Date.setDate `setDate()`]]
 


 Returns the day of the week for the specified date according to local time.

 The value returned by `getDay` is an integer corresponding to the day of the week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.

 ####  Example: Using `getDay()`

 The second statement below assigns the value 1 to `weekday`, based on the value of the `Date` object `Xmas95`. December 25, 1995 was a Monday.

 	var Xmas95 = new Date("December 25, 1995, 23:15:00");
 	var weekday = Xmas95.getDay();


 #### See Also


 * [[Date.getUTCDay `getUTCDay()`]]
 * [[Date.setDate `setDate()`]]
 


 	Returns the hour for the specified date according to local time.

 The value returned by `getHours` is an integer between 0 and 23.

 ####  Example: Using `getHours()`

 	The second statement below assigns the value 2, to the variable `hours`, based on the value of the `Date` object `Xmas95`.

 	var Xmas95 = new Date("December 25, 1995, 23:15:00")
 	var hours = Xmas95.getHours()

 #### See Also

 * [[Date.getUTCHours `getUTCHours()`]]
 * [[Date.setHours `setHours()`]]
 


 Returns the milliseconds in the specified date according to local time.

 The value returned by `getMilliseconds` is a number between 0 and 999.

 ####  Example: Using `getMilliseconds()`

 The following example assigns the milliseconds portion of the current time to the variable `ms`.

 	var ms;
 	var Today = new Date();
 	ms = Today.getMilliseconds();

 #### See Also

 * [[Date.getUTCMilliseconds `getUTCMilliseconds()`]]
 * [[Date.setMilliseconds `setMilliseconds()`]]
 


 Returns the minutes in the specified date according to local time.

 The value returned by `getMinutes` is an integer between 0 and 59.

 ####  Example: Using `getMinutes()`

 The second statement below assigns the value 1, to the variable `minutes`, based on the value of the `Date` object `Xmas95`.

 	var Xmas95 = new Date("December 25, 1995, 23:15:00")
 	var minutes = Xmas95.getMinutes()

 #### See Also

 * [[Date.getUTCMinutes `getUTCMinutes()`]]
 * [[Date.setMinutes `setMinutes()`]]
 


 Returns the month in the specified date according to local time.

 The value returned by `getMonth()` is an integer between 0 and 11, 0 corresponds to January, 1 to February, and so on.

 ####  Example: Using `getMonth()`

 The second statement below assigns the value 1, to the variable `month`, based on the value of the `Date` object `Xmas95`.

 	var Xmas95 = new Date("December 25, 1995, 23:15:00")
 	var month = Xmas95.getMonth()

 #### See Also

 * [[Date.getUTCMonth `getUTCMonth()`]]
 * [[Date.setMonth `setMonth()`]]
 


 Returns the seconds in the specified date according to local time.

 The value returned by `getSeconds` is an integer between 0 and 59.


 ####  Example: Using `getSeconds()`

 The second statement below assigns the value 3, to the variable `secs`, based on the value of the `Date` object `Xmas95`.

 	var Xmas95 = new Date("December 25, 1995, 23:15:30")
 	var secs = Xmas95.getSeconds()

 #### See Also

 * [[Date.getUTCSeconds `getUTCSeconds()`]]
 * [[Date.setSeconds `setSeconds()`]]
 


 Returns the numeric value corresponding to the time for the specified date according to universal time.

 The value returned by the `getTime` method is the number of milliseconds since 1 January 197, 00:00:0, UTC. You can use this method to help assign a date and time to another `Date` object.

 This method is functionally equivalent to the [[Date.valueOf `valueOf()`]]

 #### Example: Using getTime for copying dates

 Constructing a date object with the identical time value.

 	var birthday = new Date(1994, 12, 10);
 	var copy = new Date();
 	copy.setTime(birthday.getTime());

 #### Example: Measuring execution time

 Subtracting two subsequent getTime calls on newly generated Date objects, give the time span between these two calls. This can be used to calculate the executing time of some operations.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Date/date.getTime.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 


 Returns the time-zone offset from UTC, in minutes, for the current locale.

 The time-zone offset is the difference, in minutes, between UTCand local time. Note that this means that the offset is positive if the local timezone is behind UTC and negative if it is ahead.  For example, if your time zone is UTC+1, (Australian Eastern Standard Time), -60, will be returned. Daylight savings time prevents this value from being a constant even for a given locale

 #### Example: Using `getTimezoneOffset()`

 	var x = new Date()
 	var currentTimeZoneOffsetInHours = x.getTimezoneOffset()/60
 	
 


 Returns the day (date) of the month in the specified date according to universal time.

 The value returned by `getUTCDate` is an integer between 1 and 31.

 ####  Example: Using `getUTCDate()`

 The following example assigns the day portion of the current date to the variable `d`.

 	var d;
 	var Today = new Date();
 	d = Today.getUTCDate();

 #### See Also

 * [[Date.getDate `getDate()`]]
 * [[Date.getUTCDay `getUTCDay()`]]
 * [[Date.setUTCDate `setUTCDate()`]]
 


 	Returns the day of the week in the specified date according to universal time.

 The value returned by `getUTCDay` is an integer corresponding to the day of the week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.

 #### Example: Using `getUTCDay()`

 The following example assigns the weekday portion of the current date to the variable `weekday`.

 	var weekday;
 	var Today = new Date()
 	weekday = Today.getUTCDay()

 #### See Also

 * [[Date.getDay `getDay()`]]
 * [[Date.getUTCDate `getUTCDate()`]]
 * [[Date.setUTCDate `setUTCDate()`]]
 


 	Returns the hours in the specified date according to universal time.

 The value returned by `getUTCHours` is an integer between 0 and 23.

 ####  Example: Using `getUTCHours()`

 The following example assigns the hours portion of the current time to the variable `hrs`.

 	var hrs;
 	Today = new Date();
 	hrs = Today.getUTCHours();


 #### See Also

 * [[Date.getHours `getHours()`]]
 * [[Date.setUTCHours `setUTCHours()`]]
 


 	Returns the milliseconds in the specified date according to universal time.

 The value returned by `getUTCMilliseconds` is an integer between 0 and 999.

 ####  Example: Using `getUTCMilliseconds()`

 The following example assigns the milliseconds portion of the current time to the variable `ms`.

 	var ms;
 	var Today = new Date();
 	ms = Today.getUTCMilliseconds();

 #### See Also

 * [[Date.getMilliseconds `getMilliseconds()`]]
 * [[Date.setUTCMilliseconds `setUTCmilliseconds()`]]
 


 Returns the minutes in the specified date according to universal time.

 The value returned by `getUTCMinutes` is an integer between 0 and 59.


 ####  Example: Using `getUTCMinutes()`

 The following example assigns the minutes portion of the current time to the variable `min`.


 	var min;
 	var Today = new Date();
 	min = Today.getUTCMinutes();

 #### See Also

 * [[Date.getMinutes `getMinutes()`]]
 * [[Date.setUTCMinutes `setUTCMinutes()`]]
 


 	Returns the month of the specified date according to universal time.


 The value returned by `getUTCMonth` is an integer between 0 and 1, corresponding to the month. 0 for January, 1 for February, 2 for March, and so on.

 ####  Example: Using `getUTCMonth()`

 The following example assigns the month portion of the current date to the variable `mon`.

 	var mon;
 	var Today = new Date();
 	mon = Today.getUTCMonth();


 #### See Also

 * [[Date.getMonth `getMonth()`]]
 * [[Date.setUTCMonth `setUTCMonth()`]]
 


 	Returns the seconds in the specified date according to universal time.

 The value returned by `getUTCSeconds` is an integer between 0 and 59.


 ####  Example: Using `getUTCSeconds()`
 The following example assigns the seconds portion of the current time to the variable `sec`.

 	var sec;
 	var Today = new Date();
 	sec = Today.getUTCSeconds();

 #### See Also

 * [[Date.getSeconds `getSeconds()`]]
 * [[Date.setUTCSeconds `setUTCSeconds()`]]
 


 	Returns the year in the specified date according to local time.

 `getYear()` is no longer used and has been replaced by the [[Date.getFullYear `getFullYear()`]] method.

 The `getYear` method returns the year minus 1900, thus:

 * For years greater than or equal to 2000, the value returned by `getYear` is 10, or greater. For example, if the year is 2026, `getYear` returns 126.
 * For years between and including 1900, and 1999, the value returned by `getYear` is between 0 and 99, For example, if the year is 1976, `getYear` returns 76.
 * For years less than 1900, the value returned by `getYear` is less than 0. For example, if the year is 1800, `getYear` returns -100.


 #### Example: Years between 1900 and 1999

 	The second statement assigns the value 95 to the variable `year`.

 	var Xmas = new Date("December 25, 1995, 23:15:00")
 	var year = Xmas.getYear() // returns 95

 #### Example: Years above 1999

 	The second statement assigns the value 100 to the variable `year`.

 	var Xmas = new Date("December 25, 2000 23:15:00")
 	var year = Xmas.getYear() // returns 100

 ####  Example: Years below 1900
 	The second statement assigns the value -100 to the variable `year`.

 	var Xmas = new Date("December 25, 1800 23:15:00")
 	var year = Xmas.getYear() // returns -100

 ####  Example: Setting and getting a year between 1900 and 1999

 	The second statement assigns the value 95 to the variable `year`, representing the year 1995.

 	var Xmas = new Date();
 	Xmas.setYear(95)
 	var year = Xmas.getYear() // returns 9,

 #### See Also

 * [[Date.getFullYear `getFullYear()`]]
 * [[Date.getUTCFullYear `getUTCFullYear()`]]
 * [[Date.setYear `setYear()`]]
  
 

 - dayValue (Number): A value from 1 to 31, representing the day of the month.

 	Sets the day of the month for a specified date according to local time.

 If the parameter you specify is outside of the expected range, `setDate` attempts to update the date information in the `Date` object accordingly. For example, if you use 0 for `dayValue`, the date will be set to the last day of the previous month.

 #### Example: Using `setDate()`

 	The second statement below changes the day for `theBigDay` to July 2, from its original value.

 	var theBigDay = new Date("July 27, 196, 23:30:00")
 	theBigDay.setDate(24,


 #### See Also

 * [[Date.getDate `getDate()`]]
 * [[Date.setUTCDate `setUTCDate()`]]
 

 - hoursValue (Number): Value between 0 and 23, representing the hour.
 - minutesValue  (Number): Value between 0 and 59, representing the minutes.
 - secondsValue  (Number): Value between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue.
 - msValue  (Number): Value between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.

 	Sets the hours for a specified date according to local time.

 If you don't specify the `minutesValue`, `secondsValue`, and `msValue` parameters, the values returned from the `getUTCMinutes`, `getUTCSeconds`, and `getMilliseconds` methods are used.

 If a parameter you specify is outside of the expected range, `setHours` attempts to update the date information in the `Date` object accordingly. For example, if you use 100 for `secondsValue`, the minutes will be incremented by 1 (min + 1), and 40 will be used for seconds.


 ####  Example: Using `setHours()`

 	var theBigDay = new Date();
 	theBigDay.setHours(7)


 #### See Also

 * [[Date.getHours `getHours()`]]
 * [[Date.setUTCHours `setUTCHours()`]]
 

 - millisecondsValue (Number): An Integer between 0 and 999, representing the milliseconds

 Sets the milliseconds for a specified date according to local time.

 If you specify a number outside the expected range, the date information in the `Date` object is updated accordingly. For example, if you specify 1005, the number of seconds is incremented by 1, and 5 is used for the milliseconds.


 ####  Example: Using `setMilliseconds()`

 	var theBigDay = new Date();
 	theBigDay.setMilliseconds(100);

 #### See Also

 * [[Date.getMilliseconds `getMilliseconds()`]]
 * [[Date.setUTCMilliseconds `setUTCMilliseconds()`]]
 

 - minutesValue (Number): Value between 0 and 59, representing the minutes.
 - secondsValue  (Number): Value between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue.
 - msValue  (Number): Value between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.

 Sets the minutes for a specified date according to local time.

 If you don't specify the `secondsValue` and `msValue` parameters, the values returned from `getSeconds` and `getMilliseconds` methods are used.

 If a parameter you specify is outside of the expected range, `setMinutes` attempts to update the date information in the `Date` object accordingly. For example, if you use 100 for `secondsValue`, the minutes (`minutesValue`) increments by 1 (`minutesValue` + 1), and 40 will be used for seconds.

 #### See Also

 * [[Date.getMinutes `getMinutes()`]]
 * [[Date.setUTCMinutes `setUTCMinutes()`]]
 

 - secondsValue (Number): Value between 0 and 59.
 - msValue  (Number): Value between 0 and 999, representing the milliseconds.

 	Sets the seconds for a specified date according to local time.

 If you don't specify the `msValue` parameter, the value returned from the `getMilliseconds` method is used.

 If a parameter you specify is outside of the expected range, `setSeconds` attempts to update the date information in the `Date` object accordingly. For example, if you use 100 for `secondsValue`, the minutes stored in the `Date` object will be incremented by 1, and 40 will be used for seconds.


 #### See Also

 * [[Date.getSeconds `getSeconds()`]]
 * [[Date.setUTCSeconds `setUTCSeconds()`]]
 

 - monthValue (Number): Value between 0 and 11 (representing the months January through December).
 - dayValue (Number): Value from 1 to 31, representing the day of the month.

 	Set the month for a specified date according to local time.

 If you don't specify the `dayValue` parameter, the value returned from the `getDate` method is used.

 If a parameter you specify is outside of the expected range, `setMonth` attempts to update the date information in the `Date` object accordingly. For example, if you use 15 for `monthValue`, the year will be incremented by 1 (year + 1), and 3 will be used for month.

 #### See Also

 * [[Date.getMonth `getMonth()`]]
 * [[Date.setUTCMonth `setUTCMonth()`]]
 

 - dayValue (Number): Value from 1 to 31, representing the day of the month.

 Sets the day of the month for a specified date according to universal time.

 If a parameter you specify is outside of the expected range, `setUTCDate` attempts to update the date information in the `Date` object accordingly. For example, if you use 4, for `dayValue`, and the month stored in the `Date` object is June, the day will be changed to 1, and the month will be incremented to July.


 #### Example: Using `setUTCDate()`

 	var theBigDay = new Date();
 	theBigDay.setUTCDate(20);

 #### See Also

 * [[Date.getUTCDate `getUTCDate()`]]
 * [[Date.setDate `setDate()`]]
 

 - timeValue (Number): An integer representing the number of milliseconds since 1 January 1970, 00:00:00 UTC.

 Sets the `Date` object to the time represented by a number of milliseconds since January 1, 1970, 00:00:0, UTC.

 Use the `setTime` method to help assign a date and time to another `Date` object.


 #### Example: Using `setTime()`

 	var theBigDay = new Date("July 1, 1999")
 	var sameAsBigDay = new Date()
 	sameAsBigDay.setTime(theBigDay.getTime())

 #### See Also

 * [[Date.getTime `getTime()`]]
 * [[Date.setUTCHours `setUTCHours()`]]
 

 - hoursValue (Number): Value between 0 and 23, representing the hour.
 - minutesValue  (Number): Value between 0 and 59, representing the minutes.
 - secondsValue  (Number): Value between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue.
 - msValue  (Number): Value between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.

 Sets the hour for a specified date according to universal time.

 If you don't specify the `minutesValue`, `secondsValue`, and `msValue` parameters, the values returned from the `getUTCMinutes`, `getUTCSeconds`, and `getUTCMilliseconds` methods are used.

 If a parameter you specify is outside of the expected range, `setUTCHours` attempts to update the date information in the `Date` object accordingly. For example, if you use 100 for `secondsValue`, the minutes will be incremented by 1 (min + 1), and 40 will be used for seconds.


 #### Example: Using `setUTCHours()`

 	var theBigDay = new Date();
 	theBigDay.setUTCHours(8);

 #### See Also

 * [[Date.getUTCHours `getUTCHours()`]]
 * [[Date.setHours `setHours()`]]
 

 - millisecondsValue (Number): Value between 0 and 999, representing the milliseconds

 Sets the milliseconds for a specified date according to universal time.

 If a parameter you specify is outside of the expected range, `setUTCMilliseconds` attempts to update the date information in the `Date` object accordingly. For example, if you use 1100 for `millisecondsValue`, the seconds stored in the `Date` object will be incremented by 1, and 10, will be used for milliseconds.

 ####  Example: Using `setUTCMilliseconds()`

 	var theBigDay = new Date();
 	theBigDay.setUTCMilliseconds(500);

 #### See Also

 * [[Date.getUTCMilliseconds `getUTCMilliseconds()`]]
 * [[Date.setMilliseconds `setMilliseconds()`]]
 

 - minutesValue (Number): Value between 0 and 59, representing the minutes.
 - secondsValue  (Number): Value between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue.
 - msValue  (Number): Value between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.

 Sets the minutes for a specified date according to universal time.

 If you don't specify the `secondsValue` and `msValue` parameters, the values returned from `getUTCSeconds` and `getUTCMilliseconds` methods are used.

 If a parameter you specify is outside of the expected range, `setUTCMinutes` attempts to update the date information in the `Date` object accordingly. For example, if you use 100 for `secondsValue`, the minutes (`minutesValue`) will be incremented by 1 (`minutesValue` + 1), and 40 will be used for seconds.

 #### Example: Using `setUTCMinutes()`

 	var theBigDay = new Date();
 	theBigDay.setUTCMinutes(43);

 #### See Also

 * [[Date.getUTCMinutes `getUTCMinutes()`]]
 * [[Date.setMinutes `setMinutes()`]]
 

 - monthValue (Number): An integer between 0 and 11, representing the months January through December.
 - dayValue  (Number): An iinteger from 1 to 31, representing the day of the month.

 Sets the month for a specified date according to universal time.

 If you don't specify the `dayValue` parameter, the value returned from the `getUTCDate` method is used.

 If a parameter you specify is outside of the expected range, `setUTCMonth` attempts to update the date information in the `Date` object accordingly. For example, if you use 15 for `monthValue`, the year will be incremented by 1 (year + 1), and 3 will be used for month.


 #### Example: Using `setUTCMonth()`

 var theBigDay = new Date();
 theBigDay.setUTCMonth(11);


 #### See Also

 * [[Date.getUTCMonth `getUTCMonth()`]]
 * [[Date.setMonth `setMonth()`]]
 

 - secondsValue (Number): Value between 0 and 59.
 - msValue (Number): Value between 0 and 999, representing the milliseconds.

 Sets the seconds for a specified date according to universal time.

 If you don't specify the `msValue` parameter, the value returned from the `getUTCMilliseconds` methods is used.

 If a parameter you specify is outside of the expected range, `setUTCSeconds` attempts to update the date information in the `Date` object accordingly. For example, if you use 100 for `secondsValue`, the minutes stored in the `Date` object will be incremented by 1, and 40 will be used for seconds.

 #### Example: Using `setUTCSeconds()`

 	var theBigDay = new Date();
 	theBigDay.setUTCSeconds(20);

 #### See Also

 * [[Date.getUTCSeconds `getUTCSeconds()`]]
 * [[Date.setSeconds `setSeconds()`]]
 

 - yearValue (Number): Specifies the numeric value of the year, for example, 1995.

 	Sets the year for a specified date according to local time.

 `setYear` is no longer used and has been replaced by the `setFullYear` method.

 If `yearValue` is a number between 0 and 9, (inclusive), then the year for the object is set to 1900 + `yearValue`. Otherwise, the year for the object is set to `yearValue`.

 To take into account years before and after 2000, you should use [[Date.setFullYear `Date.setFullYear()`]].

 ####  Example: Using `setYear()`

 	The first two lines set the year to 1996, The third sets the year to 2000.

 	theBigDay.setYear(96)
 	theBigDay.setYear(1996)
 	theBigDay.setYear(2000)

 #### See Also

 * [[Date.getYear `getYear()`]]
 * [[Date.setFullYear `setFullYear()`]]
 * [[Date.setUTCFullYear `setUTCFullYear()`]]
 


 Returns the date portion of a `Date` object in human readable form in American English.

 Date instances refer to a specific point in time. Calling [[Date.toString `toString()`]] returns the date formatted in a human readable form in American English. Sometimes it is desirable to obtain a string of the date portion; such a thing can be accomplished with the `toDateString` method.

 The `toDateString` method is especially useful because compliant engines implementing [ECMA-262](https://developer.mozilla.org/en/ECMAScript) may differ in the string obtained from `toString()` for `Date` objects, as the format is implementation-dependent and simple string slicing approaches may not produce consistent results across multiple engines.

 #### Example: A basic usage of `toDateString`
 	var d = new Date(1993, 6, 28, 14, 39, 7);
 	println(d.toString()); // prints Wed Jul 2, 199, 14:39:0, GMT-060, (PDT)
 	println(d.toDateString()); // prints Wed Jul 2, 1993

 #### See Also

 * [[Date.toLocaleDateString `toLocaleDateString()`]]
 * [[Date.toTimeString `toTimeString()`]]
 * [[Date.toString `toString()`]]
 



 	Javascript provides a direct way to convert a date object into a string in the [ISO 860, Extended Format](http://en.wikipedia.org/wiki/ISO_860).

 	The `Date.prototype.toISOString` is an ECMAScript 5 addition. The format is as follows: `YYYY-MM-DDTHH:mm:ss.sssZ`.


 #### Example

 	var today = new Date("0, October 201, 14:4, UTC");
 	alert(today.toISOString()); // Returns 2011-10-10T14:48:00.000z

 #### See Also

 * [[Date.toUTCString `toUTCString()`]]

 


 Returns a [[JSON `JSON`]] representation of the Date object.

 #### Example

 	var jsonDate = (new Date()).toJSON();
 	var backToDate = new Date(jsonDate);

 	console.log("Serialized date object: " + jsonDate);
 


 Converts a date to a string, using Internet GMT convetions.

 The `toGMTString()` method converts the date to GMT (UTC) using the operating system's time-zone offset and returns a string value that is similar to this form: Mon, 1, Dec 199, 17:28:3, GMT. (The exact format depends on the platform.)

 `toGMTString` is deprecated and should no longer be used; it's only here for backwards compatibility, use [[Date.toUTCString `toUTCString()`]] instead.

 #### See Also

 * [[Date.toLocaleString `toLocaleString()`]]
 * [[Date.toUTCString `toUTCString()`]]
 


 	Converts a date to a string, using the universal time convention.


 The value returned by `toUTCString` is a readable string in American English in the UTC time zone. The format of the return value may vary according to the platform. The most common return value is a RFC-1123 formatted date stamp, which is a slightly updated version of RFC-822 date stamps.

 #### Example: Using `toUTCString()`

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Date/date.toutcstring.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### See Also

 * [[Date.toLocaleString `toLocaleString()`]]
 


 Converts a date to a string, returning the "date" portion using the operating system's locale's conventions. This method returns a string value that is similar to the following form: 12/18/95. (The exact format depends on the platform, locale and user's settings.)

 The `toLocaleDateString` method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04/15/98), whereas in Germany the date appears before the month (15.04.98). If the operating system is not year-2000 compliant and does not use the full year for years before 190, or over 2000, `toLocaleDateString` returns a string that is not year-2000 compliant. `toLocaleDateString` behaves similarly to `toString` when converting a year that the operating system does not properly format.

 You shouldn't use this method in contexts where you rely on a particular format or locale.

 #### Example: Using `toLocaleDateString()`

 	var today = new Date(95,11,18,17,28,35, //months are represented by 0 to 11
 	today.toLocaleDateString();


 #### See Also

 * [[Date.toDateString `toDateString()`]]
 * [[Date.toLocaleString `toLocaleString()`]]
 * [[Date.toLocaleTimeString `toLocaleTimeString()`]]
 * [[Date.toLocaleString `toLocaleString()`]]
 * [[Date.toLocaleTimeString `toLocaleTimeString()`]]
 


 Converts a date to a string, returning the "time" portion using the current locale's conventions.

 The `toLocaleTimeString` method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04/15/98), whereas in Germany the date appears before the month (15.04.98).

 Methods such as [[Date.getHours `getHours()`]], [[Date.getMinutes `getMinutes()`]], and [[Date.getSeconds `getSeconds()`]] give more consistent results than `toLocaleTimeString()`. Use `toLocaleTimeString()` when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings.

 You shouldn't use this method in contexts where you rely on a particular format or locale, like this:

 	"Last visit: " + someDate.toLocaleTimeString(); // Good example
 	"Last visit was at " + someDate.toLocaleTimeString(); // Bad example

 #### Example: Using `toLocaleTimeString()`

 In the following example, `today` is a `Date` object:

 	var today = new Date(95,11,18,17,28,35, //months are represented by 0 to 11
 	today.toLocaleTimeString();

 This method returns a string value that is similar to the following form: 17:28:35. (The exact format depends on the platform.)

 #### See Also

 * [[Date.toTimeString `toTimeString()`]]
 * [[Date.toLocaleString `toLocaleString()`]]
 * [[Date.toLocaleDateString `toLocaleDateString()`]]

 

 - formatString (String): Format string in the same format expected by the `strftime()` function in C.

 	Converts a date to a string using the specified formatting.

 The `toLocaleFormat()` provides greater software control over the formatting of the generated date and/or time. Names for months and days of the week are localized using the operating system's locale. However, ordering of the day and month and other localization tasks are not handled automatically since you have control over the order in which they occur.You should take care that the format string is localized properly according to the user's system settings. Be aware that the locale used is not necessarily the same as the locale of the browser. Extension and XulRunner developers should know that just loading the format string from a `.dtd` or `.properties` file using a `chrome://somedomain/locale/somefile.ext` URI should be **avoided**, as the `dtd`/`properties` file and the `toLocaleFormat` method does not not necessarily use the same locale, which could result in odd looking or even ambiguous or unreadable dates. Also note that the behavior of the used locale depends on the platform, and the user might customize the locale used, so using the system locale the choose the format string might in some cases not even be adequate. You might consider using some of the more general `toLocale*` methods of the `Date` object or doing your own custom localization of the date to be displayed using some of the `get*` methods of the `Date` object instead of using this method.

 This method returns a string such as "Wednesday, October 3, 2007". Note that the format string in this example is not properly localized, which will result in the problems described above.

 #### Example: Using `toLocaleFormat()`

 	var today = new Date();
 	var date = today.toLocaleFormat("%A,%B %e, %Y"); // Bad example for localization


 #### See Also

 * [[Date.toLocaleString `toLocaleString()`]]
 * [[Date.toLocaleDateString `toLocaleDateString()`]]
 * [[Date.toLocaleTimeString `toLocaleTimeString()`]]
 


 	Converts a date to a string, using the operating system's locale's conventions.

 The `toLocaleString` method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04/15/98), whereas in Germany the date appears before the month (15.04.98). If the operating system is not year-2000 compliant and does not use the full year for years before 190, or over 2000, `toLocaleString` returns a string that is not year-2000 compliant. `toLocaleString` behaves similarly to `toString` when converting a year that the operating system does not properly format.

 You shouldn't use this method in contexts where you rely on a particular format or locale.

 	"Last visit: " + someDate.toLocaleString(); // Good example
 	"Last visit was at " + someDate.toLocaleString(); // Bad example

 #### Example: Using `toLocaleString()`

 In the following example, `today` is a `Date` object:

 	var today = new Date(95,11,18,17,28,35); //months are represented by 0 to 11
 	var localDay = today.toLocaleString();

 In this example, `toLocaleString` returns a string value that is similar to the following form: 12/18/99, 17:28:35. The exact format depends on the platform, locale and user's settings.

 #### See Also

 * [[Date.toString `toString()`]]
 * [[Date.toUTCString `toUTCString()`]]
 * [[Date.toLocaleDateString `toLocaleDateString()`]]
 


 The `toSource` method returns the following values:

 * For the built-in `Date` object, `toSource` returns the following string indicating that the source code is not available:

 	function Date() {
    	[native code]
 	}

 * For instances of `Date`, `toSource` returns a string representing the source code.

 This method is usually called internally by Javascript and not explicitly in code.


 #### See Also

 * [[Object.toSource `toSource()`]]
 


	Returns a string representing the specified Date object.


 The [[Date `Date`]] object overrides the `toString` method of the [[Object `Object`]] object; it does not inherit [[Object.toString `Object.toString()`]].

 For `Date` objects, `toString()` always returns a string representation of the date in American English.

 Javascript calls the `toString()` method automatically when a date is to be represented as a text value or when a date is referred to in a string concatenation.


 #### Example: Using `toString()`

 The following assigns the `toString` value of a `Date` object to `myVar`:

 	x = new Date();
 	myVar=x.toString();   //assigns a value to myVar similar to:
 	 	//Mon Sep 2, 199, 14:36:2, GMT-070, (Pacific Daylight Time)


 #### See Also

 * [[Object.toString `Object.toString()`]]
 * [[Date.toDateString `toDateString()`]]
 * [[Date.toTimeString `toTimeString()`]]
 * [[Date.toLocaleString `toLocaleString()`]]
 


 [[Date `Date`]] instances refer to a specific point in time. Calling [[Date.toString `toString()`]] will return the date formatted in a human readable form in American English. Sometimes it is desirable to obtain a string of the time portion; such a thing can be accomplished with the this method.

 The toTimeString method is especially useful because compliant engines implementing [ECMA-262](http://en.wikipedia.org/wiki/ECMAScript) may differ in the string obtained from toString for Date objects, as the format is implementation-dependent; simple string slicing approaches may not produce consistent results across multiple engines.

 #### Example: A basic usage of `toTimeString`

 	var d = new Date(1993, 6, 28, 14, 39, 7);
 	console.log(d.toString()); // prints Wed Jul 2, 199, 14:39:0, GMT-060, (PDT)
 	console.log(d.toTimeString()); // prints 14:39:0, GMT-060, (PDT)


 #### See Also

 * [[Date.toLocaleTimeString `toLocaleTimeString()`]]
 * [[Date.toDateString `toDateString()`]]
 * [[Date.toString `toString()`]]

 


 The `valueOf` method returns the primitive value of a `Date` object as a number data type, the number of milliseconds since midnight 01 January, 1970 UTC.

 This method is usually called internally by Javascript and not explicitly in code.

 ####  Example: Using `valueOf()`

 	var d = new Date(56, 6, 17);
 	var myVar = d.valueOf(); // assigns -424713600000 to myVar

 #### Returns

 Returns the primitive value of a Date object.

 ####  See also

 * [[Object.valueOf `Object.valueOf()`]]
 
Compiling file src/latest/js_doc/Function.js


 Every function in Javascript is actually a `Function` object. Yes, it's true. Thus, all the following methods can be called on any function.

 

 - argN (Object): Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid Javascript identifier or a list of such strings separated with a comma; for example "x", "theValue", or "a,b".
 - functionBody (String): A string containing the Javascript statements comprising the function definition.

 Function objects created with the Function constructor are parsed when the function is created. This is less efficient than declaring a function and calling it within your code, because functions declared with the function statement are parsed with the rest of the code.

 All arguments passed to the function are treated as the names of the identifiers of the parameters in the function to be created, in the order in which they are passed.

 Invoking the Function constructor as a function (without using the new operator) has the same effect as invoking it as a constructor.

 #### Example: Specifying arguments with the `Function` constructor

  The following code creates a `Function` object that takes two arguments.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Function/function.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 The arguments "`a`" and "`b`" are formal argument names that are used in the function body, "`return a + b`".
 


 Returns the function that invoked the specified function.

 If the function `f` was invoked by the top level code, the value of `caller()` is `null`, otherwise it's the function that called `f`

 This property replaces the deprecated `arguments.caller`.

 #### Notes

  In case of recursion, you can't reconstruct the call stack using this property. Consider:

  	function f(n) { g(n-1) }
  	function g(n) { if(n>0) f(n); else stop() }
  	f(2)

  At the moment `stop()` is called, the call stack is:

  	f(2) -> g(1) -> f(1) -> g(0) -> stop()

  The following is true:

  	stop.caller === g && f.caller === g && g.caller === f

  So if you tried to get the stack trace in the `stop()` function like this:

  	var f = stop;
  	var stack = "Stack trace:";
  	while (f) {
    	stack += "\n" + f.name;
    	f = f.caller;
  	}

  This loop would never stop.

  The special property `__caller__`, which returned the activation object of the caller thus allowing to reconstruct the stack, was removed for security reasons.

 #### Example: Checking the value of a function's `caller` property

     function myFunc() {
        if (myFunc.caller == null) {
           return ("The function was called from the top!");
        } else
           return ("This function's caller was " + myFunc.caller);
     }
 
 


 Returns a reference to the [[Function `Function`]] function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.

 For more information, see [[Object.constructor `Object.constructor`]].

 


 `length` is a property of a function object, and indicates how many arguments the function expects, i.e. the number of formal parameters. By contrast, [`arguments.length`](https://developer.mozilla.org/en/Javascript/Reference/Functions_and_function_scope/arguments/length) is local to a function and provides the number of arguments actually passed to the function.

 #### Example

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Function/function.length.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>
  
 


 The `name` property returns the name of a function, or an empty string for anonymous functions:

 	function doSomething() {}
 	alert(doSomething.name); // alerts "doSomething"

 Functions created with the syntax `new Function` or just `Function(...)` have their name property set to "anonymous" on Firefox and Safari, or to an empty string on Chrome and Opera. This property is not supported on Internet Explorer.

 Note that in these examples anonymous functions are created, so `name` returns an empty string:

 	var f = function() { };

 	var object = {

 		someMethod: function() {}

 	};

 	console.log(f.name == ""); // true
 	console.log(object.someMethod.name == ""); // also true


 You can define a function with a name in a [function expression](https://developer.mozilla.org/En/Core_Javascript_1.5_Reference/Functions#Function_constructor_vs._function_declaration_vs._function_expression "En/Core_Javascript_1.5_Reference/Functions#Function_constructor_vs._function_declaration_vs._function_expression"):

 	var object = {

 		someMethod: function object_someMethod() {}

 	};

 	console.log(object.someMethod.name); // prints "object_someMethod"

 	try { object_someMethod } catch(e) { alert(e); }

 	// ReferenceError: object_someMethod is not defined


 #### Example

  You can use `obj.constructor.name` to check the "class" of an object:

  	function a()
  	{
  	}

  	var b = new a();
  	console.log(b.constructor.name); // Prints "a"
  
 

 - thisArg (Object): The value of this provided for the call to fun.  Note that this may not be the actual value seen by the method: if the method is a function in non-strict mode code, null and undefined will be replaced with the global object, and primitive values will be boxed.
 - argsArray (Object): An array like object, specifying the arguments with which fun should be called, or `null` or `undefined` if no arguments should be provided to the function.

 Calls a function with a given `this` value and `arguments` provided as an array.

 You can assign a different `this` object when calling an existing function. `this` refers to the current object, the calling object. With `apply`, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.

 `apply` is very similar to [[Function.call `call()`]], except for the type of arguments it supports. You can use an arguments array instead of a named set of parameters. With `apply`, you can use an array literal, for example, `_fun_.apply(this, ['eat', 'bananas'])`, or an `Array` object, for example, `_fun_.apply(this, new Array('eat', 'bananas'))`.

 You can also use [`arguments`](https://developer.mozilla.org/en/Javascript/Reference/Functions_and_function_scope/arguments "En/Core_Javascript_1.5_Reference/Functions_and_function_scope/arguments") for the `argsArray` parameter. `arguments` is a local variable of a function. It can be used for all unspecified arguments of the called object. Thus, you don't have to know the arguments of the called object when you use the `apply` method. You can use `arguments` to pass all the arguments to the called object. The called object is then responsible for handling the arguments.

 Since ECMAScript 5th Edition you can also use any kind of object which is array like, so in practice this means it's going to have a property `length` and integer properties in the range `[0...length)`. As an example you can now use a [`NodeList`](https://developer.mozilla.org/En/DOM/NodeList "en/DOM/NodeList") or a own custom object like `{'length': 2, '0': 'eat', '1':'bananas'}`.

 <Note>Most browsers, including Chrome 14 and Internet Explorer 9, still don't accept array like objects and will throw an exception.</Note>


 #### Example: Using `apply` to chain constructors

  You can use `apply` to chain constructors for an object, similar to Java. In the following example, the constructor for the `Product` object is defined with two parameters, `name` and `value`. Two other functions `Food` and `Toy` invoke `Product` passing `this` and `arguments`. Product initializes the properties name and price, both specialized functions define the category. In this example, the `arguments` object is fully passed to the product constructor and corresponds to the two defined parameters.

 	function Product(name, price) {
 		this.name = name;
 		this.price = price;

 	if (price < 0)
      throw RangeError('Cannot create product "' + name + '" with a negative price');
      return this;
 	}

 	function Food(name, price) {
 		Product.apply(this, arguments);
 		this.category = 'food';
 	}

 	Food.prototype = new Product();

 	function Toy(name, price) {
 		Product.apply(this, arguments);
 		this.category = 'toy';
 	}

 	Toy.prototype = new Product();

 	var cheese = new Food('feta', 5);
 	var fun = new Toy('robot', 40);

  #### Example: `apply()` and built-in functions

  Clever usage of `apply` allows you to use built-ins functions for some tasks that otherwise probably would have been written by looping over the array values. As an example here we are going to use Math.max/Math.min to find out the maximum/minimum value in an array.

 	// min/max number in an array
 	var numbers = [5, 6, 2, 3, 7];

 	// using Math.min/Math.max apply
 	var max = Math.max.apply(null, numbers); // Equivalent to Math.max(numbers[0], ...) or Math.max(5, 6, ..)
 	var min = Math.min.apply(null, numbers);

 	// versus a simple loop based algorithm:
 	max = -Infinity, min = +Infinity;

 	for (var i = 0; i < numbers.length; i++) {
 		if (numbers[i] > max)
 			max = numbers[i];
 		if (numbers[i] < min)
 			min = numbers[i];
 	}

  But beware: in using `apply` this way, as you run the risk of exceeding the Javascript engine's argument length limit. The consequences of applying a function with too many arguments (think more than tens of thousands of arguments) vary across engines, because the limit (indeed even the nature of any excessively-large-stack behavior) is unspecified. Some engines will throw an exception. More perniciously, others will arbitrarily limit the number of arguments actually passed to the applied function. (To illustrate this latter case: if such an engine had a limit of four arguments [actual limits are of course significantly higher], it would be as if the arguments `5, 6, 2, 3` had been passed to `apply` in the examples above, rather than the full array.) If your value array might grow into the tens of thousands, use a hybrid strategy: apply your function to chunks of the array at a time:

 	function minOfArray(arr)
 	{
 		var min = Infinity;
 		var QUANTUM = 32768;
 		for (var i = 0, len = arr.length; i < len; i += QUANTUM)
 		{
 			var submin = Math.min.apply(null, numbers.slice(i, Math.min(i + QUANTUM, len)));
 			min = Math.min(submin, min);
 		}
 		return min;
 	}

 	var min = minOfArray([5, 6, 2, 3, 7]);

 #### See Also

 * [[Function.call `call()`]]
 * [[Function.bind `bind()`]]

 

 - thisArg (Object): The value of this provided for the call to this function.  Note that this may not be the actual value seen by the method: if the method is a function in non-strict mode code, null and undefined will be replaced with the global object, and primitive values will be boxed.
 - argN (Object): Arguments for the object.

 Calls a function with a given `this` value and arguments provided individually.

 <Note>While the syntax of this function is almost identical to that of [[Function.apply `Function.apply()`]], the fundamental difference is that `call()` accepts an argument list, while `apply()` accepts a single array of arguments.</Note>

 You can assign a different `this` object when calling an existing function. `this` refers to the current object, the calling object.

 With `call`, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.

 Example: Using `call` to chain constructors for an object
  You can use `call` to chain constructors for an object, similar to Java.In the following example, the constructor for the `Product` object is defined with two parameters, `name` and `value`. Two other functions `Food` and `Toy` invoke `Product` passing `this` and `name` and `value`. Product initializes the properties name and price, both specialized functions define the category.

 	function Product(name, price) {
 	   this.name = name;
 	   this.price = price;

 	   if (price < 0)
 	     throw RangeError('Cannot create product "' + name + '" with a negative price');
 	   return this;
 	 }

 	 function Food(name, price) {
 	   Product.call(this, name, price);
 	   this.category = 'food';
 	 }
 	 Food.prototype = new Product();

 	 function Toy(name, price) {
 	   Product.call(this, name, price);
 	   this.category = 'toy';
 	 }
 	 Toy.prototype = new Product();

 	 var cheese = new Food('feta', 5);
 	 var fun = new Toy('robot', 40);

  #### Example: Using `call` to invoke an anonymous function

  In this purely constructed example, we create anonymous function and use `call` to invoke it on every object in an array. The main purpose of the anonymous function here is to add a print function to every object, which is able to print the right index of the object in the array. Passing the object as `this` value was not strictly necessary, but is done for explanatory purpose.

 	var animals = [
 	   {species: 'Lion', name: 'King'},
 	   {species: 'Whale', name: 'Fail'}
 	 ];

 	 for (var i = 0; i < animals.length; i++) {
 	   (function (i) {
 	     this.print = function () {
 	       console.log('#' + i  + ' ' + this.species + ': ' + this.name);
 	     }
 	   }).call(animals[i], i);
 	 }


 


 Returns a string representing the source code for the function.

 The `toSource` method returns the following values:

 * For the built-in `Function` object, `toSource` returns the following string indicating that the source code is not available:

 	function Function() {
    [native code]
 	}

 * For custom functions, `toSource` returns the Javascript source that defines the object as a string.


 This method is usually called internally by Javascript and not explicitly in code. You can call `toSource` while debugging to examine the contents of an object.

 
 

 - indentation (Number): The amount of spaces to indent the string representation of the source code. If indentation is less than or equal to -1, most unnecessary spaces are removed.

 Returns a string representing the source code of the function.


 The `[Function]` object overrides the [[Object.toString `Object.toString()`]] method inherited from `Object`; it does not inherit `Object.prototype.toString`. For `Function` objects, the `toString` method returns a string representation of the object in the form of a function declaration. That is, `toString()` decompiles the function, and the string returned includes the `function` keyword, the argument list, curly braces, and the source of the function body.

 Javascript calls the `toString` method automatically when a `Function` is to be represented as a text value, e.g. when a function is concatenated with a string.

 


 An array-like object corresponding to the arguments passed to a function.

 In the case of recursion, i.e. if the function appears several times on the call stack, the value of `f.arguments` represents the arguments corresponding to the most recent invocation of the function.

 #### Example

 	function f(n) { g(n-1) }
 	function g(n) {
 		print("before: " + g.arguments[0]);
 		if(n>0)
 			f(n);
 		print("after: " + g.arguments[0]);
 	}

 Calling `f(2)` outputs:

	before: 1
 	before: 0
 	after: 0
 	after: 1
  
 


 Specifies the number of arguments expected by the function.

 The `arity` property no longer exists and has been replaced by the [[Function.length `length`]] property.

 

 - thisArg (Object): The value to be passed as the this parameter to the target function when the bound function is called. The value is ignored if the bound function is constructed using the new operator.
 - argN (Object): Arguments to prepend to arguments provided to the bound function when invoking the target function.

 The `bind` function creates a new function (a _bound function_) with the same function body (internal [Call](https://developer.mozilla.org/Call "Call") attribute in ECMAScript 5 terms) as the function it is being called on (the bound function's _target function_) with the `this` value bound to the first argument of `bind`, which can't be overridden. `bind` also accepts leading default arguments to provide to the target function when the bound function is called. A bound function may also be constructed using the `new` operator: doing so acts as though the target function had instead been constructed.  The provided `this` value is ignored, while prepended arguments are provided to the emulated function.

  Some of the many differences (there may well be others, as this list does not seriously attempt to be exhaustive) between this algorithm and the specified algorithm are:
 * The partial implementation relies [[Array.slice `Array.slice()`]], [[Array.concat `Array.concat()`]], [[Function.call `call()`]], and [[Function.apply `apply()`]], built-in methods to have their original values.
 * The partial implementation creates functions that don't have immutable "poison pill" `caller` and `arguments` properties that throw a `TypeError` upon get, set, or deletion. (This could be added if the implementation supports [[Object.defineProperty `Object.defineProperty()`]], or partially implemented (without throw-on-delete behavior) if the implementation supports the `Object.__defineGetter__` and `Object.__defineSetter__` extensions.)
 * The partial implementation creates functions that have a `prototype` property. (Proper bound functions have none.)
 * The partial implementation creates bound functions whose `length` property does not agree with that mandated by ECMA-262: it creates functions with length 0, while a full implementation, depending on the length of the target function and the number of pre-specified arguments, may return a non-zero length.

  If you choose to use this partial implementation, *you must not rely on those cases where behavior deviates from ECMA-262, 5th edition!* With some care, however (and perhaps with additional modification to suit specific needs), this partial implementation may be a reasonable bridge to the time when `bind` is widely implemented according to the specification.

 #### Example: Creating a bound function

  The simplest use of `bind` is to make a function that, no matter how it is called, is called with a particular `this` value. A common mistake for new Javascript programmers is to extract a method from an object, then to later call that function and expect it to use the original object as its `this` (e.g. by using that method in callback-based code).  Without special care, however, the original object is usually lost.  Creating a bound function from the function, using the original object, neatly solves this problem:

 		var x = 9;
  	var module = {
  		x: 81,
  		getX: function() { return this.x; }
 		};

 		module.getX(); // 81

 		var getX = module.getX;
 		getX(); // 9, because in this case, "this" refers to the global object

 		// create a new function with 'this' bound to module
 		var boundGetX = getX.bind(module);
 		boundGetX(); // 81

  #### Example: Currying

  The next simplest use of `bind` is to make a function with pre-specified initial arguments. These arguments (if any) follow the provided `this` value and are then inserted at the start of the arguments passed to the target function, followed by the arguments passed to the bound function, whenever the bound function is called.

 		function list() {
 			return Array.prototype.slice.call(arguments);
 		}

 		var list1 = list(1, 2, 3); // [1, 2, 3]

 		//  Create a function with a preset leading argument
 		var leadingZeroList = list.bind(undefined, 37);

 		var list2 = leadingZeroList(); // [37]
 		var list3 = leadingZeroList(1, 2, 3); // [37, 1, 2, 3]

  #### Example: Bound functions used as constructors

  Bound functions are automatically suitable for use with the `new` operator to construct new instances created by the target function. When a bound function is used to construct a value, the provided `this` is ignored. However, provided arguments are still prepended to the constructor call:

 		function Point(x, y) {
 		this.x = x;
 		this.y = y;
 		}

 		Point.prototype.toString = function() {
 			return this.x + "," + this.y;
 		};

 		var p = new Point(1, 2);
 		p.toString(); // "1,2"


 		var emptyObj = {};
 		var YAxisPoint = Point.bind(emptyObj, 0 /* x */);

 		var axisPoint = new YAxisPoint(5);
 		axisPoint.toString(); //  "0,5"

 		axisPoint instanceof Point; // true
 		axisPoint instanceof YAxisPoint; // true
 		new Point(17, 42) instanceof YAxisPoint; // false with native bind // true, when using the above polyfill

  Note that you need don'thing special to create a bound function for use with `new`. The corollary is that you need don'thing special to create a bound function to be called plainly, even if you would rather require the bound function to only be called using `new`. If you wish to support use of a bound function only using `new`, or only by calling it, the target function must enforce that restriction.

 		// Example can be run directly in your Javascript console
 		// ...continuing from above

 		// Can still be called as a normal function (although usually this is undesired)
 		YAxisPoint(13);

 		emptyObj.x + "," + emptyObj.y;
 		// >  "0,13"

  #### Example: Creating Shortcuts
  `bind` is also helpful in cases where you want to create a shortcut to a function which requires a specific `this` value. Take [[Array.slice `Array.slice()`]], for example, which you want to use for converting an array-like object to a real array. You could create a shortcut like this:

 		var slice = Array.prototype.slice;

  	// ...

 		slice.call(arguments);

 With `bind`, this can be simplified to the following. `slice` will be a bound function to the `call()` function of `Function`, with the `this `value set to the `slice()` function of `Array`. This means that additional `.call` calls can be eliminated:

 		var slice = Function.prototype.call.bind(Array.prototype.slice);

  	// ...

  	slice(arguments);

 #### Supplemental

  One interesting wrinkle of bound functions working "as expected" with the `new` operator is that it is now possible to implement what one might call `construct()`, an analog to [[Function.apply `apply()`]] that takes an array of values as its sole argument,constructing this function with the provided arguments using the `new` operator:

 	// Function.prototype.construct will work with the Function.prototype.bind defined above

 	if (!Function.prototype.construct) {
 		Function.prototype.construct = function(aArgs) {

 		if (aArgs.constructor !== Array)
 			throw new TypeError("second argument to Function.prototype.construct must be an array");

 			var aBoundArgs = Array.prototype.concat.apply([null], aArgs),
 			fBound = this.bind.apply(this, aBoundArgs);

 		return new fBound();

 		};
	}

 	// Now consider the string "2011-7-16 19:35:46". Without an analog of the Function.apply method for constructors,
 	// you would run a lot of steps in order to construct a Date object from it:

 	 var aDateArgs = "2011-7-16 19:35:46".split(/[- :]/),
 	     oMyDate1 = new Date(aDateArgs[0], aDateArgs[1], aDateArgs[2], aDateArgs[3], aDateArgs[4], aDateArgs[5]);
 	 alert(oMyDate1.toLocaleString());


 	 // With the Function.construct method we could do the same thing with a single step:
 	 var oMyDate2 = Date.construct("2011-7-16 19:35:46".split(/[- :]/));
 	 alert(oMyDate2.toLocaleString());

 	 // Here is another example:

 	 function Point(x, y) {
 	   this.x = x;
 	   this.y = y;
 	 }

 	 Point.prototype.toString = function() {
 	   return this.x + "," + this.y;
 	 };

 	 alert(Point.construct([2, 4]).toString()); // "2,4"

  But note well: the efficiency of constructing a new function every time you wish to construct an object by invoking a bound function via `new` with a variable number of arguments is questionable. Your code will be faster and more efficient if you use `Function.apply()` instead, with normal call syntax rather than using `new` operator-based syntax.

 #### See Also
 * [[Function.apply `apply()`]]
 * [[Function.call `call()`]]

 
Compiling file src/latest/js_doc/index.js


 Javascript&reg; (sometimes shortened to JS) is a lightweight, object-oriented language, most known as the scripting language for web pages, but used in many non-browser environments as well. For more information on the constructs of the language, see [this article](https://developer.mozilla.org/en/Javascript/About_Javascript).

 This section is dedicated to the Javascript language itself&mdash;the parts that are not specific to Web pages or other host environments.

 The content here has been forked from the Mozilla Developer Network, with some additional editing.

 
Compiling file src/latest/js_doc/Infinity.js


 Infinity is a property of the global object, i.e. it is a variable in global scope.

 The initial value of Infinity is [[Number.POSITIVE_INFINITY `POSITIVEINFINITY`]]. The value Infinity (positive infinity) is greater than any other number including itself. This value behaves mathematically like infinity; for example, anything multiplied by Infinity is Infinity, and anything divided by Infinity is 0.

 
Compiling file src/latest/js_doc/JSON.js


 The JSON object contains methods for parsing JSON and converting values to JSON. It can't be called or constructed, and aside from its two method properties it has no interesting functionality of its own.

 #### JSON Notation

 [JSON](www.json.org) is a syntax for serializing objects, arrays, numbers, strings, booleans, and null.  It is based upon Javascript syntax but is distinct from it: some Javascript is not JSON, and some JSON is not Javascript.

 The main differences between standard object and array literal notation and JSON notation are that all property names in a JSON object must be double-quoted strings and that trailing commas in objects and arrays are forbidden.  The main differences between standard number notation and JSON number notation are that in JSON leading zeroes are prohibited and the decimal point in a number must be followed by at least one digit.  The main differences between standard string notation and JSON string notation are that in JSON only a limited set of characters may be escaped in strings, certain control characters are prohibited in strings, the Unicode line separator (U+2028) and paragraph separator (U+2029) characters are permitted, and that strings must be double-quoted.

 The full JSON syntax is as follows:

 	JSON = null
       or true or false
       or JSONNumber
       or JSONString
       or JSONObject
       or JSONArray

 	JSONNumber = - PositiveNumber
             or PositiveNumber
 	PositiveNumber = DecimalNumber
                 or DecimalNumber . Digits
                 or DecimalNumber . Digits ExponentPart
                 or DecimalNumber ExponentPart
 	DecimalNumber = 0
                or OneToNine Digits
 	ExponentPart = e Exponent
               or E Exponent
 	Exponent = Digits
           or + Digits
           or - Digits
 	Digits = Digit
         or Digits Digit
 	Digit = 0 through 9
 	OneToNine = 1 through 9

 	JSONString = ""
             or " StringCharacters "
 	StringCharacters = StringCharacter
                   or StringCharacters StringCharacter
 	StringCharacter = any character
                     except \" or \ or U+0000 through U+001F
                  or EscapeSequence
 	EscapeSequence = \" or \/ or \\ or \b or \f or \n or \r or \t
                 or \u HexDigit HexDigit HexDigit HexDigit
 	HexDigit = 0 through 9
           or A through F
           or a through f

 	JSONObject = { }
             or { Members }
 	Members = JSONString : JSON
          or Members , JSONString : JSON

 	JSONArray = [ ]
            or [ ArrayElements ]
 	ArrayElements = JSON
                or ArrayElements , JSON

 Insignificant whitespace may be present anywhere except within a JSONNumber (numbers must contain no whitespace) or JSONString (where it is interpreted as the corresponding character in the string, or would cause an error). The tab character (U+0009), carriage return (U+000D), line feed (U+000A), and space (U+0020) characters are the only valid whitespace characters.

 

 - text (String): The string to parse as JSON. See the JSON object for a description of JSON syntax.
 - reviver (String): If a function, prescribes how the value originally produced by parsing is transformed, before being returned.

 Parse a string as JSON, optionally transforming the value produced by parsing.

 If a `reviver` is specified, the value computed by parsing is _transformed_ before being returned. Specifically, the computed value, and all its properties (beginning with the most nested properties and proceeding to the original value itself), are individually run through the reviver, which is called with the object containing the property being processed as `this` and with the property name as a string and the property value as arguments. If the reviver function returns `undefined`(or returns no value, e.g. if execution falls off the end of the function), the property is deleted from the object. Otherwise the property is redefined to be the return value.

 The reviver is ultimately called with the empty string and the topmost value to permit transformation of the topmost value.  Be certain to handle this case properly, usually by returning the provided value, or `JSON.parse` will return `undefined`:

 	var transformed =
 	JSON.parse('{ "p ": 5}', function(k, v) { if (k ===  " ") return v; return v * 2\. });

 	// transformed is { p: 1\. }

 #### Example

 	JSON.parse('{}'); // {}

 	JSON.parse('true'); // true

 	JSON.parse(' "foo "'); //  "foo "

 	JSON.parse('[1\. 5\.  "false "]'); // [1\. 5\.  "false "]

 	JSON.parse('null'); // null</pre>

 

 - value (String): The value to convert to a JSON string.
 - replacer (Function | Array): If a function, transforms values and properties encountered while stringifying; if an array, specifies the set of properties included in objects in the final string.
 - space (String): Causes the resulting string to be pretty-printed.

 Convert a value to JSON, optionally replacing values if a replacer function is specified, or optionally including only the specified properties if a replacer array is specified.

 Properties of non-array objects are not guaranteed to be stringified in any particular order. Don't rely on ordering of properties within the same object within the stringification.

 [[Boolean `Boolean`]], [[Number `Number`]], and [[String `String`]] objects are converted to the corresponding primitive values during stringification, in accord with the traditional conversion semantics.

 If `undefined`, a function, or an XML value is encountered during conversion it is either omitted (when it is found in an object) or censored to `null` (when it is found in an array).


 #### The `replacer` parameter

 The replacer parameter can be either a function or an array. As a function, it takes two parameters, the key and the value being stringified. Initially it gets called with an empty key representing the object being stringified, and it then gets called for each property on the object or array being stringified. It should return the value that should be added to the JSON string, as follows:

 * If you return a [[Number `Number`]], the string corresponding to that number is used as the value for the property when added to the JSON string.
 * If you return a [[String `String`]], that string is used as the property's value when adding it to the JSON string.
 * If you return a [[Boolean `Boolean]], `true` or `false` is used as the property's value, as appropriate, when adding it to the JSON string.
 * If you return any other object, the object is recursively stringified into the JSON string, calling the replacer function on each property, unless the object is a function, in which case nothing is added to the JSON string.
 * If you return `undefined`, the property is not included in the output JSON string.

 <Note>You can't use the replacer function to remove values from an array. If you return undefined or a function then null is used instead.</Note>

 #### `space` argument

 The space argument may be used to control spacing in the final string. If it is a number, successive levels in the stringification will each be indented by this many space characters (up to 10). If it is a string, successive levels will indented by this string (or the first ten characters of it).

 	JSON.stringify({ a: 2 }, null,  "  ");   // '{\n  "a ": 2\n}'

 Using a tab character mimics standard pretty-print appearance:

 	JSON.stringify({ uno: 1\. dos : 2 }, null, '\t')

 	// returns the string:
 	// '{            \
 	//      "uno ": 1\. \
 	//      "dos ": 2\. \
 	// }'

 #### toJSON behavior

 If an object being stringified has a property named `toJSON` whose value is a function, then the `toJSON` method customizes JSON stringification behavior: instead of the object being serialized, the value returned by the `toJSON` method when called will be serialized. For example:

 	var x = {
 		foo: 'foo',
 		toJSON: function () {
 			return 'bar';
 		}
 	};

 	var json = JSON.stringify({x: x});

 #### Example

 	assert(JSON.stringify({}) === '{}');
 	assert(JSON.stringify(true) === 'true');
 	assert(JSON.stringify("foo") === '"foo"');
 	assert(JSON.stringify([1, "false", false]) === '[1,"false",false]');
 	assert(JSON.stringify({ x: 5 }) === '{"x":5}');
 	JSON.stringify({x: 5, y: 6}); // '{"x":5,"y":6}' or '{"y":6,"x":5}'


 	 function censor(key, value) {
 	  if (typeof(value) == "string") {
 	    return undefined;
 	  }
 	  return value;
 	}

 	var foo = {foundation: "Mozilla", model: "box", week: 45, transport: "car", month: 7};
 	var jsonString = JSON.stringify(foo, censor); // {"week":45,"month":7}

 
Compiling file src/latest/js_doc/Math.js


 A built-in object that has properties and methods for mathematical constants and functions.

 Unlike the other global objects, `Math` is not a constructor. All properties and methods of `Math` are static. You refer to the constant pi as `Math.PI` and you call the sine function as `Math.sin(x)`, where x is the method's argument. Constants are defined with the full precision of real numbers in Javascript.
 


 The natural logarithm of 2.

 #### Example: Using `Math.LN2`

 The following function returns the natural log of 2:

 	function getNatLog2() {
 		return Math.LN2
 	}

 


 The base of natural logarithms, e.

  #### Example: Using `Math.E`

  The following function returns e:
     function getNapier() {
        return Math.E
     }

 


 The natural logarithm of 10.

  #### Example: Using `Math.LN10`

  The following function returns the natural log of 10:
     function getNatLog10() {
        return Math.LN10;
     }

 


 The base 2 logarithm of `E`.

  #### Example: Using `Math.LOG2E`

  The following function returns the base 2 logarithm of `E`:

 	function getLog2e() {
 		return Math.LOG2E;
 	}

 


 The base 10 logarithm of `E`.

 #### Example: Using `Math.LOG10E`

 The following function returns the base 10 logarithm of `E`:

 	function getLog10e() {
 		return Math.LOG10E;
 	}

 


 The ratio of the circumference of a circle to its diameter.

 #### Example: Using `Math.PI`

 The following function returns the value of pi:

 	function getPi() {
 		return Math.PI;
 	}

 


 The square root of 1/2; equivalently, 1 over the square root of 2.

 #### Example: Using `Math.SQRT1_2`

 The following function returns 1 over the square root of 2:

 	function getRoot1_2() {
 		return Math.SQRT1_2;
 	}

 


 The square root of 2.

 #### Example: Using `Math.SQRT2`

 The following function returnsthe square root of 2:

 	function getRoot2() {
 		return Math.SQRT2;
 	}

 

 - x (Number): A positive or negative integer

 Returns the absolute value of a number.

 #### Example: `Math.abs` behavior

 Passing a non-numeric string or undefined/empty variable returns NaN. Passing null returns 0.

 	Math.abs('-1');     // 1
 	Math.abs(-2);       // 2
 	Math.abs(null);     // 0
 	Math.abs("string"); // NaN
 	Math.abs();

 

 - x (Number): A number

 This method returns a numeric value between 0 and pi radians for x between -1 and 1\. If the value of `number` is outside this range, it returns `NaN`.

 #### Example: Using `Math.acos`

 The following function returns the arccosine of the variable `x`:

     function getAcos(x) {
        return Math.acos(x)
     }

 If you pass -1 to `getAcos`, it returns 3.141592653589793; if you pass 2, it returns `NaN` because 2 is out of range.

 #### See Also

 * [[Math.asin `asin()`]]
 * [[Math.atan `atan()`]]
 * [[Math.atan2 `atan2()`]]
 * [[Math.cos `cos()`]]
 * [[Math.sin `sin()`]]
 * [[Math.tan `tan()`]]

 

 - x (Number): A number

 The `asin` method returns a numeric value between -pi/2 and pi/2 radians for x between -1 and 1. If the value of `number` is outside this range, it returns `NaN`.


 #### Example: Using `Math.asin`

 The following function returns the arcsine of the variable `x`:

     function getAsin(x) {
        return Math.asin(x)
     }

 If you pass `getAsin` the value 1, it returns 1.570796326794897 (pi/2); if you pass it the value 2, it returns `NaN` because 2 is out of range.

 #### See Also

 * [[Math.acos `acos()`]]
 * [[Math.atan `atan()`]]
 * [[Math.atan2 `atan2()`]]
 * [[Math.cos `cos()`]]
 * [[Math.sin `sin()`]]
 * [[Math.tan `tan()`]]

 

 - x (Number): A number

 The `atan` method returns a numeric value between -pi/2 and pi/2 radians.

 #### Example: Using `Math.atan`

 The following function returns the arctangent of the variable `x`:

     function getAtan(x) {
        return Math.atan(x)
     }

 If you pass `getAtan` the value 1, it returns 0.7853981633974483; if you pass it the value .5, it returns 0.4636476090008061.

 #### See Also
 * [[Math.acos `acos()`]]
 * [[Math.asin `asin()`]]
 * [[Math.atan2 `atan2()`]]
 * [[Math.cos `cos()`]]
 * [[Math.sin `sin()`]]
 * [[Math.tan `tan()`]]

 

 - x (Number): A number
 - y (Number): A number

 The `atan2()` method returns a numeric value between -pi and pi representing the angle theta of an (x,y) point. This is the counterclockwise angle, measured in radians, between the positive X axis, and the point (`x,y`). Note that the arguments to this function pass the y-coordinate first and the x-coordinate second.

 `atan2` is passed separate `x` and `y` arguments, and `atan` is passed the ratio of those two arguments.

 #### Example: Using `Math.atan2`

 The following function returns the angle of the polar coordinate:

     function getAtan2(y,x) {
        return Math.atan2(y,x)
     }

 If you pass `getAtan2` the values (90,15), it returns 1.4056476493802699; if you pass it the values (15,90), it returns 0.16514867741462683. In addition:

 * `Math.atan2( ±0, -0 )` returns `±PI`.<br/>
 * `Math.atan2( ±0, +0 )` returns `±0`.<br/>
 * `Math.atan2( ±0, -x )` returns `±PI` for x &lt; 0.<br/>
 * `Math.atan2( ±0, x )` returns `±0` for x &gt; 0.<br/>
 * `Math.atan2( y, ±0 )` returns `-PI/2` for y &gt; 0.<br/>
 * `Math.atan2( ±y, -Infinity )` returns `±PI` for finite y &gt; 0.<br/>
 * `Math.atan2( ±y, +Infinity )` returns `±0` for finite y &gt; 0.<br/>
 * `Math.atan2( ±Infinity, +x )` returns `±PI/2` for finite x.<br/>
 * `Math.atan2( ±Infinity, -Infinity )` returns `±3*PI/4`.<br/>
 * `Math.atan2( ±Infinity, +Infinity )` returns `±PI/4`.

 #### See Also
 * [[Math.acos `acos()`]]
 * [[Math.asin `asin()`]]
 * [[Math.atan `atan()`]]
 * [[Math.cos `cos()`]]
 * [[Math.sin `sin()`]]
 * [[Math.tan `tan()`]]

 

 - x (Number): A number

 Returns the smallest integer greater than or equal to a number.


 #### Example: Using `Math.ceil`

 The following function returns the ceil value of the variable `x`:

     function getCeil(x) {
        return Math.ceil(x)
     }

 If you pass 45.95 to `getCeil`, it returns 46; if you pass -45.95, it returns -45.

 #### See Also
 * [[Math.floor `floor()`]]
 * [[Math.round `round()`]]
 

 - x (Number): A number

 The `cos` method returns a numeric value between -1 and 1\. which represents the cosine of the angle.


 #### Example: Using `Math.cos`

 The following function returns the cosine of the variable `x`:

     function getCos(x) {
        return Math.cos(x)
     }

 If `x` equals 2*`Math.PI`, `getCos` returns 1; if `x` equals `Math.PI`, the `getCos` method returns -1.

 #### See Also
 * [[Math.acos `acos()`]]
 * [[Math.asin `asin()`]]
 * [[Math.atan `atan()`]]
 * [[Math.atan2 `atan2()`]]
 * [[Math.sin `sin()`]]
 * [[Math.tan `tan()`]]

 

 - x (Number): A number

 Returns the largest integer less than or equal to a number.

 #### Example: Using `Math.floor`

 The following function returns the floor value of the variable `x`:

     function getFloor(x) {
        return Math.floor(x)
     }

 If you pass 45.95 to `getFloor`, it returns 45; if you pass -45.95, it returns -46.

 #### See Also
 * [[Math.ceil `ceil()`]]
 * [[Math.round `round()`]]

 

 - x (Number): A number

 Returns the natural logarithm (base `E`) of a number. If the value of `x` is negative, the return value is always `NaN`.

 

Because `log` is a static method of `Math`, you always use it as `Math.log()`, rather than as a method of a `Math` object you created.

 #### Example: Using `Math.log`

 The following function returns the natural log of the variable `x`:

     function getLog(x) {
        return Math.log(x)
     }

 If you pass `getLog` the value 10, it returns 2.302585092994046; if you pass it the value 0, it returns `-Infinity`; if you pass it the value -1, it returns `NaN` because -1 is out of range.

 #### See Also
 * [[Math.exp `exp()`]]
 * [[Math.pow `pow()`]]

 

 - x (Number): A number

 Returns `E^x`, where `x` is the argument, and `E` is Euler's constant, the base of the natural logarithms.

 #### Example: Using `Math.exp`

 The following function returns the exponential value of the variable `x`:

     function getExp(x) {
        return Math.exp(x)
     }

 If you pass `getExp` the value 1, it returns 2.718281828459045.

 #### See Also
 * [[Math.E `E`]]
 * [[Math.log `log()`]]
 * [[Math.pow `pow()`]]

 

 - valueN (Number): A sequence of numbers

 Returns the largest of zero or more numbers.

 If no arguments are given, the results is [[Infinity `-Infinity`]]

 If at least one of arguments can't be converted to a number, the result is [[NaN `NaN`]].

 #### Example: Using `Math.max`

 `Math.max(10, 20)` returns 20. `Math.max(-10, -20)` returns -10. `Math.max(-10, 20)` returns 20.


 #### Example: Using `Math.max` with an array

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Math/math.max.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 This function uses [[Function.apply `Function.apply()`]] to find the maximum element in a numeric array. `getMaxOfArray([1,2,3])` is equivalent to `Math.max(1, 2, 3)`, but you can use `getMaxOfArray` on programmatically constructed arrays of any size.

 

 - base (Number): The base number.
 - exponents (Number): The exponent to which to raise base.

 Returns `base` to the `exponent` power, that is, `base^exponent`.


 #### Example: Using `Math.pow`

 	Math.pow(7, 2); // returns 49 == 7 to the power of 2


 #### See Also
 * [[Math.exp `exp()`]]
 * [[Math.log `log()`]]

 

 - valueN (Number): A sequence of numbers.

 Returns the smallest of zero or more numbers.

 If no arguments are given, the result is [[Infinity `Infinity`]].

 If at least one of arguments can't be converted to a number, the result is [[NaN `NaN`]].

 #### Example: Using `Math.min`

 This finds the min of x and y and assigns it to z:

 	var x = "10", y = -20;
 	var z = Math.min(x, y); // z == -20

 #### Example: Clipping a value with `Math.min`

 `Math.min` is often used to clip a value so that it is always less than or equal to a boundary. For instance, this:

 	var x = f(foo);
 	if (x > boundary)
 		x = boundary;

 may be written as this:

 	var x = Math.min(f(foo), boundary);
    
 


 Returns a floating-point, pseudo-random number in the range `[0\. 1)` that is, from 0 (inclusive) up to but not including 1 (exclusive), which you can then scale to your desired range.

 The random number generator is seeded from the current time, as in Java.


 #### Example: Using `Math.random`

 Note that as numbers in Javascript are IEEE 754 floating point numbers with round-to-nearest-even behavior, these ranges, excluding the one for `Math.random()` itself, aren't exact, and depending on the bounds it's possible in extremely rare cases (on the order of 1 in 2<sup>62</sup>) to calculate the usually-excluded upper bound.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Math/math.random.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 

 - x (Number): A number.

 The `sin` method returns a numeric value between -1 and 1, which represents the sine of the argument.


 #### Example: Using `Math.sin`

 The following function returns the sine of the variable `x`:

     function getSine(x) {
        return Math.sin(x)
     }

 If you pass `getSine` the value `Math.PI/2`, it returns 1.


 #### See Also
 * [[Math.acos `acos()`]]
 * [[Math.asin `asin()`]]
 * [[Math.atan `atan()`]]
 * [[Math.atan2 `atan2()`]]
 * [[Math.cos `cos()`]]
 * [[Math.tan `tan()`]]

 

 - x (Number): A number.

 Returns the value of a number rounded to the nearest integer.

 If the fractional portion of `number` is .5 or greater, the argument is rounded to the next higher integer. If the fractional portion of `number` is less than .5, the argument is rounded to the next lower integer.


 #### Example: Using `Math.round`

     //Returns the value 20
     var x = Math.round(20.49)

     //Returns the value 21
     x = Math.round(20.5)

     //Returns the value -20
     x = Math.round(-20.5)

     //Returns the value -21
     x = Math.round(-20.51)

 #### See Also
 * [[Math.ceil `Math.ceil()`]]
 
 

 - x (Number): A number.

 Returns the square root of a number. If the value of `number` is negative, `sqrt` returns `NaN`.

 #### Example: Using `Math.sqrt`

 The following function returns the square root of the variable `x`:

     function getRoot(x) {
        return Math.sqrt(x)
     }

 If you pass `getRoot` the value 9, it returns 3; if you pass it the value 2, it returns 1.414213562373095.


 

 - x (Number): A number representing an angle in radians.

 The `tan` method returns a numeric value that represents the tangent of the angle.

 #### Example: Using `Math.tan`

 The following function returns the tangent of the variable `x`:

     function getTan(x) {
        return Math.tan(x)
     }

 Because the `Math.tan()` function accepts radians, but it is often easier to work with degrees, the following function accepts a value in degrees, converts it to radians and returns the tangent.

     function getTanDeg(deg) {
        var rad = deg * Math.PI/180;
        return Math.tan(rad)
     }

 #### See Also
 * [[Math.acos `acos()`]]
 * [[Math.asin `asin()`]]
 * [[Math.atan `atan()`]]
 * [[Math.atan2 `atan2()`]]
 * [[Math.cos `cos()`]]
 * [[Math.sin `sin()`]]

 
Compiling file src/latest/js_doc/NaN.js


 NaN is a property of the global object, i.e. it is a variable in global scope.

 The initial value of NaN is Not-A-Number&mdash;the same as the value of `Number.NaN`. In modern browsers, NaN is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it.

 It is rather rare to use NaN in a program. It is the returned value when [[Math `Math`]] functions fail (like `Math.sqrt(-1)`) or when a function trying to parse a number fails (like `parseInt("blabla")`).

 #### Testing against NaN

 Equality operator (`==` and `===`) can't be used to test a value against NaN. Use `isNaN()` instead:

 	NaN === NaN;        // false
 	Number.NaN === NaN; // false
 	isNaN(NaN);         // true
 	isNaN(Number.NaN);  // true

 
 
Compiling file src/latest/js_doc/Number.js


 This is a wrapper object that allows you to work with numerical values.

 #### Example: Using the `Number` object to assign values to numeric variables

 The following example uses the `Number` object's properties to assign values to several numeric variables:

     var biggestNum = Number.MAX_VALUE;
     var smallestNum = Number.MIN_VALUE;
     var infiniteNum = Number.POSITIVE_INFINITY;
     var negInfiniteNum = Number.NEGATIVE_INFINITY;
     var notANum = Number.NaN;

 #### Example: Using `Number` to convert a `Date` object

 The following example converts the `Date` object to a numerical value using `Number` as a function:

     var d = new Date("December 17, 1999 03:24:00");
     console.log(Number(d)); // "819199440000"

 #### See Also

 * [[NaN `NaN`]]
 * [[Math `Math`]]

 
 

 - value (Object): The numeric value of the object being created.

 The primary uses for the Number object are:

 * If the argument can't be converted into a number, it returns NaN.
 * In a non-constructor context (i.e., without the `new` operator), `Number` can be used to perform a type conversion.

 


 The maximum numeric value representable in Javascript. Values larger than `MAX_VALUE` are represented as [[Infinity `Infinity`]].

 #### Example: Using `MAX_VALUE`

 The following code multiplies two numeric values. If the result is less than or equal to `MAX_VALUE`, `func1` is called; otherwise, `func2` is called.

 	if (num1 * num2 <= Number.MAX_VALUE)
        func1();
     else
        func2();

 


 The smallest positive numeric value representable in Javascript. Values smaller than `MIN_VALUE` ("underflow values") are converted to 0.

 The `MIN_VALUE` property is the number closest to 0, not the most negative number, that Javascript can represent.

 #### Example: Using `MIN_VALUE`

 The following code divides two numeric values. If the result is greater than or equal to `MIN_VALUE`, the `func1` function is called; otherwise, the `func2` function is called.

     if (num1 / num2 >= Number.MIN_VALUE)
        func1()
     else
        func2()

 


 The value of `Number.NEGATIVE_INFINITY` is the same as the negative value of the global object's `[Infinity]` property.

 This value behaves slightly differently than mathematical infinity:

 * Any positive value, including [[Number.POSITIVE_INFINITY `POSITIVE_INFINITY`]], multiplied by `NEGATIVE_INFINITY` is` NEGATIVE_INFINITY`
 * Any negative value, including `NEGATIVE_INFINITY`, multiplied by `NEGATIVE_INFINITY` is `POSITIVE_INFINITY`.
 * Zero multiplied by `NEGATIVE_INFINITY` is [[NaN `NaN`]].
 * `NaN` multiplied by `NEGATIVE_INFINITY` is `NaN`.
 * `NEGATIVE_INFINITY`, divided by any negative value except `NEGATIVE_INFINITY`, is `POSITIVE_INFINITY`.
 * `NEGATIVE_INFINITY`, divided by any positive value except `POSITIVE_INFINITY`, is `NEGATIVE_INFINITY`
 * `NEGATIVE_INFINITY`, divided by either `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, is `NaN`.
 * Any number divided by `NEGATIVE_INFINITY` is Zero.

 Several Javascript methods (such as the `Number` constructor, `parseFloat()`, and `parseInt()`) return `NaN` if the value specified in the parameter is significantly lower than `Number.MIN_VALUE`.

 You might use the `Number.NEGATIVE_INFINITY` property to indicate an error condition that returns a finite number in case of success. Note, however, that `isFinite()` would be more appropriate in such a case.

 #### Example

 In the following example, the variable smallNumber is assigned a value that is smaller than the minimum value. When the `if` statement executes, smallNumber has the value "`-Infinity`", so smallNumber is set to a more manageable value before continuing.

 	var smallNumber = (-Number.MAX_VALUE) * 2;
 	if (smallNumber == Number.NEGATIVE_INFINITY) {
 		smallNumber = returnFinite();
 	}

 #### See Also
 * [[Infinity `Infinity`]]
 * `Number.POSITIVE_INFINITY`
 


 A value representing "Not-A-Number."

 


 A value representing the positive Infinity value.

 The value of `Number.POSITIVE_INFINITY` is the same as the value of the global object's [[Infinity `Infinity`]] property.

 This value behaves slightly differently than mathematical infinity:

 * Any positive value, including `POSITIVE_INFINITY`, multiplied by `POSITIVE_INFINITY` is `POSITIVE_INFINITY`.
 * Any negative value, including `NEGATIVE_INFINITY`, multiplied by `POSITIVE_INFINITY` is `NEGATIVE_INFINITY`.
 * Zero multiplied by `POSITIVE_INFINITY` is `NaN`.
 * `NaN` multiplied by `POSITIVE_INFINITY` is `NaN`.
 * `POSITIVE_INFINITY`, divided by any negative value except `NEGATIVE_INFINITY`, is `NEGATIVE_INFINITY`.
 * `POSITIVE_INFINITY`, divided by any positive value except `POSITIVE_INFINITY`, is `POSITIVE_INFINITY`.
 * `POSITIVE_INFINITY`, divided by either `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, is `NaN`.
 * Any number divided by `POSITIVE_INFINITY` is Zero.

 Several Javascript methods (such as the `Number` constructor, `parseFloat()`, and `parseInt()`) return `NaN` if the value specified in the parameter is significantly higher than `Number.MAX_VALUE`.

 You might use the `Number.POSITIVE_INFINITY` property to indicate an error condition that returns a finite number in case of success. Note, however, that `isFinite()` would be more appropriate in such a case.

 #### Example

 In the following example, the variable bigNumber is assigned a value that is larger than the maximum value. When the `if` statement executes, bigNumber has the value "`Infinity`", so bigNumber is set to a more manageable value before continuing.
 	var bigNumber = Number.MAX_VALUE * 2
 	if (bigNumber == Number.POSITIVE_INFINITY) {
  	bigNumber = returnFinite();
 	}

 #### See Also

 * [[Infinity `Infinity`]]
 * `Number.NEGATIVE_INFINITY`
 
 

 - fractionDigits (Number): An integer specifying the number of digits after the decimal point. Defaults to as many digits as necessary to specify the number.

 Returns a string representing a `Number` object in exponential notation with one digit before the decimal point, rounded to `fractionDigits` digits after the decimal point. If the `fractionDigits` argument is omitted, the number of digits after the decimal point defaults to the number of digits necessary to represent the value uniquely.

 If you use the `toExponential` method for a numeric literal and the numeric literal has no exponent and no decimal point, leave a space before the dot that precedes the method call to prevent the dot from being interpreted as a decimal point.

 If a number has more digits that requested by the `fractionDigits` parameter, the number is rounded to the nearest number represented by `fractionDigits` digits. See the discussion of rounding in the description of the [[Number.toFixed `toFixed()`]] method, which also applies to `toExponential`.

 #### Example

 	var num = 77.1234;

 	console.log("num.toExponential() is " + num.toExponential()); //displays 7.71234e+1
 	console.log("num.toExponential(4) is " + num.toExponential(4)); //displays 7.7123e+1
 	console.log("num.toExponential(2) is " + num.toExponential(2)); //displays 7.71e+1
 	console.log("77.1234.toExponential() is " + 77.1234.toExponential()); //displays 7.71234e+1
 	console.log("77 .toExponential() is " + 77 .toExponential()); //displays 7.7e+1

 #### See Also

 * [[Number.toFixed `toFixed()`]]
 * [[Number.toPrecision `toPrecision()`]]
 * [[Number.toString `toString()`]]

 

 - digits (Number): The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values.

 Formats a number using fixed-point notation.

 #### Returns

 A string representation of `number` that does not use exponential notation and has exactly `digits` digits after the decimal place. The number is rounded if necessary, and the fractional part is padded with zeros if necessary so that it has the specified length. If `number` is greater than 1e+21, this method simply calls `Number.toString()` and returns a string in exponential notation.

 #### Throws

 * `RangeError`: If digits is too small or too large. Values between 0 and 20, inclusive, will not cause a `RangeError`. Implementations are allowed to support larger and smaller values as well.<
 * `TypeError`: If this method is invoked on an object that is not a `Number`.

 #### Example

 	var n = 12345.6789;

 	n.toFixed();           // Returns "12346": note rounding, no fractional part

 	n.toFixed(1);          // Returns "12345.7": note rounding

 	n.toFixed(6);          // Returns "12345.678900": note added zeros

 	(1.23e+20).toFixed(2); // Returns "123000000000000000000.00"

 	(1.23e-10).toFixed(2); // Returns "0.00"

 	2.34.toFixed(1);       // Returns "2.3"

 	-2.34.toFixed(1);      // Returns -2.3 (due to operator precedence, negative numbers don't return a string...)

 	(-2.24).toFixed(1);    // Returns "-2.3" (...unless you use parentheses)


 #### See Also

 * [[Number.toExponential `toExponential()`]]

 


 This method converts the number into a string which is suitable for presentation in the given locale.

 #### Example

 	var number = 3500;
 	console.log(number.toLocaleString()); // Displays "3,500" in English locale

 
 

 - precision (Number): An integer specifying the number of significant digits.

 Returns a string representing the Number object to the specified precision.

 If the `precision` argument is omitted, behaves as [[Number.toString `toString()`]]. If it is a non-integer value, it is rounded to the nearest integer. After rounding, if that value is not between 1 and 100 (inclusive), a [[RangeError `RangeError`]] is thrown.

  <Note>[ECMA-262](http://www.ecma-international.org/publications/standards/Ecma-262.htm) only requires a precision of up to 21 significant digits. Other implementations may not support precisions higher than required by the standard.</Note>

 #### Returns

 A string representing a `Number` object in fixed-point or exponential notation rounded to `precision` significant digits. See the discussion of rounding in the description of the [[Number.toFixed `toFixed()`]] method, which also applies to `toPrecision`.


 #### Example

 	var num = 5.123456;
 	println("num.toPrecision() is " + num.toPrecision());   //displays 5.123456
 	println("num.toPrecision(5) is " + num.toPrecision(5)); //displays 5.1235
 	println("num.toPrecision(2) is " + num.toPrecision(2)); //displays 5.1
 	println("num.toPrecision(1) is " + num.toPrecision(1)); //displays 5

 #### See Also
 * [[Number.toExponential `toExponential()`]]
 * [[Number.toFixed `toFixed()`]]
 * [[Number.toString `toString()`]]

 


 Returns a string representing the source code of the object. The `toSource` method returns the following values:

 * For the built-in `Number` object, `toSource` returns the following string indicating that the source code is not available:
 	function Number() {[native code]}

 * For instances of `Number`, `toSource` returns a string representing the source code.

 This method is usually called internally by Javascript and not explicitly in code.


 

 - radix (Number): An integer between 2 and 36 specifying the base to use for representing numeric values.

 Returns a string representing the specified Number object.

 The `Number` object overrides the `toString` method of the [[Object `Object`]] object; it does not inherit [[Object.toString `Object.toString()`]]. For `Number` objects, the `toString` method returns a string representation of the object in the specified radix.

 The `toString()` method parses its first argument, and attempts to return a string representation in the specified radix (base). For radixes above 10, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16), A through F are used.

 If toString is given a radix not between 2 and 36, an exception is thrown.

 #### Examples

 	var count = 10;
 	print(count.toString());   // displays "10"
 	print((17).toString());    // displays "17"

 	var x = 7;
 	print(x.toString(2));      // displays "111"

 #### See Also
 * [[Number.toExponential `toExponential()`]]
 * [[Number.ToLocaleString `ToLocaleString()`]]
 * [[Number.toPrecision `toPrecision()`]]
 * [[Number.toFixed `toFixed()`]]
 * [[Number.toSource `toSource()`]]
 * [[Number.valueOf valueOf()`]]

 


 The `valueOf` method of `Number` returns the primitive value of a `Number` object as a number data type.

 This method is usually called internally by Javascript and not explicitly in code.

 #### Example

 	var x = new Number();
 	print(x.valueOf());     // prints "0"

 
 
Compiling file src/latest/js_doc/Object.js


 All objects in Javascript are descended from `Object`; all objects inherit methods and properties from `Object.prototype`, although they may be overridden. For example, other constructors' prototypes override the constructor property and provide their own `toString()` methods. Changes to the Object prototype object are propagated to all objects unless the properties and methods subject to those changes are overridden further along the prototype chain.

 
 

 - value (Object): Any value

 Creates an object wrapper.

 The Object constructor creates an object wrapper for the given value. If the value is `null` or `undefined`, it will create and return an empty object, otherwise, it will return an object of a type that corresponds to the given value.

 When called in a non-constructor context, Object behaves identically.

 #### Example: Using `Object` given `undefined` and `null` types

 The following examples store an empty `Object` object in `o`:

 	var o = new Object();
 	var o = new Object(undefined);
 	var o = new Object(null);


 #### Example: Using `Object` to create `Boolean` objects

 The following examples store [[Boolean `Boolean`]] objects in `o`:

 	// equivalent to o = new Boolean(true);
     var o = new Object(true);

 	// equivalent to o = new Boolean(false);
     var o = new Object(Boolean());
 
 


 Refers to the prototype of the object, which may be an object or `null` (which usually means the object is `Object.prototype`, which has no prototype).  It is sometimes used to implement prototype-inheritance based property lookup.

 This property is deprecated and should not be used in new code: use [[Object.getPrototypeOf `getPrototypeOf()`]] instead.

 
 


 Returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.

 This function is provided to give objects a generic `toLocaleString()` method, even though not all may use it. Currently, only [[Array `Array`]], [[Number `Number`]], and [[Date `Date]]` override `toLocaleString()`.

 


 Returns a string representing the source code of the object.

 The `toSource` method returns the following values:

 * For the built-in `Object` object, `toSource` returns the following string indicating that the source code is not available:


 	function Object() {
 		[native code]
 		}


 * For instances of `Object`, `toSource` returns a string representing the source code.


 You can call `toSource` while debugging to examine the contents of an object.

 It is safe for objects to override the `toSource` method. For example:

 	function Person(name) {

 	this.name = name;

 	}

 	Person.prototype.toSource = function Person_toSource() {

 		return "new Person(" + uneval(this.name) + ")";

 	};

 	alert(new Person("Joe").toSource());    // ---> new Person("Joe")


 <div id = "section_5"><span id = "Built-in_toString_methods"></span><span id = "Built-in_toSource_methods"></span>

 #### Example: Using `toSource`

 	The following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:

 	function Dog(name, breed, color, sex) {
 		this.name=name;
 		this.breed=breed;
 		this.color=color;
 		this.sex=sex;
 	}

 	theDog = new Dog("Gabby", "Lab", "chocolate", "girl");


 Calling the `toSource` method of `theDog` displays the Javascript source that defines the object:

     theDog.toSource();


 returns

 	({name:"Gabby", breed:"Lab", color:"chocolate", sex:"girl"})
 
 


  Returns a string representing the object.


 Every object has a `toString()` method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the `toString()` method is inherited by every object descended from `Object`. If this method is not overridden in a custom object, `toString()` returns "[object _type_]", where _type_ is the object type. The following code illustrates this:

 	var o = new Object();
 	o.toString();           // returns [object Object]


 <Note>Starting in Javascript 1.8.5 `toString()` called on `null` returns `null`, and `undefined` returns `undefined`, as defined in the 5th Edition of ECMAScript and a subsequent Errata. See [Using toString to detect object type](https://developer.mozilla.org/en/Javascript/Reference/Global_Objects/Object/toString#Using_toString_to_detect_object_type).</Note>

 #### Example: Overriding the default `toString` method

  You can create a function to be called in place of the default `toString()` method. The `toString()` method takes no arguments and should return a string. The `toString()` method you create can be any value you want, but it will be most useful if it carries information about the object.

 The following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:

 	function Dog(name,breed,color,sex) {
 		this.name=name;
 		this.breed=breed;
 		this.color=color;
 		this.sex=sex;
 	}

 	theDog = new Dog("Gabby","Lab","chocolate","female");

 If you call the `toString()` method on this custom object, it returns the default value inherited from `Object`:

 	theDog.toString(); //returns [object Object]

 The following code creates and assigns `dogToString()` to override the default `toString()` method. This function generates a string containing the name, breed, color, and sex of the object, in the form "`property = value;`".

 	Dog.prototype.toString = function dogToString() {
 		var ret = "Dog " + this.name + " is a " + this.sex + " " + this.color + " " + this.breed;
 		return ret;
 	}

 With the preceding code in place, any time `theDog` is used in a string context, Javascript automatically calls the `dogToString()` function, which returns the following string:

 	Dog Gabby is a female chocolate Lab

 #### Example: Using toString() to detect object class

 `toString()` can be used with every object and allows you to get its class. To use the `Object.prototype.toString()` with every object, you need to call [[Function.call `Function.call()`]] or [[Function.apply `Function.apply()`]] on it, passing the object you want to inspect as the first parameter called `thisArg`.

 	var toString = Object.prototype.toString;

 	toString.call(new Date); // [object Date]
 	toString.call(new String); // [object String]
 	toString.call(Math); // [object Math]

 	//Since Javascript 1.8.5
 	toString.call(undefined); // [object Undefined]
 	toString.call(null); // [object Null]

 #### Example: Overriding the default `toString` method

 You can create a function to be called in place of the default `toString()` method. The `toString()` method takes no arguments and should return a string. The `toString()` method you create can be any value you want, but it will be most useful if it carries information about the object.

 The following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:

 	function Dog(name,breed,color,sex) {
 		this.name=name;
 		this.breed=breed;
 		this.color=color;
 		this.sex=sex;
 	}

 	theDog = new Dog("Gabby","Lab","chocolate","female");

 If you call the `toString()` method on this custom object, it returns the default value inherited from `Object`:

 	theDog.toString(); //returns [object Object]

 The following code creates and assigns `dogToString()` to override the default `toString()` method. This function generates a string containing the name, breed, color, and sex of the object, in the form "`property = value;`".

 	Dog.prototype.toString = function dogToString() {
 		var ret = "Dog " + this.name + " is a " + this.sex + " " + this.color + " " + this.breed;
 		return ret;
 	}

 With the preceding code in place, any time `theDog` is used in a string context, Javascript automatically calls the `dogToString()` function, which returns the following string:

 	Dog Gabby is a female chocolate Lab


 #### See Also
 * [[Object.toSource `toSource()`]]]
 * [[Object.valueOf `valueOf()`]]

 


 Returns the primitive value of the specified object

 Javascript calls the `valueOf` method to convert an object to a primitive value. You rarely need to invoke the `valueOf` method yourself; Javascript automatically invokes it when encountering an object where a primitive value is expected.

 By default, the `valueOf` method is inherited by every object descended from `Object`. Every built-in core object overrides this method to return an appropriate value. If an object has no primitive value, `valueOf` returns the object itself, which is displayed as:

 	[object Object]

 You can use `valueOf` within your own code to convert a built-in object into a primitive value. When you create a custom object, you can override `Object.valueOf` to call a custom method instead of the default `Object` method.

 #### Note

 Objects in string contexts convert via the [[Object.toString `toString()`]] method, which is different from [[String `String`]] objects converting to string primitives using `valueOf`. All objects have a string conversion, if only "`[object _type_]`". But many objects don't convert to number, boolean, or function.

 #### Example: Overriding `valueOf` for custom objects

 You can create a function to be called in place of the default `valueOf` method. Your function must take no arguments.

 Suppose you have an object type `myNumberType` and you want to create a `valueOf` method for it. The following code assigns a user-defined function to the object's `valueOf` method:

 	myNumberType.prototype.valueOf = new Function(functionText);

 With the preceding code in place, any time an object of type `myNumberType` is used in a context where it is to be represented as a primitive value, Javascript automatically calls the function defined in the preceding code.

 An object's `valueOf` method is usually invoked by Javascript, but you can invoke it yourself as follows:

 	myNumber.valueOf()


 #### See Also

 * [[Object.toString `toString()`]]

 

 - sprop (String): Contains the name of the property to bind to the given function
 - fun (Function): A Function to be bound to a lookup of the specified property

 Binds an object's property to a function to be called when that property is looked up.


 The `__defineGetter__` allows a [getter](https://developer.mozilla.org/en/Javascript/Reference/Operators/Special/get "en/Core_Javascript_1.5_Reference/Operators/Special_Operators/get_Operator") to be defined on a pre-existing object.


 #### See Also

 * [`get`](https://developer.mozilla.org/en/Javascript/Reference/Operators/Special/get)
 * `Object.__lookupGetter__`
 * [JS Guide:Defining Getters and Setters](https://developer.mozilla.org/en/Javascript/Guide/Obsolete_Pages/Creating_New_Objects/Defining_Getters_and_Setters)
 
 

 - sprop (String): Contains the name of the property to bind to the given function
 - fun (Function): A Function to be bound to a lookup of the specified property

 Binds an object's property to a function to be called when an attempt is made to set that property.


 The `__defineSetter__` method allows a [setter](https://developer.mozilla.org/en/Javascript/Reference/Operators/Special/set) to be defined on a pre-existing object.

 #### See Also

 * [`set`](https://developer.mozilla.org/en/Javascript/Reference/Operators/Special/set)
 * `Object.__lookupSetter__`
 * [JS Guide:Defining Getters and Setters](https://developer.mozilla.org/en/Javascript/Guide/Obsolete_Pages/Creating_New_Objects/Defining_Getters_and_Setters)
 
 

 - prop (String): The name of the property to test.

 Returns a boolean indicating whether the object has the specified property.

 Every object descended from `Object` inherits the `hasOwnProperty` method. This method can be used to determine whether an object has the specified property as a direct property of that object; unlike the [`in`](https://developer.mozilla.org/en/Javascript/Reference/Operators/Special/in "en/Core_Javascript_1.5_Reference/Operators/Special_Operators/in_Operator") operator, this method does not check down the object's prototype chain.

 #### Example: Using `hasOwnProperty()` to test for a property's existence

 The following example determines whether the `o` object contains a property named `prop`:

 	o = new Object();
 	o.prop = 'exists';

     function changeO() {
       o.newprop = o.prop;
       delete o.prop;
     }

     o.hasOwnProperty('prop');   //returns true
     changeO();
     o.hasOwnProperty('prop');   //returns false

 #### Example: Direct versus inherited properties

 The following example differentiates between direct properties and properties inherited through the prototype chain:

 	o = new Object();
     o.prop = 'exists';
     o.hasOwnProperty('prop');             // returns true
     o.hasOwnProperty('toString');         // returns false
     o.hasOwnProperty('hasOwnProperty');   // returns false

 #### Example: Iterating over the properties of an object

 The following example shows how to iterate over the properties of an object without executing on inherit properties.

 	var buz = {
         fog: 'stack'
     };

     for (var name in buz) {
         if (buz.hasOwnProperty(name)) {
             alert("this is fog (" + name + ") for sure. Value: " + buz[name]);
         }
         else {
             alert(name); // toString or something else
         }
     }

 
 

 - object (Object): The object whose prototype chain will be searched

 Tests for an object in another object's prototype chain.


 `isPrototypeOf` allows you to check whether or not an object exists within another object's prototype chain.

 For example, consider the following prototype chain:

 	function Fee() {
 		// . . .
 	}

 	function Fi() {
  	// . . .
 	}

 	Fi.prototype = new Fee();

 	function Fo() {
 		// . . .
 	}

 	Fo.prototype = new Fi();

 	function Fum() {
 		// . . .
 	}

 	Fum.prototype = new Fo();


 Later on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists within the `Fum` prototype chain, you could do this:

 	var fum = new Fum();

 	. . .

 	if (Fi.prototype.isPrototypeOf(fum)) {

 		// do something safe

 	}

 This, along with the `instanceof` operator particularly comes in handy if you have code that can only function when dealing with objects descended from a specific prototype chain, e.g., to guarantee that certain methods or properties will be present on that object.

 #### See Also

 * [`instanceof`](https://developer.mozilla.org/en/Javascript/Reference/Operators/instanceof)

 

 - sprop (String): Contains the name of the property whose getter should be returned

 Return the function bound as a getter to the specified property.


 If a getter has been defined for an object's property, it's not possible to reference the getter function through that property, because that property refers to the return value of that function. `__lookupGetter__` can be used to obtain a reference to the getter function.

 #### See Also

 * [`get`](https://developer.mozilla.org/en/Javascript/Reference/Operators/Special/get)
 * `Object.__defineGetter__`
 * `Object.__defineSetter__`
 * [JS Guide:Defining Getters and Setters](https://developer.mozilla.org/en/Javascript/Guide/Obsolete_Pages/Creating_New_Objects/Defining_Getters_and_Setters)


 

 - sprop (String): Contains the name of the property whose getter should be returned

 Return the function bound as a setter to the specified property.

 If a setter has been defined for an object's property, it's not possible to reference the setter function through that property, because that property refers to the return value of that function. `__lookupSetter__` can be used to obtain a reference to the setter function.

 #### See Also

 * [`set`](https://developer.mozilla.org/en/Javascript/Reference/Operators/Special/set)
 * `Object.__defineSetter__`
 * [JS Guide:Defining Getters and Setters](https://developer.mozilla.org/en/Javascript/Guide/Obsolete_Pages/Creating_New_Objects/Defining_Getters_and_Setters)

 
 


 Executes a function when a non-existent method is called on an object. It takes the form of:

 	obj.__noSuchMethod__ = function (id, args) { . . . }

 where:

 * `id`: the name of the non-existent method that was called
 * `args`: an array of the arguments passed to the method

 By default, an attempt to call a method that doesn't exist on an object results in a [[TypeError `TypeError`]] being thrown. This behavior can be circumvented by defining a function at that object's `noSuchMethod` member. The function takes two arguments, the first is the name of the method attempted and the second is an array of the arguments that were passed in the method call. The second argument is an actual array (that is, it inherits through the `Array` prototype chain) and not the array-like [arguments object](https://developer.mozilla.org/en/Javascript/Reference/Functions_and_function_scope/arguments).

 If this method can't be called, either as if `undefined` by default, if deleted, or if manually set to a non-function, the Javascript engine will revert to throwing `TypeError`s.

 #### Example

 `__noSuchMethod__` can be used to simulate multiple inheritance. An example of code that implements a primitive form of multiple inheritance is shown below.

 	// Doesn't work with multiple inheritance objects as parents
 	 function noMethod(name, args) {
 	   var parents=this.__parents_;

 	   // Go through all parents

 	   for (var i=0;i<parents.length;i++) {
 	     // If we find a function on the parent, we call it
 	     if (typeof parents[i][name] =="function") {
 	       return parents[i][name].apply(this, args);
 	     }
 	   }

 	   // If we get here, the method hasn't been found

 	   throw new TypeError;
 	 }

 	 // Used to add a parent for multiple inheritance

 	 function addParent(obj, parent) {
 	   // If the object isn't initialized, initialize it

 	   if (!obj.__parents_) {
 	     obj.__parents_=[];
 	     obj.__noSuchMethod__ = noMethod;
 	   }

 	   // Add the parent

 	   obj.__parents_.push(parent);
 	 }

 An example of using this idea is shown below.

 		// Example base class 1

 	 function NamedThing(name){
 	   this.name=name;
 	 }

 	 NamedThing.prototype = {
 	   getName: function() {return this.name;},
 	   setName: function(newName) {this.name=newName;}
 	 }

 	 //Example base class 2

 	 function AgedThing(age){
 	   this.age=age;
 	 }

 	 AgedThing.prototype = {
 	   getAge: function(){return this.age;},
 	   setAge: function(age){this.age=age;}
 	 }

 	 // Child class. inherits from NamedThing and AgedThing as well as defining address

 	 function Person(name, age, address){
 	   addParent(this, NamedThing.prototype);
 	   NamedThing.call(this, name);
 	   addParent(this, AgedThing.prototype);
 	   AgedThing.call(this, age);
 	   this.address=address;
 	 }

 	 Person.prototype = {
 	   getAddr: function() {return this.address;},
 	   setAddr: function(addr) {this.address=addr;}
 	 }

 	 var bob=new Person("bob", 25, "New York");

 	 console.log("getAge is "+(("getAge" in bob)?"in":"not in")+" bob");
 	 console.log("bob's age is: "+bob.getAge());
 	 console.log("getName is "+(("getName" in bob)?"in":"not in")+" bob");
 	 console.log("bob's name is: "+bob.getName());
 	 console.log("getAddr is "+(("getAddr" in bob)?"in":"not in")+" bob");
 	 console.log("bob's address is: "+bob.getAddr());


 

 - prop (String): The name of the property to test.

 Returns a Boolean indicating whether the specified property is enumerable.

 Every object has a `propertyIsEnumerable` method. This method can determine whether the specified property in an object can be enumerated by a [`for...in`](https://developer.mozilla.org/en/Core_Javascript_1.5_Reference/Statements/for...in "en/Core_Javascript_1.5_Reference/Statements/for...in") loop, with the exception of properties inherited through the prototype chain. If the object does not have the specified property, this method returns false.

 <Note>Starting in Javascript 1.8.1, `propertyIsEnumerable("prototype")` returns `false` instead of `true`; this makes the result compliant with ECMAScript 5.</Note>

 #### Example: A basic use of `propertyIsEnumerable`

 The following example shows the use of `propertyIsEnumerable` on objects and arrays:

 	var o = {};
     var a = [];
     o.prop = 'is enumerable';
     a[0] = 'is enumerable';

     o.propertyIsEnumerable('prop');   // returns true
     a.propertyIsEnumerable(0);        // returns true

 #### Example: User-defined versus built-in objects

 The following example demonstrates the enumerability of user-defined versus built-in properties:

 	var a = ['is enumerable'];

     a.propertyIsEnumerable(0);          // returns true
     a.propertyIsEnumerable('length');   // returns false

     Math.propertyIsEnumerable('random');   // returns false
     this.propertyIsEnumerable('Math');     // returns false

 #### Example: Direct versus inherited properties

 	var a = [];
     a.propertyIsEnumerable('constructor');         // returns false

     function firstConstructor()
     {
       this.property = 'is not enumerable';
     }
     firstConstructor.prototype.firstMethod = function () {};

     function secondConstructor()
     {
       this.method = function method() { return 'is enumerable'; };
     }

     secondConstructor.prototype = new firstConstructor;
     secondConstructor.prototype.constructor = secondConstructor;

     var o = new secondConstructor();
     o.arbitraryProperty = 'is enumerable';

     o.propertyIsEnumerable('arbitraryProperty');   // returns true
     o.propertyIsEnumerable('method');              // returns true
     o.propertyIsEnumerable('property');            // returns false

     o.property = 'is enumerable';

     o.propertyIsEnumerable('property');            // returns true

     // These return false as they are on the prototype which
     // propertyIsEnumerable does not consider (even though the last two
     // are iteratable with for-in)
     o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)
     o.propertyIsEnumerable('constructor'); // returns false
     o.propertyIsEnumerable('firstMethod'); // returns false


 

 - obj (Object): The object on which to define the property.
 - prop (String): The name of the property to be defined or modified.
 - descriptor (String): The descriptor for the property being defined or modified.

 Defines a new property directly on an object, or modifies an existing property on an object, and returns the object.

 This method allows precise addition to or modification of a property on an object. Normal property addition through assignment creates properties which show up during property enumeration ([`for...in` loop](https://developer.mozilla.org/en/Javascript/Reference/Statements/for...in)), whose values may be changed, and which may be [deleted](https://developer.mozilla.org/en/Javascript/Reference/Operators/Special/delete). This method allows these extra details to be changed from their defaults.

 Property descriptors present in objects come in two main flavors: data descriptors and accessor descriptors. A _data descriptor_ is a property that has a value, which may or may not be writable. An _accessor descriptor_ is a property described by a getter-setter pair of functions. A descriptor must be one of these two flavors; it can't be both. All descriptors regardless of flavor include the **configurable** and **enumerable** fields.

 A property descriptor is an object with the following fields:

 * `value`: The value associated with the property; data descriptors only. Defaults to `undefined`.
 * `writable`: `true` if and only if the value associated with the property may be changed; data descriptors only. Defaults to `false`.
 * `get`: A function which serves as a getter for the property, or `undefined` if there is no getter; accessor descriptors only. Defaults to `undefined`.
 * `set`: A function which serves as a setter for the property, or `undefined` if there is no setter; accessor descriptors only. Defaults to `undefined`.
 * `configurable`: `true` if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. Defaults to `false`.
 * `enumerable`: `true` if and only if this property shows up during enumeration of the properties on the corresponding object. Defaults to `false`.

 ##### Creating a property

 When the property specified doesn't exist in the object, `defineProperty()` creates a new property as described. Fields may be omitted from the descriptor, and default values for those fields are imputed. All of the boolean-valued fields default to `false`. The `value`, `get`, and `set` fields default to `undefined`.

 ##### Modifying a property

 When the property already exists, `defineProperty()` attempts to modify the property according to the values in the descriptor and the object current configuration. If the old descriptor had its <strong>configurable</strong> attribute set to `false` (the property is said "non-configurable"), then no attribute besides <strong>writable</strong> can be changed. In that case, it is also not possible to switch back and forth from data/accessor properties type (a property which would have been defined without `get`/`set`/`value`/`writable` is called "generic" and is "typed" as a data descriptor).

 A [[TypeError `TypeError`]] is thrown when non-configurable property attributes are changed unless it's the `writable` attribute or if the current and new values are equal.

 ##### Code considerations

 If you have to define many properties through the `defineProperty()` method, you can utilise the same descriptor object for each property, redefining it from time to time through binary flags.

 #### Example
 	var oDesc = {};
 	function setProp (nMask, oObj, sKey, vVal_fGet, fSet) {
 		if (nMask & 12) {
 			if (arguments.length > 3) { oDesc.value = vVal_fGet; } else { delete oDesc.value; }
 			oDesc.writable = Boolean(nMask & 8);
 			delete oDesc.get;
 			delete oDesc.set;
 		} else {
 			if (vVal_fGet) { oDesc.get = vVal_fGet; } else { delete oDesc.get; }
 			if (fSet) { oDesc.set = fSet; } else { delete oDesc.set; }
 			delete oDesc.value;
 			delete oDesc.writable;
 		}
 		oDesc.enumerable = Boolean(nMask & 1);
 		oDesc.configurable = Boolean(nMask & 2);
 		Object.defineProperty(oObj, sKey, oDesc);
 	}

 	/**
 	*	:: function setProp ::
 	*
 	*	vVal_fGet is the value to assign to a data descriptor or the getter function to assign to an accessor descriptor;
 	*
 	*	nMask is a bitmask:
 	*
 	*	flag 0x1: property is enumerable,
 	*	flag 0x2: property is configurable,
 	*	flag 0x4: property is data descriptor,
 	*	flag 0x8: property is writable.
 	*	Note: If flag 0x8 is setted to "writable", the propery will be considered a data descriptor even if the flag 0x4 is setted to "accessor descriptor"!
 	*
 	*	Values:
 	*
 	*	0  : accessor descriptor - not configurable, not enumerable (0000).
 	*	1  : accessor descriptor - not configurable, enumerable (0001).
 	*	2  : accessor descriptor - configurable, not enumerable (0010).
 	*	3  : accessor descriptor - configurable, enumerable (0011).
 	*	4  : readonly data descriptor - not configurable, not enumerable (0100).
 	*	5  : readonly data descriptor - not configurable, enumerable (0101).
 	*	6  : readonly data descriptor - configurable, not enumerable (0110).
 	*	7  : readonly data descriptor - configurable, enumerable (0111).
 	*	8  : writable data descriptor - not configurable, not enumerable (1000).
 	*	9  : writable data descriptor - not configurable, enumerable (1001).
 	*	10 : writable data descriptor - configurable, not enumerable (1010).
 	*	11 : writable data descriptor - configurable, enumerable (1011).
 	*/

 	// creating a new empty object
 	var myObj = {};

 	// adding a writable data descriptor - not configurable, not enumerable
 	setProp(8, myObj, "myNumber", 25);

 	// adding a readonly data descriptor - not configurable, enumerable
 	setProp(5, myObj, "myString", "Hello world!");

 	// adding an accessor descriptor - not configurable, enumerable
 	setProp(1, myObj, "myArray", function() {
 		for (var iBit = 0, iFlag = 1, aBoolArr = [false]; iFlag < this.myNumber + 1 || (this.myNumber & iFlag); iFlag = iFlag << 1) { aBoolArr[iBit++] = Boolean(this.myNumber & iFlag); }
 		return aBoolArr;
 	}, function(aNewMask) {
 		for (var nNew = 0, iBit = 0; iBit < aNewMask.length; iBit++) { nNew |= Boolean(aNewMask[iBit]) << iBit; }
 		this.myNumber = nNew;
 	});

 	// adding a writable data descriptor (undefined value) - configurable, enumerable
 	setProp(11, myObj, "myUndefined");

 	// adding an accessor descriptor (only getter) - not configurable, enumerable
 	setProp(1, myObj, "myDate", function() { return new Date(); });

 	// adding an accessor descriptor (only setter) - not configurable, not enumerable
 	setProp(0, myObj, "myAlert", null, function(sTxt) { alert(sTxt); });

 	myObj.myAlert = myObj.myDate.toLocaleString() + "\n\n" + myObj.myString + "\nThe number " + myObj.myNumber + " represents the following bitmask: " + myObj.myArray.join(", ") + ".";

 You can do the same thing with an anonymous descriptor object.

 	new (function() {
 		function buildProp (nMask, oObj, sKey, vVal_fGet, fSet) {
 			if (nMask & 12) {
 				if (arguments.length > 3) { this.value = vVal_fGet; } else { delete this.value; }
 				this.writable = Boolean(nMask & 8);
 				delete this.get;
 				delete this.set;
 			} else {
 				if (vVal_fGet) { this.get = vVal_fGet; } else { delete this.get; }
 				if (fSet) { this.set = fSet; } else { delete this.set; }
 				delete this.value;
 				delete this.writable;
 			}
 			this.enumerable = Boolean(nMask & 1);
 			this.configurable = Boolean(nMask & 2);
 			Object.defineProperty(oObj, sKey, this);
 		};
 		buildProp(5, window, "setProp", buildProp);
 	})();

 	// creating a new empty object
 	var myObj = {};

 	// adding a writable data descriptor - not configurable, not enumerable
 	setProp(8, myObj, "myNumber", 25);

 	// adding a readonly data descriptor - not configurable, enumerable
 	setProp(5, myObj, "myString", "Hello world!");
 	// etc. etc.
 

 - proto (Object): The object which should be the prototype of the newly-created object.
 - propertiesObject (Object): If specified and not undefined, an object whose enumerable own properties (that is, those properties defined upon itself and not enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names.

 Creates a new object with the specified prototype object and properties. Throws a `TypeError` exception if the proto parameter isn't `null` or an object.

 #### Examples

 	var o;

 	// create an object with null as prototype
 	o = Object.create(null);

 	o = {};
 	// is equivalent to:
 	o = Object.create(Object.prototype);


 	function Constructor(){}
 	o = new Constructor();
 	// is equivalent to:
 	o = Object.create(Constructor.prototype);
 	// Of course, if there is actual initialization code in the Constructor function, the Object.create can't reflect it


 	// create a new object whose prototype is a new, empty object
 	// and a adding single property 'p', with value 42
 	o = Object.create({}, { p: { value: 42 } })

 	// by default properties ARE NOT writable, enumerable or configurable:
 	o.p = 24
 	o.p
 	//42

 	o.q = 12
 	for (var prop in o) {
 	   console.log(prop)
 	}
 	//"q"

 	delete o.p
 	//false

 	//to specify an ES3 property
 	o2 = Object.create({}, { p: { value: 42, writable: true, enumerable: true, configurable: true } });


 #### See Also
 * [[Object.defineProperty `defineProperty()`]]
 * [[Object.defineProperties `defineProperties`]]
 * [[Object.isPrototypeOf `isPrototypeOf()`]]
 * John Resig's post on [getPrototypeOf](http://ejohn.org/blog/objectgetprototypeof/)


 

 - obj (Object): The object on which to define or modify properties.
 - props (Object): An object whose own enumerable properties constitute descriptors for the properties to be defined or modified.

 Defines new or modifies existing properties directly on an object, returning the object.

 `defineProperties()`, in essence, defines all properties corresponding to the enumerable own properties of props on the object `objrops` object.

 Assuming a pristine execution environment with all names and properties referring to their initial values, `defineProperties()` is almost completely equivalent (note the comment in `isCallable`) to the following reimplementation in Javascript:
 	function defineProperties(obj, properties)
 	{
 	  function convertToDescriptor(desc)
 	  {
 	    function hasProperty(obj, prop)
 	    {
 	      return Object.prototype.hasOwnProperty.call(obj, prop);
 	    }

 	    function isCallable(v)
 	    {
 	      // NB: modify as necessary if other values than functions are callable.
 	      return typeof v === "function";
 	    }

 	    if (typeof desc !== "object" || desc === null)
 	      throw new TypeError("bad desc");

 	    var d = {};
 	    if (hasProperty(desc, "enumerable"))
 	      d.enumerable = !!obj.enumerable;
 	    if (hasProperty(desc, "configurable"))
 	      d.configurable = !!obj.configurable;
 	    if (hasProperty(desc, "value"))
 	      d.value = obj.value;
 	    if (hasProperty(desc, "writable"))
 	      d.writable = !!desc.writable;
 	    if (hasProperty(desc, "get"))
 	    {
 	      var g = desc.get;
 	      if (!isCallable(g) && g !== "undefined")
 	        throw new TypeError("bad get");
 	      d.get = g;
 	    }
 	    if (hasProperty(desc, "set"))
 	    {
 	      var s = desc.set;
 	      if (!isCallable(s) && s !== "undefined")
 	        throw new TypeError("bad set");
 	      d.set = s;
 	    }

 	    if (("get" in d || "set" in d) && ("value" in d || "writable" in d))
 	      throw new TypeError("identity-confused descriptor");

 	    return d;
 	  }

 	  if (typeof obj !== "object" || obj === null)
 	    throw new TypeError("bad obj");

 	  properties = Object(properties);
 	  var keys = Object.keys(properties);
 	  var descs = [];
 	  for (var i = 0; i < keys.length; i++)
 	    descs.push([keys[i], convertToDescriptor(properties[keys[i]])]);
 	  for (var i = 0; i < descs.length; i++)
 	    Object.defineProperty(obj, descs[i][0], descs[i][1]);

 	  return obj;
 	}
 #### See Also
 * [[Object.defineProperty `defineProperty()`]]
 * [[Object.keys `keys()`]]

 

 - obj (Object): The object in which to look for the property
 - prop (String): The name of the property whose description is to be retrieved

 This method permits examination of the precise description of a property. A property in Javascript consists of a string-valued name and a property descriptor. A property descriptor< is a record with some of the following attributes:

 * `value`: The value associated with the property; data descriptors only. Defaults to `undefined`.
 * `writable`: `true` if and only if the value associated with the property may be changed; data descriptors only. Defaults to `false`.
 * `get`: A function which serves as a getter for the property, or `undefined` if there is no getter; accessor descriptors only. Defaults to `undefined`.
 * `set`: A function which serves as a setter for the property, or `undefined` if there is no setter; accessor descriptors only. Defaults to `undefined`.
 * `configurable`: `true` if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. Defaults to `false`.
 * `enumerable`: `true` if and only if this property shows up during enumeration of the properties on the corresponding object. Defaults to `false`.


 #### Example

 	var o, d;

 	o = { get foo() { return 17; } };
 	d = Object.getOwnPropertyDescriptor(o, "foo");
 	// d is { configurable: true, enumerable: true, get: /*the getter function*/, set: undefined }

 	o = { bar: 42 };
 	d = Object.getOwnPropertyDescriptor(o, "bar");
 	// d is { configurable: true, enumerable: true, value: 42, writable: true }

 	o = {};
 	Object.defineProperty(o, "baz", { value: 8675309, writable: false, enumerable: false });
 	d = Object.getOwnPropertyDescriptor(o, "baz");
 	// d is { value: 8675309, writable: false, enumerable: false, configurable: false }

 #### Returns

 Returns a property descriptor for an own property (that is, one directly present on an object, not present by dint of being along an object's prototype chain) of a given object.

 #### See Also

 * [[Object.defineProperty `defineProperty()`]]

 

 - obj (Object): The object whose enumerable own properties are to be returned.

 Returns an array of all own enumerable properties found upon a given object, in the same order as that given by looping over the properties of the object manually (such as by using `for...in`).

 #### Examples

 	var arr = ["a", "b", "c"]; alert(Object.keys(arr)); // will alert "0,1,2"

 	// array like object
 	var obj = { 0 : "a", 1 : "b", 2 : "c"};
 	alert(Object.keys(obj)); // will alert "0,1,2"

 	// getFoo is property which isn't enumerable
 	var my_obj = Object.create({}, { getFoo : { value : function () { return this.foo } } });
 	my_obj.foo = 1;

 	alert(Object.keys(my_obj)); // will alert only foo

 If you want all properties, even the not enumerable, see [[Object.getOwnPropertyNames `getOwnPropertyNames`]].

 #### See Also
 * [[Object.propertyIsEnumerable `propertyIsEnumerable()`]]
 * [[Object.create `create()`]]
 * [[Object.getOwnPropertyNames `getOwnPropertyNames()`]]

 

 - obj (Object): The object whose enumerable and non-enumerable own properties are to be returned.

  Returns an array  whose elements are strings corresponding to the enumerable _and non-enumerable_ properties found directly upon `obj`. The ordering of the enumerable properties in the array is consistent with the ordering exposed by looping over the properties of the object manually (such as by using `for...in`).  The ordering of the non-enumerable properties in the array, and among the enumerable properties, is not defined.

 If you want only the enumerable properties, see [[Object.keys `keys()`]].

 #### Example

 	var arr = ["a", "b", "c"];
 	print(Object.getOwnPropertyNames(arr).sort()); // prints "0,1,2,length"

 	// array-like object
 	var obj = { 0: "a", 1: "b", 2: "c"};
 	print(Object.getOwnPropertyNames(obj).sort()); // prints "0,1,2"

 	// non-enumerable property
 	var my_obj = Object.create({}, { getFoo: { value: function() { return this.foo; }, enumerable: false } });
 	my_obj.foo = 1;

 	print(Object.getOwnPropertyNames(my_obj).sort()); // prints "foo, getFoo"


 #### See Also
 * [[Object.propertyIsEnumerable `propertyIsEnumerable()`]]
 * [[Object.create `create()`]]
 * [[Object.keys `keys()`]]

 

 - object (Object): The object whose prototype is to be returned.

 Returns the prototype of the specified object. Throws a [[TypeError `TypeError`]] exception if the object parameter isn't an `Object`.


 #### See Also
 * [[Object.isPrototypeOf `isPrototypeOf()`]]
 * John Resig's post on [getPrototypeOf](http://ejohn.org/blog/objectgetprototypeof)

 

 - object (Object): The object which should be made non-extensible.

 Prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).

 An object is extensible if new properties can be added to it. This method marks an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible.  Note that the properties of a non-extensible object, in general, may still be _deleted_. Attempting to add new properties to a non-extensible object will fail, either silently or by throwing a [[TypeError `TypeError`]] (most commonly, but not exclusively, when in [strict mode](https://developer.mozilla.org/en/Javascript/Strict_mode)).

 #### Examples

 	// Object.preventExtensions returns the object being made non-extensible.
 	var obj = {};
 	var obj2 = Object.preventExtensions(obj);
 	assert(obj === obj2);

 	// Objects are extensible by default.
 	var empty = {};
 	assert(Object.isExtensible(empty) === true);

 	// ...but that can be changed.
 	Object.preventExtensions(empty);
 	assert(Object.isExtensible(empty) === false);

 	// Object.defineProperty throws when adding a new property to a non-extensible object.
 	var nonExtensible = { removable: true };
 	Object.preventExtensions(nonExtensible);
 	Object.defineProperty(nonExtensible, "new", { value: 8675309 }); // throws a TypeError

 	// In strict mode, attempting to add new properties to a non-extensible object throws a TypeError.
 	function fail()
 	{
 	  "use strict";
 	  nonExtensible.newProperty = "FAIL"; // throws a TypeError
 	}
 	fail();


 #### See Also

 * [[Object.isExtensible `isExtensible()`]]
 * [[Object.seal `seal()`]]]
 * [[Object.isSealed `isSealed()`]]
 * [[Object.freeze `freeze()`]]
 * [[Object.isFrozen `isFrozen()`]]
 
 


 Determines if an object is extensible (whether it can have new properties added to it).

 Objects are extensible by default: they can have new properties added to them. An object can be marked as non-extensible using [[Object.preventExtensions `preventExtensions()`]], [[Object.seal `seal()`]], or [[Object.freeze `freeze()`]].

 #### Examples

 		// New objects are extensible.
 		var empty = {};
 		assert(Object.isExtensible(empty) === true);

 		// ...but that can be changed.
 		Object.preventExtensions(empty);
 		assert(Object.isExtensible(empty) === false);

 		// Sealed objects are by definition non-extensible.
 		var sealed = Object.seal({});
 		assert(Object.isExtensible(sealed) === false);

 		// Frozen objects are also by definition non-extensible.
 		var frozen = Object.freeze({});
 		assert(Object.isExtensible(frozen) === false);

 #### See Also

 * [[Object.preventExtensions `preventExtensions()`]]
 * [[Object.seal `seal()`]]
 * [[Object.isSealed `isSealed()`]]
 * [[Object.freeze `freeze()`]]
 * [[Object.isFrozen `isFrozen()`]]

 

 - obj (Object): The object which should be sealed.

 By default objects are [[Object.extensible extensible]] (meaning, new properties can be added to them). Sealing an object prevents new properties from being added and marks all existing properties as non-configurable. This has the effect of making the set of properties on the object fixed and immutable.

 Making all properties non-configurable also prevents them from being converted from data properties to accessor properties and vice versa, but it does not prevent the values of data properties from being changed. Attempting to delete or add properties to a sealed object, or to convert a data property to accessor or vice versa, will fail, either silently or by throwing a [[TypeError `TypeError`]] (most commonly, although not exclusively, when in [strict mode](https://developer.mozilla.org/en/Javascript/Strict_mode) code).

 #### Examples

 	var obj = {
 	    prop: function () {},
 	    foo: "bar"
 	  };

 	// New properties may be added, existing properties may be changed or removed
 	obj.foo = "baz";
 	obj.lumpy = "woof";
 	delete obj.prop;

 	var o = Object.seal(obj);
 	assert(o === obj);
 	assert(Object.isSealed(obj) === true);

 	// Changing property values on a sealed object still works.
 	obj.foo = "quux";

 	// But you can't convert data properties to accessors, or vice versa.
 	Object.defineProperty(obj, "foo", { get: function() { return "g"; } }); // throws a TypeError

 	// Now any changes, other than to property values, will fail.
 	obj.quaxxor = "the friendly duck"; // silently doesn't add the property
 	delete obj.foo; // silently doesn't delete the property

 	// ...and in strict mode such attempts will throw TypeErrors
 	function fail() {
 	  "use strict";
 	  delete obj.foo; // throws a TypeError
 	  obj.sparky = "arf"; // throws a TypeError
 	}
 	fail();

 	// Attempted additions through Object.defineProperty will also throw
 	Object.defineProperty(obj, "ohai", { value: 17 }); // throws a TypeError
 	Object.defineProperty(obj, "foo", { value: "eit" }); // throws a TypeError

 #### See Also

 * [[Object.isSealed `isSealed()`]]
 * [[Object.preventExtensions `preventExtensions()`]]
 * [[Object.isExtensible `isExtensible()`]]
 * [[Object.isSealed `isSealed()`]]
 * [[Object.freeze `freeze()`]]
 * [[Object.isFrozen `isFrozen()`]]

 

 - obj (Object): The object which should be frozen.

 Freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed.In essence the object is made effectively immutable. The method returns the object being frozen.

 Any attempt to add or remove from the property set of a frozen object throws a [[TypeError `TypeError`]] exception (most commonly, but not exclusively, when in [strict mode](https://developer.mozilla.org/en/Javascript/Strict_mode)).

 #### Example

 	var obj = {
 	  prop: function (){},
 	  foo: "bar"
 	};

 	// New properties may be added, existing properties may be changed or removed
 	obj.foo = "baz";
 	obj.lumpy = "woof";
 	delete obj.prop;

 	var o = Object.freeze(obj);

 	assert(Object.isFrozen(obj) === true);

 	// Now any changes will fail
 	obj.foo = "quux"; // silently does nothing
 	obj.quaxxor = "the friendly duck"; // silently doesn't add the property

 	// ...and in strict mode such attempts will throw TypeErrors
 	function fail(){
 	  "use strict";
 	  obj.foo = "sparky"; // throws a TypeError
 	  delete obj.quaxxor; // throws a TypeError
 	  obj.sparky = "arf"; // throws a TypeError
 	}
 	fail();

 	// Attempted changes through Object.defineProperty will also throw
 	Object.defineProperty(obj, "ohai", { value: 17 }); // throws a TypeError
 	Object.defineProperty(obj, "foo", { value: "eit" }); // throws a TypeError

 #### See Also

 * [[Object.isFrozen `isFrozen()`]]
 * [[Object.preventExtensions `preventExtensions()`]]
 * [[Object.isExtensible `isExtensible()`]]
 * [[Object.seal `seal()`]]
 * [[Object.seal `seal()`]]
 * [[Object.isSealed `isSealed()`]]

 

 - obj (Object): The object which should be checked.

 Returns true if the object is sealed, otherwise false. An object is sealed if it is [[Object.isExtensible non-extensible]] and if all its properties are non-configurable and therefore not removable (but not necessarily non-writable).

 #### Examples

 	// Objects aren't sealed by default.
 	var empty = {};
 	assert(Object.isSealed(empty) === false);

 	// If you make an empty object non-extensible, it is vacuously sealed.
 	Object.preventExtensions(empty);
 	assert(Object.isSealed(empty) === true);

 	// The same is not true of a non-empty object, unless its properties are all non-configurable.
 	var hasProp = { fee: "fie foe fum" };
 	Object.preventExtensions(hasProp);
 	assert(Object.isSealed(hasProp) === false);

 	// But make them all non-configurable and the object becomes sealed.
 	Object.defineProperty(hasProp, "fee", { configurable: false });
 	assert(Object.isSealed(hasProp) === true);

 	// The easiest way to seal an object, of course, is Object.seal.
 	var sealed = {};
 	Object.seal(sealed);
 	assert(Object.isSealed(sealed) === true);

 	// A sealed object is, by definition, non-extensible.
 	assert(Object.isExtensible(sealed) === false);

 	// A sealed object might be frozen, but it doesn't have to be.
 	assert(Object.isFrozen(sealed) === true); // all properties also non-writable

 	var s2 = Object.seal({ p: 3 });
 	assert(Object.isFrozen(s2) === false); // "p" is still writable

 	var s3 = Object.seal({ get p() { return 0; } });
 	assert(Object.isFrozen(s3) === true); // only configurability matters for accessor properties

 #### See Also

 * [[Object.seal `seal()`]]
 * [[Object.preventExtensions `preventExtensions()`]]
 * [[Object.isExtensible `isExtensible()`]]
 * [[Object.seal `seal()`]]
 * [[Object.freeze `freeze()`]]
 * [[Object.isFrozen `isFrozen()`]]

 

 - obj (Object): The object which should be checked.

 Determine if an object is frozen.

 An object is frozen if and only if it is not [[Object.isExtensible extensible]], all its properties arenon-configurable, and all its data properties (that is, properties which are not accessor properties with getter or setter components) are non-writable.

 #### See Also

 * [[Object.freeze `freeze()`]]
 * [[Object.preventExtensions `preventExtensions()`]]
 * [[Object.isExtensible `isExtensible()`]]
 * [[Object.seal `seal()`]]
 * [[Object.seal `seal()`]]
 * [[Object.isSealed `isSealed()`]]

 


 Returns a reference to the `Object` function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name, but it isn't read only (except for primitive [[Boolean `Boolean`]], [[Number `Number`]], or [[String `String`]] values of: 1, true, "read-only").


 #### Example: Displaying the constructor of an object

 The following example creates a prototype, `Tree`, and an object of that type, `theTree`. The example then displays the `constructor` property for the object `theTree`.

     function Tree(name) {
        this.name = name;
     }
     theTree = new Tree("Redwood");
     console.log("theTree.constructor is " + theTree.constructor);


 This example displays the following output:

     theTree.constructor is function Tree(name) {
         this.name = name;
     }

 #### Example: Changing the constructor of an object

 The following example shows how to modify constructor value of generic objects. Only true, 1 and "test" variable constructors will not be changed. This example explains that is not always so safe to believe in constructor function.

     function Type(){};
     var	types = [
     	new Array,	[],
     	new Boolean,	true,
     	new Date,
     	new Error,
     	new Function,	function(){},
     	Math,
     	new Number,	1,
     	new Object,	{},
     	new RegExp,	/(?:)/,
     	new String,	"test"
     ];
     for(var i = 0; i < types.length; i++){
     	types[i].constructor = Type;
     	types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];
     };
     alert(types.join("\n"));


 
Compiling file src/latest/js_doc/RegExp.js


 This object provides a concise and flexible means for "matching" (specifying and recognizing) strings of text, such as particular characters, words, or patterns of characters.


 #### Special characters in regular expressions

 <table class="fullwidth-table"> <tbody> <tr> <td class="header">Character</td> <td class="header">Meaning</td> </tr> <tr> <td>\</td> <td> <p>For characters that are usually treated literally, indicates that the next character is special and not to be interpreted literally.</p> <p>For example, /b/ matches the character 'b'. By placing a backslash in front of b, that is by using /\b/, the character becomes special to mean match a word boundary.</p> <p><em>or</em></p> <p>For characters that are usually treated specially, indicates that the next character is not special and should be interpreted literally.</p> <p>For example, * is a special character that means 0 or more occurrences of the preceding character should be matched; for example, /a*/ means match 0 or more "a"s. To match * literally, precede it with a backslash; for example, /a\*/ matches 'a*'.</p> </td> </tr> <tr> <td>^</td> <td> <p>Matches beginning of input. If the multiline flag is set to true, also matches immediately after a line break character.</p> <p>For example, /^A/ does not match the 'A' in "an A", but does match the first 'A' in "An A."</p> </td> </tr> <tr> <td>$</td> <td> <p>Matches end of input. If the multiline flag is set to true, also matches immediately before a line break character.</p> <p>For example, /t$/ does not match the 't' in "eater", but does match it in "eat".</p> </td> </tr> <tr> <td>*</td> <td> <p>Matches the preceding item 0 or more times.</p> <p>For example, /bo*/ matches 'boooo' in "A ghost booooed" and 'b' in "A bird warbled", but nothing in "A goat grunted".</p> </td> </tr> <tr> <td>+</td> <td> <p>Matches the preceding item 1 or more times. Equivalent to {1,}.</p> <p>For example, /a+/ matches the 'a' in "candy" and all the a's in "caaaaaaandy".</p> </td> </tr> <tr> <td>?</td> <td> <p>Matches the preceding item 0 or 1 time.</p> <p>For example, /e?le?/ matches the 'el' in "angel" and the 'le' in "angle."</p> <p>If used immediately after any of the quantifiers *, +, ?, or {}, makes the quantifier non-greedy (matching the minimum number of times), as opposed to the default, which is greedy (matching the maximum number of times).</p> <p>Also used in lookahead assertions, described under (?=), (?!), and (?:) in this table.</p> </td> </tr> <tr> <td>.</td> <td> <p>(The decimal point) matches any single character except the newline characters: \n \r \u2028 or \u2029. ([\s\S] can be used to match any character including newlines.)</p> <p>For example, /.n/ matches 'an' and 'on' in "nay, an apple is on the tree", but not 'nay'.</p> </td> </tr> <tr> <td>(<em>x</em>)</td> <td> <p>Matches <em>x</em> and remembers the match. These are called capturing parentheses.</p> <p>For example, /(foo)/ matches and remembers 'foo' in "foo bar." The matched substring can be recalled from the resulting array's elements [1], ..., [n] or from the predefined RegExp object's properties $1, ..., $9.</p> </td> </tr> <tr> <td>(?:<em>x</em>)</td> <td> <p>Matches <em>x</em> but does not remember the match. These are called non-capturing parentheses. The matched substring can not be recalled from the resulting array's elements [1], ..., [n] or from the predefined RegExp object's properties $1, ..., $9.</p> </td> </tr> <tr> <td><em>x</em>(?=<em>y</em>)</td> <td> <p>Matches <em>x</em> only if <em>x</em> is followed by <em>y</em>. For example, /Jack(?=Sprat)/ matches 'Jack' only if it is followed by 'Sprat'. /Jack(?=Sprat|Frost)/ matches 'Jack' only if it is followed by 'Sprat' or 'Frost'. However, neither 'Sprat' nor 'Frost' is part of the match results.</p> </td> </tr> <tr> <td><em>x</em>(?!<em>y</em>)</td> <td> <p>Matches <em>x</em> only if <em>x</em> is not followed by <em>y</em>. For example, /\d+(?!\.)/ matches a number only if it is not followed by a decimal point.</p> <p>/\d+(?!\.)/.exec("3.141") matches 141 but not 3.141.</p> </td> </tr> <tr> <td><em>x</em>|<em>y</em></td> <td> <p>Matches either <em>x</em> or <em>y</em>.</p> <p>For example, /green|red/ matches 'green' in "green apple" and 'red' in "red apple."</p> </td> </tr> <tr> <td>{<em>n</em>}</td> <td> <p>Where <em>n</em> is a positive integer. Matches exactly <em>n</em> occurrences of the preceding item.</p> <p>For example, /a{2}/ doesn't match the 'a' in "candy," but it matches all of the a's in "caandy," and the first two a's in "caaandy."</p> </td> </tr> <tr> <td>{<em>n</em>,}</td> <td> <p>Where <em>n</em> is a positive integer. Matches at least <em>n</em> occurrences of the preceding item.</p> <p>For example, /a{2,}/ doesn't match the 'a' in "candy", but matches all of the a's in "caandy" and in "caaaaaaandy."</p> </td> </tr> <tr> <td>{<em>n</em>,<em>m</em>}</td> <td> <p>Where <em>n</em> and <em>m</em> are positive integers. Matches at least <em>n</em> and at most <em>m</em> occurrences of the preceding item.</p> <p>For example, /a{1,3}/ matches nothing in "cndy", the 'a' in "candy," the first two a's in "caandy," and the first three a's in "caaaaaaandy". Notice that when matching "caaaaaaandy", the match is "aaa", even though the original string had more a's in it.</p> </td> </tr> <tr> <td>[xyz]</td> <td> <p>A character set. Matches any one of the enclosed characters. You can specify a range of characters by using a hyphen.</p> <p>For example, [abcd] is the same as [a-d]. They match the 'b' in "brisket" and the 'c' in "chop".</p> </td> </tr> <tr> <td>[^xyz]</td> <td> <p>A negated or complemented character set. That is, it matches anything that is not enclosed in the brackets. You can specify a range of characters by using a hyphen.</p> <p>For example, [^abc] is the same as [^a-c]. They initially match 'r' in "brisket" and 'h' in "chop."</p> </td> </tr> <tr> <td>[\b]</td> <td> <p>Matches a backspace. (Not to be confused with \b.)</p> </td> </tr> <tr> <td>\b</td> <td> <p>Matches a word boundary, such as a space. (Not to be confused with [\b].)</p> <p>For example, /\bn\w/ matches the 'no' in "noonday"; /\wy\b/ matches the 'ly' in "possibly yesterday."</p> </td> </tr> <tr> <td>\B</td> <td> <p>Matches a non-word boundary.</p> <p>For example, /\w\Bn/ matches 'on' in "noonday", and /y\B\w/ matches 'ye' in "possibly yesterday."</p> </td> </tr> <tr> <td>\c<em>X</em></td> <td> <p>Where <em>X</em> is a letter from A - Z. Matches a control character in a string.</p> <p>For example, /\cM/ matches control-M in a string.</p> </td> </tr> <tr> <td>\d</td> <td> <p>Matches a digit character in the basic Latin alphabet. Equivalent to [0-9].</p> <p><strong>Note</strong>: In Firefox 2 and earlier, matches a digit character from any alphabet. (
<a rel="external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=378738" class="external" title="VERIFIED FIXED - \d pattern matches characters other than the decimal digits 0-9 (ecma_3/RegExp/15.10.2.12.js)">
bug 378738</a>
)</p> <p>For example, /\d/ or /[0-9]/ matches '2' in "B2 is the suite number."</p> </td> </tr> <tr> <td>\D</td> <td> <p>Matches any character that is not a digit in the basic Latin alphabet. Equivalent to [^0-9].</p> <p><strong>Note</strong>: In Firefox 2 and earlier, excludes digit characters from all alphabets. (
<a rel="external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=378738" class="external" title="VERIFIED FIXED - \d pattern matches characters other than the decimal digits 0-9 (ecma_3/RegExp/15.10.2.12.js)">
bug 378738</a>
)</p> <p>For example, /\D/ or /[^0-9]/ matches 'B' in "B2 is the suite number."</p> </td> </tr> <tr> <td>\f</td> <td> <p>Matches a form-feed.</p> </td> </tr> <tr> <td>\n</td> <td> <p>Matches a linefeed.</p> </td> </tr> <tr> <td>\r</td> <td> <p>Matches a carriage return.</p> </td> </tr> <tr> <td>\s</td> <td> <p>Matches a single white space character, including space, tab, form feed, line feed and other unicode spaces. This is equivalent to `[\t\n\v\f\r \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000]`.
</p> <p>For example, /\s\w*/ matches ' bar' in "foo bar."</p> </td> </tr> <tr> <td>\S</td> <td> <p>Matches a single character other than white space. This is equivalent to `[^\t\n\v\f\r \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000]`.</p> <p>For example, /\S\w*/ matches 'foo' in "foo bar."</p> </td> </tr> <tr> <td>\t</td> <td> <p>Matches a tab.</p> </td> </tr> <tr> <td>\v</td> <td> <p>Matches a vertical tab.</p> </td> </tr> <tr> <td>\w</td> <td> <p>Matches any alphanumeric character from the basic Latin alphabet, including the underscore. Equivalent to [A-Za-z0-9_].</p> <p>For example, /\w/ matches 'a' in "apple," '5' in "$5.28," and '3' in "3D."</p> </td> </tr> <tr> <td>\W</td> <td> <p>Matches any character that is not a word character from the basic Latin alphabet. Equivalent to [^A-Za-z0-9_].</p> <p>For example, /\W/ or /[^A-Za-z0-9_]/ matches '%' in "50%."</p> </td> </tr> <tr> <td>\<em>n</em></td> <td> <p>Where <em>n</em> is a positive integer. A back reference to the last substring matching the n parenthetical in the regular expression (counting left parentheses).</p> <p>For example, /apple(,)\sorange\1/ matches 'apple, orange,' in "apple, orange, cherry, peach." A more complete example follows this table.</p> </td> </tr> <tr> <td>\0</td> <td> <p>Matches a NUL character. Don't follow this with another digit.</p> </td> </tr> <tr> <td>\x<em>hh</em></td> <td> <p>Matches the character with the code <em>hh</em> (two hexadecimal digits)</p> </td> </tr> <tr> <td>\u<em>hhhh</em></td> <td> <p>Matches the character with the Unicode value <em>hhhh</em> (four hexadecimal digits).</p> </td> </tr> </tbody>
</table>


 The literal notation provides compilation of the regular expression when the expression is evaluated. Use literal notation when the regular expression will remain constant. For example, if you use literal notation to construct a regular expression used in a loop, the regular expression won't be recompiled on each iteration.

 The constructor of the regular expression object, for example, new RegExp("ab+c"), provides runtime compilation of the regular expression. Use the constructor function when you know the regular expression pattern will be changing, or you don't know the pattern and are getting it from another source, such as user input.

 #### Example: Using a regular expression to change data format

 The following script uses the [replace](https://developer.mozilla.org/en/Javascript/Reference/Global_Objects/String/replace "en/Javascript/Reference/Global_Objects/String/replace") method inherited by the [String](https://developer.mozilla.org/en/Javascript/Reference/Global_Objects/String "en/Javascript/Reference/Global_Objects/String") instance to match a name in the format _first last_ and output it in the format _last_, _first_. In the replacement text, the script uses `$1\. and `$2\. to indicate the results of the corresponding matching parentheses in the regular expression pattern.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/RegExp/regexp.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### Example: Using a regular expression with the "sticky" flag

 This example demonstrates how one could use the sticky flag on regular expressions to match individual lines of multiline input.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/RegExp/regexp.2.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 One can test at run-time whether the sticky flag is supported, using `try{...} catch{...}`. For this, either an `eval(...)` expression or the `RegExp(regex-string,flags-string)` syntax must be used (since the `/regex/flags` notation is processed at compile-time, so throws an exception before the `catch` block is encountered). For example:

     var supports_sticky;
     try { RegExp('','y'); supports_sticky = true; }
     catch(e) { supports_sticky = false; }
     console.log(supports_sticky);


 #### See also

 * [Regular Expressions](https://developer.mozilla.org/en/Javascript/Guide/Regular_Expressions) chapter in the [Javascript Guide](https://developer.mozilla.org/en/Javascript/Guide)

 </ul>


 

 - pattern (String): The text of the regular expression.
 - flags (String):  Any additional parameters to use in the regular expression

 Creates a regular expression object for matching text with a pattern.

 Regular expressions can also be constructed with the following notation: `/pattern/flags`.

  If specified, `flags` can have any combination of the following values:
 * `g`: global match
 * `i`: ignore case
 * `m`: Treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning or end of each line (delimited by \n or \r), not only the very beginning or end of the whole input string)
 * `y`: sticky; matches only from the index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later indexes). This allows the match-only-at-start capabilities of the character "^" to effectively be used at any location in a string by changing the value of the lastIndex property.


 When using the constructor function, the normal string escape rules (preceding special characters with \ when included in a string) are necessary. For example, the following are equivalent:

 		var re = new RegExp("\\w+");
 		var re = /\w+/;

 Notice that the parameters to the literal format don't use quotation marks to indicate strings, while the parameters to the constructor function do use quotation marks. So the following expressions create the same regular expression:

 	/ab+c/i;
 	new RegExp("ab+c", "i");

 


 `global` is a property of an individual regular expression object.

 The value of `global` is true if the "`g`" flag was used; otherwise, `false`. The "`g`" flag indicates that the regular expression should be tested against all possible matches in a string.

 You can't change this property directly.

 


 `ignoreCase` is a property of an individual regular expression object.

 The value of `ignoreCase` is true if the "`i`" flag was used; otherwise, false. The "`i`" flag indicates that case should be ignored while attempting a match in a string.

 You can't change this property directly.

 


 `multiline` is a property of an individual regular expression object.

 The value of `multiline` is true if the "`m`" flag was used; otherwise, false. The "`m`" flag indicates that a multiline input string should be treated as multiple lines. For example, if "`m`" is used, "`^`" and "`$`" change from matching at only the start or end of the entire string to the start or end of any line within the string.

 You can't change this property directly.

 


 A read/write integer property that specifies the index at which to start the next match.

 This property is set only if the regular expression used the "`g`" flag to indicate a global search. The following rules apply:

 * If `lastIndex` is greater than the length of the string, `regexp.test` and `regexp.exec` fail, and `lastIndex` is set to 0.
 * If `lastIndex` is equal to the length of the string and if the regular expression matches the empty string, then the regular expression matches input starting at `lastIndex`.
 * If `lastIndex` is equal to the length of the string and if the regular expression does not match the empty string, then the regular expression mismatches input, and `lastIndex` is reset to 0.
 * Otherwise, `lastIndex` is set to the next position following the most recent match.

 For example, consider the following sequence of statements:

 * `re = /(hi)?/g`: Matches the empty string.
 * `re("hi")`: Returns `["hi", "hi"]` with `lastIndex` equal to 2
 * `re("hi")`: Returns `[""]`, an empty array whose zeroth element is the match string. In this case, the empty string because `lastIndex` was 2 (and still is 2) and "`hi`" has length 2.

 


 `source` is a property of an individual regular expression object.

 This property contains the text of the pattern, excluding the forward slashes.

 You can't change this property directly.

 

 - str (String): The string against which to match the regular expression.

  Executes the search for a match between a regular expression and a specified string. Returns `true` or `false`.

 When you want to know whether a pattern is found in a string use the `test` method (similar to the [[String.search `String.search()`]]; for more information (but slower execution) use the [[RegExp.exec `exec()`]] method (similar to the [[String.match `String.match()`]] method). As with `exec()` (or in combination with it), `test` called multiple times on the same global regular expression instance will advance past the previous match.


 #### Example: Using `test()`

 The following example prints a message which depends on the success of the test:

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/RegExp/regexp.test.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 

 - str (String): The string against which to match the regular expression.

 Executes a search for a match in a specified string. Returns a result array, or `null`.


 If the match succeeds, the `exec()` method returns an array and updates properties of the regular expression object. The returned array has the matched text as the first item, and then one item for each capturing parenthesis that matched containing the text that was captured. If the match fails, the `exec` method returns `null`.

 If you are executing a match simply to find true or false, use the [[RegExp.test `test()`]] method or the [[String.search `String.search()`]] method.

 #### Example

 Consider the following example:

 	// Match one d followed by one or more b's followed by one d
 	// Remember matched b's and the following d
 	// Ignore case

 	var re = /d(b+)(d)/ig;

 	var result = re.exec("cdbBdbsbz");



 The following table shows the results for this script:

 <table class = \"fullwidth-table\"> <tbody> <tr> <td class = \"header\">Object</td> <td class = \"header\">Property/Index</td> <td class = \"header\">Description</td> <td class = \"header\">Example</td> </tr> <tr> <td rowspan = \"5\"><code>result</code></td> <td><code>&nbsp;</code></td> <td>The content of <code>myArray</code>.</td> <td><code>[&quot;dbBd&quot;, &quot;bB&quot;, &quot;d&quot;]</code></td> </tr> <tr> <td><code>index</code></td> <td>The 0-based index of the match in the string.</td> <td><code>1</code></td> </tr> <tr> <td><code>input</code></td> <td>The original string.</td> <td><code>cdbBdbsbz</code></td> </tr> <tr> <td><code>[0]</code></td> <td>The last matched characters</td> <td><code>dbBd</code></td> </tr> <tr> <td><code>[1], ...[<em>n</em>]</code></td> <td>The parenthesized substring matches, if any. The number of possible parenthesized substrings is unlimited.</td> <td><code>[1] = bB<br/> [2] = d</code></td> </tr> <tr> <td rowspan = \"5\"><code>re</code></td> <td><code>lastIndex</code></td> <td>The index at which to start the next match.</td> <td><code>5</code></td> </tr> <tr> <td><code>ignoreCase</code></td> <td>Indicates if the &quot;<code>i</code>&quot; flag was used to ignore case.</td> <td><code>true</code></td> </tr> <tr> <td><code>global</code></td> <td>Indicates if the &quot;<code>g</code>&quot; flag was used for a global match.</td> <td><code>true</code></td> </tr> <tr> <td><code>multiline</code></td> <td>Indicates if the &quot;<code>m</code>&quot; flag was used to search in strings across multiple line.</td> <td><code>false</code></td> </tr> <tr> <td><code>source</code></td> <td>The text of the pattern.</td> <td><code>d(b+)(d)</code></td> </tr> </tbody></table>

 #### Example: Exec with the "global" flag

 If your regular expression uses the "`g`" flag, you can use the `exec` method multiple times to find successive matches in the same string. When you do so, the search starts at the substring of `str` specified by the regular expression's `lastIndex` property ([[RegExp.test `test()`]] will also advance the `lastIndex` property). For example, assume you have this script:

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/RegExp/regexp.exec.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>


 This script displays the following text:

 	Found abb. Next match starts at 3
 	Found ab. Next match starts at 9

 You can also use `exec()` without creating a RegExp object:

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/RegExp/regexp.exec.2.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 This will display an alert containing 'hello world!'.

 


 The `RegExp` object overrides the `toString` method of the `[Object]` object; it does not inherit [[Object.toString `Object.toString()`]]. For `RegExp` objects, the `toString` method returns a string representation of the regular expression.


 #### Example: Using toString
  The following example displays the string value of a RegExp object:

 	var myExp = new RegExp("a+b+c");
 	console.log(myExp.toString()); // displays "/a+b+c/"


 
Compiling file src/latest/js_doc/String.js


 Strings are useful for holding data that can be represented in text form. Some of the most-used operations on strings are to check their [[String.length length]], to build and concatenate them using the `+` and `+=` string operators, and checking for the existence or location of substrings with the [[String.substring `substring()`]] and [[String.substr `substr()`]] methods.

 #### Character access

 There are two ways to access an individual character in a string. The first is the [[String.charAt `charAt()`]] method:

 	return 'cat'.charAt(1); // returns "a"

 The other way is to treat the string as an array-like object, where individual characters correspond to a numerical index:

 	return 'cat'[1]; // returns "a"

 <Note>Array-like character access (the second way above) is not part of ECMAScript 3. It is a Javascript and ECMAScript 5 feature.</Note>

 For character access using bracket notation, attempting to delete or assign a value to these properties will not succeed. The properties involved are neither writable nor configurable. For more information, see [[Object.defineProperty `Object.defineProperty`]].

 #### Comparing strings

 C developers have the `strcmp()` function for comparing strings. In Javascript, you just use the `<` and `>` operators:

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 A similar result can be achieved using the [[String.localeCompare `localeCompare()`]] method inherited by String instances.

 #### Distinction between string primitives and String objects

 Note that Javascript distinguishes between String objects and primitive string values. (The same is true of [[Boolean booleans]] and [[Number numbers]].)

 String literals (denoted by double or single quotes) and strings returned from String calls in a non-constructor context (i.e., without using the `new` keyword) are primitive strings. Javascript automatically converts primitives and String objects, so that it's possible to use String object methods for primitive strings. In contexts where a method is to be invoked on a primitive string or a property lookup occurs, Javascript will automatically wrap the string primitive and call the method or perform the property lookup.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.2.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 Some more examples:

 	s1 = "2 + 2";               // creates a string primitive

 	s2 = new String("2 + 2");   // creates a String object

 	console.log(eval(s1));      // returns the number 4

 	console.log(eval(s2));      // returns the string "2 + 2"

 For these reasons, code may break when it encounters String objects when it expects a primitive string instead, although generally authors need not worry about the distinction.

 A String object can always be converted to its primitive counterpart with the [[String.valueOf `valueOf()`]] method.

 	console.log(eval(s2.valueOf())); // returns the number 4

 

 String(thing)
 - thing (Object): Anything to be converted to a string.

 The `String` global object is a constructor for strings, or a sequence of characters.

 String literals can also take the forms:

 	'string text'
 	"string text"
 
 

 - pattern (RegExp | String): A RegExp object to match, or a String to match. The match is replaced by the return value of `replacement`.
 - replacement (String | Function): The String that replaces the substring received from the `pattern` (a number of special replacement patterns are supported); or,a function to be invoked to create the new substring (to put in place of the substring received from `phrase`).
 - flags (String): A string specifying a combination of regular expression flags.

 Returns a new string with some or all matches of a `pattern` replaced by a `replacement`. The `pattern` can be a string or a RegExp, and the `replacement` can be a string or a function to be called for each match.

 This method does not change the `String` object it is called on. It simply returns a new string.

 To perform a global search and replace, either include the `g` switch in the regular expression or if the first parameter is a string, include `g` in the `flags` parameter.

 The use of the `flags` parameter in this method is non-standard; use a RegExp object with the corresponding flags:
 * `g`: global match
 * `i`: ignore case
 * `m`: match over multiple lines
 * `y`: sticky

 #### Specifying a string as a parameter

 The replacement string can include the following special replacement patterns:

 <table class = \"fullwidth-table\"> <tbody> <tr> <td class = \"header\">Pattern</td> <td class = \"header\">Inserts</td> </tr> <tr> <td><code>$$</code></td> <td>Inserts a &quot;$&quot;.</td> </tr> <tr> <td><code>$&amp;</code></td> <td>Inserts the matched substring.</td> </tr> <tr> <td><code>$`</code></td> <td>Inserts the portion of the string that precedes the matched substring.</td> </tr> <tr> <td><code>$'</code></td> <td>Inserts the portion of the string that follows the matched substring.</td> </tr> <tr> <td style = \"white-space: nowrap;\"><code>$<em>n</em></code> or <code>$<em>nn</em></code></td> <td>Where <code><em>n</em></code> or <code><em>nn</em></code> are decimal digits, inserts the <em>n</em>th parenthesized submatch string, provided the first argument was a <code>RegExp</code> object.</td> </tr> </tbody></table>


 #### Specifying a function as a parameter

 You can specify a function as the second parameter. In this case, the function will be invoked after the match has been performed. The function's result (return value) will be used as the replacement string. (Note: the above-mentioned special replacement patterns do _not_ apply in this case.) Note that the function will be invoked multiple times for each full match to be replaced if the regular expression in the first parameter is global.

 The arguments to the function are as follows:

 <table class = "fullwidth-table"> <tbody> <tr> <td class = "header">Possible name</td> <td class = "header">Supplied value</td> </tr> <tr> <td>`str`</td> <td>The matched substring. (Corresponds to $& above.)</td> </tr> <tr> <td>`p1\. p2\. ...`</td> <td>The _n_th parenthesized submatch string, provided the first argument to `replace` was a `RegExp` object. (Correspond to $1\. $2\. etc. above.)</td> </tr> <tr> <td>`offset`</td> <td>The offset of the matched substring within the total string being examined. (For example, if the total string was `"abcd"`, and the matched substring was `"bc"`, then this argument will be `1`.)</td> </tr> <tr> <td style = "white-space: nowrap;">`s`</td> <td>The total string being examined.</td> </tr> </tbody> </table>

 (The exact number of arguments will depend on whether the first argument was a `RegExp `object and, if so, how many parenthesized submatches it specifies.)

 The following example will set `newString `to `"XXzzzz - XX , zzzz"`:

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.replace.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### Example: Using `global` and `ignore` with `replace`

 In the following example, the regular expression includes the global and ignore case flags which permits `replace` to replace each occurrence of 'apples' in the string with 'oranges'.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.replace.2.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 In this version, a string is used as the first parameter and the global and ignore case flags are specified in the `flags` parameter.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.replace.3.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 Both of these examples print "oranges are round, and oranges are juicy."

 #### Example: Defining the regular expression in `replace`

 In the following example, the regular expression is defined in `replace` and includes the ignore case flag.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.replace.4.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 This prints "Twas the night before Christmas..."

 #### Example: Switching words in a string

 The following script switches the words in the string. For the replacement text, the script uses the `$1\. and `$2\. replacement patterns.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.replace.5.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 This prints "Smith, John".

 #### Example: Using an inline function that modifies the matched characters

 In this example, all occurrences of capital letters in the string are converted to lower case, and a hyphen is inserted just before the match location. The important thing here is that additional operations are needed on the matched item before it is given back as a replacement.

 The replacement function accepts the matched snippet as its parameter, and uses it to transform the case and concatenate the hyphen before returning.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.replace.6.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 Given `styleHyphenFormat('borderTop')`, this returns 'border-top'.

 Because we want to further transform the _result_ of the match before the final substitution is made, we must use a function. This forces the evaluation of the match prior to the `toLowerCase()` method. If we had tried to do this using the match without a function, the toLowerCase() would have no effect.

     var newString = propertyName.replace(/[A-Z]/, '-' + '$&'.toLowerCase());  // won't work

 This is because `'$&'.toLowerCase()` would be evaluated first as a string literal (resulting in the same `'$&'`) before using the characters as a pattern.

 #### Example: Replacing a Fahrenheit degree with its Celsius equivalent

 The following example replaces a Fahrenheit degree with its equivalent Celsius degree. The Fahrenheit degree should be a number ending with F. The function returns the Celsius number ending with C. For example, if the input number is 212F, the function returns 100C. If the number is 0F, the function returns -17.77777777777778C.

 The regular expression `test` checks for any number that ends with F. The number of Fahrenheit degree is accessible to the function through its second parameter, `p1`. The function sets the Celsius number based on the Fahrenheit degree passed in a string to the `f2c` function. `f2c` then returns the Celsius number. This function approximates Perl's s///e flag.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.replace.7.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>
             
 


 The length of a string.

 This property returns the number of code units in the string.

 [UTF-16](http://en.wikipedia.org/wiki/UTF-16), the string format used by Javascript, uses a single 16-bit code unit to represent the most common characters, but needs to use two code units for less commonly-used characters, so it's possible for the value returned by `length` to not match the actual number of characters in the string.

 For an empty string, `length` is 0.

 #### Examples

 	var x = "Cloud9";
 	var empty = "";

 	console.log("Cloud9 is " + x.length + " code units long"); // 6
 	console.log("The empty string is has a length of " + empty.length); /* should be 0 */

 #### See also

 * [Javascript String.length and Internationalizing Web Applications](http://developer.teradata.com/blog/jasonstrimpel/2011/11/Javascript-string-length-and-internationalizing-web-applications "http://developer.teradata.com/blog/jasonstrimpel/2011/11/Javascript-string-length-and-internationalizing-web-applications")
 

 - indexA (Number): Value between 0 and one less than the length of the string.
 - indexB (Number): Value between 0 and the length of the string.

 Returns a subset of a string between one index and another, or through the end of the string.

 `substring()` extracts characters from `indexA` up to but not including `indexB`. In particular:

 * If `indexA` equals `indexB`, `substring` returns an empty string
 * If `indexB` is omitted, `substring` extracts characters to the end of the string
 * If either argument is less than 0 or is [[NaN `NaN`]], it is treated as if it were 0
 * If either argument is greater than `stringName.length`, it is treated as if it were `stringName.length`


 If `indexA` is larger than `indexB`, then the effect of `substring` is as if the two arguments were swapped; for example, `str.substring(1, 0) == str.substring(0, 1)`.

 #### Example: Using `substring`

  The following example uses `substring` to display characters from the string "`Mozilla`":

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.substring.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>


 #### Example: Replacing a substring within a string

 The following example replaces a substring within a string. It will replace both individual characters and substrings. The function call at the end of the example changes the string "`Brave New World`" into "`Brave New Web`".

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.substring.2.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 Note that this can result in an infinite loop if `oldS` is itself a substring of `newS` -- for example, if you attempted to replace "World" with "OtherWorld" here. A better method for replacing strings is as follows:

 	function replaceString(oldS, newS,fullS){
 		return fullS.split(oldS).join(newS);
 	}

 #### See also

 * [[String.substr `substr()`]]
 * [[String.slice `slice()`]]

 

 - start (Number): Location at which to begin extracting characters.
 - length (Number): The number of characters to extract.

 Returns the characters in a string beginning at the specified location through the specified number of characters.

 `start` is a character index. The index of the first character is 0\. and the index of the last character is 1 less than the length of the string. `substr` begins extracting characters at `start` and collects `length` characters (unless it reaches the end of the string first, in which case it will return fewer).

 If `start` is positive and is greater than or equal to the length of the string, `substr` returns an empty string.

 If `start` is negative, `substr` uses it as a character index from the end of the string. If `start` is negative and `abs(start)` is larger than the length of the string, `substr` uses 0 as the start index.

 If `length` is 0 or negative, `substr` returns an empty string. If `length` is omitted, `substr` extracts characters to the end of the string.


 #### Example: Using `substr`

 Consider the following script:

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.substr.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 This script displays:

     (1,2): bc
     (-3,2): hi
     (-3): hij
     (1): bcdefghij
     (-20\. 2): ab
     (20\. 2):


 #### See also

 * [[String.slice `slice()`]]
 * [[String.substring `substring()`]]

 

 - index (Number): Value between 0 and 1 less than the length of the string.

 Returns the specified character from a string.

 Characters in a string are indexed from left to right. The index of the first character is 0\. and the index of the last character in a string called `stringName` is `stringName.length - 1`. If the `index` you supply is out of range, Javascript returns an empty string.

 #### Example: Displaying characters at different locations in a string

 The following example displays characters at different locations in the string "`Brave new world`":

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.charat.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 These lines display the following:

     The character at index 0 is 'B'
     The character at index 1 is 'r'
     The character at index 2 is 'a'
     The character at index 3 is 'v'
     The character at index 4 is 'e'
     The character at index 999 is ''


 #### Example: Getting whole characters

 The following provides a means of ensuring that going through a string loop always provides a whole character, even if the string contains characters that are not in the Basic Multi-lingual Plane.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.charat.2.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>


 #### Example: Fixing charAt to support non-Basic-Multilingual-Plane (BMP) characters

 While the previous example may be more frequently useful for those wishing to support non-BMP characters (since the above does not require the caller to know where any non-BMP character might appear), in the event that one _does_ wish, in choosing a character by index, to treat the surrogate pairs within a string as the single characters they represent, one can use the following:

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.charat.3.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### See Also
 * [[String.indexOf `indexOf()`]]
 * [[String.lastIndexOf `lastIndexOf()`]]
 * [[String.split `split()`]]
 * [[String.charCodeAt `charCodeAt()`]]

 


 Returns the primitive value of a String object.


 The `valueOf` method of `String` returns the primitive value of a String object as a string data type. This value is equivalent to String.toString.

 This method is usually called internally by Javascript and not explicitly in code.

 #### Example: Using `valueOf`

     x = new String("Hello world");
     console.log(x.valueOf()) // Displays "Hello world"


 #### See Also

 * [[String.toString `toString()`]]
 * [[Object.valueOf `Object.valueOf()`]]

 

 - numN (Number): A sequence of numbers that are Unicode values.

 Returns a string created by using the specified sequence of Unicode values. This method returns a string and not a `String` object.

 Because `fromCharCode` is a static method of `String`, you always use it as `String.fromCharCode()`, rather than as a method of a `String` object you created.

 #### Getting `fromCharCode()` to work with higher values

 Although most common Unicode values can be represented in a fixed width system/with one number (as expected early on during Javascript standardization) and `fromCharCode()` can be used to return a single character for the most common values (i.e., UCS-2 values which are the subset of UTF-16 with the most common characters), in order to deal with ALL legal Unicode values, `fromCharCode()` alone is inadequate. Since the higher code point characters use two (lower value) "surrogate" numbers to form a single character, `fromCharCode()` can be used to return such a pair and thus adequately represent these higher valued characters.

 Be aware, therefore, that the following utility function to grab the accurate character even for higher value code points, may be returning a value which is rendered as a single character, but which has a string count of two (though usually the count will be one).


 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.fromcharcode.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### Example: Using `fromCharCode`

 The following example returns the string "ABC".

 	String.fromCharCode(65,66,67)


 #### See Also
 [[String.charCodeAt `charCodeAt()`]]

 

 - compareString (String): The string against which the referring string is comparing

 Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. Returns -1 if the string occurs earlier in a sort than `compareString`, returns 1 if the string occurs afterwards in such a sort, and returns 0 if they occur at the same level.

 #### Example: Using `localeCompare`

 The following example demonstrates the different potential results for a string occurring before, after, or at the same level as another:

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.localecompare.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>
             
 


 Returns a reference to the [[String `String`]] function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name. Note that the value of this property is a reference to the function itself, not a string containing the function's name.

 For more information, see [[Object.constructor `Object.constructor`]].
 
 

 - index (Number): Value greater than 0 and less than the length of the string; if it is not a number, it defaults to 0.

 Returns the numeric Unicode value of the character at the given index (except for unicode codepoints > 0x10000).


 Unicode code points range from 0 to 1,114,111. The first 12 Unicode code points are a direct match of the ASCII character encoding. For information on Unicode, see the [Core Javascript 1.5 Guide](https://developer.mozilla.org/en/Javascript/Guide/Obsolete_Pages/Unicode "en/Core_Javascript_1.5_Guide/Unicode").

 Note that `charCodeAt` will always return a value that is less than 65,536. This is because the higher code points are represented by a pair of (lower valued)"surrogate" pseudo-characters which are used to comprise the real character. Because of this, in order to examine or reproduce the full character for individual characters of value 65,536 and above, for such characters, it is necessary to retrieve not only `charCodeAt(i)`, but also `charCodeAt(i+1)` (as if examining/reproducing a string with two letters).

 `charCodeAt` returns [[NaN `NaN`]] if the given index is not greater than 0 or is greater than the length of the string.

 #### Example: Using `charCodeAt`

 The following example returns 65, the Unicode value for A.

 	"ABC".charCodeAt(0) // returns 65


 #### Example 2: Fixing charCodeAt to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is unknown

 This version might be used in for loops and the like when it is unknown whether non-BMP characters exist before the specified index position.

 	function fixedCharCodeAt (str, idx) {
     // ex. fixedCharCodeAt ('\uD800\uDC00', 0); // 65536
     // ex. fixedCharCodeAt ('\uD800\uDC00', 1); // 65536
     idx = idx || 0;
     var code = str.charCodeAt(idx);
     var hi, low;
     if (0xD800 <= code && code <= 0xDBFF) { // High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters)
         hi = code;
         low = str.charCodeAt(idx+1);
         if (isNaN(low)) {
             throw 'High surrogate not followed by low surrogate in fixedCharCodeAt()';
         }
         return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;
     }
     if (0xDC00 <= code && code <= 0xDFFF) { // Low surrogate
         // We return false to allow loops to skip this iteration since should have already handled high surrogate above in the previous iteration
         return false;
         /* hi = str.charCodeAt(idx-1);
         low = code;
         return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000; */
     }
     return code;
 	}

 #### Example 3: Fixing charCodeAt to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is known


 	function knownCharCodeAt (str, idx) {
     str += '';
     var code,
         end = str.length;

     var surrogatePairs = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
     while ((surrogatePairs.exec(str)) != null) {
         var li = surrogatePairs.lastIndex;
         if (li - 2 < idx) {
             idx++;
         }
         else {
             break;
         }
     }

     if (idx >= end || idx < 0) {
         return NaN;
     }

     code = str.charCodeAt(idx);

     var hi, low;
     if (0xD800 <= code && code <= 0xDBFF) {
         hi = code;
         low = str.charCodeAt(idx+1); // Go one further, since one of the "characters" is part of a surrogate pair
         return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;
     }
     return code;
 }


 #### See Also
 * [[String.fromCharCode `fromCharCode()`]]
 * [[String.charAt `charAt()`]]

 

 - stringN (String): Strings to concatenate to this string.

 This method combines the text from one or more strings and returns a new string. Changes to the text in one string don't affect the other string.

 #### Example: Using `concat`

 The following example combines strings into a new string.

 	var hello = "Hello, ";
  console.log(hello.concat("Kevin", " have a nice day.")); /// Hello, Kevin have a nice day.


 

 - searchValue (String): A string representing the value to search for.
 - fromIndex (Number): The location within the calling string to start the search from. It can be any integer between 0 and the length of the string.

 Returns the index within the calling `String` object of the first occurrence of the specified value, starting the search at `fromIndex`,
 returns -1 if the value is not found.


 Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character of a string called `stringName` is `stringName.length - 1`.


 The `indexOf` method is case sensitive. For example, the following expression returns -1:

 	"Blue Whale".indexOf("blue") // returns -1

 Note that '0' doesn't evaluate to `true` and '-1' doesn't evaluate to `false`. Therefore, when checking if a specific string exists within another string the correct way to check would be:

 	"Blue Whale".indexOf("Blue") != -1 // true

 	"Blue Whale".indexOf("Bloe") != -1 // false

 #### Example: Using `indexOf` and `lastIndexOf`
 The following example uses `indexOf` and `lastIndexOf` to locate values in the string "`Brave new world`".

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.indexof.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### Example: `indexOf` and case-sensitivity

 The following example defines two string variables. The variables contain the same string except that the second string contains uppercase letters. The first `writeln` method displays 19. But because the `indexOf` method is case sensitive, the string "`cheddar`" is not found in `myCapString`, so the second `writeln` method displays -1.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.indexof.2.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### Example: Using `indexOf` to count occurrences of a letter in a string

 The following example sets `count` to the number of occurrences of the letter `x` in the string `str`:

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.indexof.3.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### See Also
 * [[String.charAt `charAt()`]]
 * [[String.lastIndexOf `lastIndexOf()`]]
 * [[String.split `split()`]]
 * [[Array.indexOf `Array.indexOf()`]]
 
 

 - searchValue (String): A string representing the value to search for.
 - fromIndex (String): The location within the calling string to start the search from, indexed from left to right. It can be any integer between 0 and the length of the string. The default value is the length of the string.

 Returns the index within the calling `String` object of the last occurrence of the specified value, or -1 if not found. The calling string is searched backward, starting at `fromIndex`.

 Characters in a string are indexed from left to right. The index of the first character is 0\. and the index of the last character is `stringName.length - 1`.

 The `lastIndexOf` method is case sensitive. For example, the following expression returns -1:

 	"Blue Whale, Killer Whale".lastIndexOf("blue") // returns -1

 #### Example: Using `indexOf` and `lastIndexOf`

 The following example uses `indexOf` and `lastIndexOf` to locate values in the string "`Brave new world`".

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.lastindexof.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 #### See Also
 * [[String.charAt `charAt()`]]
 * [[String.indexOf `indexOf()`]]
 * [[String.split `split()`]]
 
 

 -regexp (RegExp): A regular expression used to find a match. If a non-RegExp object is passed, it is implicitly converted to a RegExp by using `new RegExp(regexp)`.

 Used to retrieve the matches when matching a string against a regular expression.


 If the regular expression does not include the `g` flag, this returns the same result as [[RegExp.exec `RegExp.exec()`]].

 If the regular expression includes the `g` flag, the method returns an [[Array `Array`]] containing all matches. If there were no matches, the method returns `null`.

 The returned [[Array `Array`]] has an extra `input` property, which contains the regexp that generated it as a result. In addition, it has an `index` property, which represents the zero-based index of the match in the string.

 #### Notes

 * If you need to know if a string matches a regular expression `regexp`, use [[RegExp.test `RegExp.test()`]]
 * If you only want the first match found, you might want to use [[RegExp.exec `RegExp.exec()`]] instead
 * See §15.5.4.10 of [the ECMA-262 specification](http://www.ecma-international.org/publications/standards/Ecma-262.htm)


 #### Example: Using `match`

 In the following example, `match` is used to find "`Chapter`" followed by 1 or more numeric characters followed by a decimal point and numeric character 0 or more times. The regular expression includes the `i` flag so that case will be ignored.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.match.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 This returns the array containing Chapter 3.4.5.1,Chapter 3.4.5.1,.1.

 "`Chapter 3.4.5.1`" is the first match and the first value remembered from `(Chapter \d+(\.\d)*)`.

 "`.1`" is the second value remembered from `(\.\d)`.

 #### Example: Using global and ignore case flags with `match`

 The following example demonstrates the use of the global and ignore case flags with `match`. All letters A through E and a through e are returned, each its own element in the array

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.match.2.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 


 Returns a copy of the string, replacing various special characters in the string with their escape sequences and wrapping the result in double-quotes (").

 #### Example:

 <table class = \"standard-table\" style = \"table-layout: fixed; width: 100%;\"> <thead> <tr> <th class = \"header\" scope = \"col\"><code>str</code></th> <th class = \"header\" scope = \"col\"><code>str.quote()</code></th> <th class = \"header\" scope = \"col\"><code>eval(str.quote())</code></th> </tr> </thead> <tbody> <tr> <td><code>Hello world!</code></td> <td><code>&quot;Hello world!&quot;</code></td> <td><code>Hello world!</code></td> </tr> <tr> <td><code>Hello<br/> &nbsp; &nbsp; &nbsp; &nbsp; world!</code></td> <td><code>&quot;Hello\\n\\tworld!&quot;</code></td> <td><code>Hello<br/> &nbsp; &nbsp; &nbsp; &nbsp; world!</code></td> </tr> <tr> <td><code>&quot; \\ &mdash; '</code></td> <td><code>\\&quot; \\\\ \\u2014 '</code></td> <td><code>&quot; \\ &mdash; '</code></td> </tr> </tbody></table>

 

 - regexp (RegExp): A  regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using `new RegExp(regexp)`.

 Executes the search for a match between a regular expression and this `String` object.

 If successful, search returns the index of the regular expression inside the string. Otherwise, it returns -1.

 When you want to know whether a pattern is found in a string use `search()` (similar to the regular expression [[RegExp.test `RegExp.test()`]]; for more information (but slower execution) use [[RegExp.test `RegExp.match()`]] (similar to the [[RegExp.exec `RegExp.exec()`]] method).

 #### Example: Using `search`

 The following example prints a message which depends on the success of the test.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.search.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>
             
 

 - beginSlice (Number): The zero-based index at which to begin extraction.
 - endSlice  (Number): The zero-based index at which to end extraction. If omitted, slice extracts to the end of the string.

 Extracts a section of a string and returns a new string.

 `slice` extracts the text from one string and returns a new string. Changes to the text in one string don't affect the other string.

 `slice` extracts up to but not including `endSlice`. `string.slice(1,4)` extracts the second character through the fourth character (characters indexed 1\. 2\. and 3).

 As a negative index, endSlice indicates an offset from the end of the string. string.slice(2,-1\. extracts the third character through the second to last character in the string.

 #### Example: Using `slice` to create a new string
 The following example uses `slice` to create a new string.

 	// assumes a print function is defined
     var str1 = "The morning is upon us.";
     var str2 = str1.slice(4, -2);
     console.log(str2);

 This writes:

     morning is upon u
     
 

 - separator (String): Specifies the character to use for separating the string. The separator is treated as a string or a regular expression. If separator is omitted, the array returned contains one element consisting of the entire string.
 - limit (Number): Number specifying a limit on the number of splits to be found. The split method still splits on every match of separator, but it truncates the returned array to at most limit elements.

 Splits a `String` object into an array of strings by separating the string into substrings.

 When found, `separator` is removed from the string and the substrings are returned in an array. If `separator` is omitted, the array contains one element consisting of the entire string.

 If `separator` is a regular expression that contains capturing parentheses, then each time separator is matched the results (including any undefined results) of the capturing parentheses are spliced into the output array. However, not all browsers support this capability.


 #### Example: Using `split`

 The following example defines a function that splits a string into an array of strings using the specified separator. After splitting the string, the function displays messages indicating the original string (before the split), the separator used, the number of elements in the array, and the individual array elements.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.split.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 This example produces the following output:

 	The original string is: "Oh brave new world that has such people in it."
     The separator is: " "
     The array has 10 elements: Oh / brave / new / world / that / has / such / people / in / it. /

     The original string is: "Oh brave new world that has such people in it."
     The separator is: "undefined"
     The array has 1 elements: Oh brave new world that has such people in it. /

     The original string is: "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec"
     The separator is: ","
     The array has 12 elements: Jan / Feb / Mar / Apr / May / Jun / Jul / Aug / Sep / Oct / Nov / Dec /

 #### Example: Removing spaces from a string

 In the following example, `split` looks for 0 or more spaces followed by a semicolon followed by 0 or more spaces and, when found, removes the spaces from the string. `nameList` is the array returned as a result of `split`.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.split.2.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 This prints two lines; the first line prints the original string, and the second line prints the resulting array:

 	Harry Trump;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand
     Harry Trump,Fred Barney,Helen Rigby,Bill Abel,Chris Hand

 #### Example: Returning a limited number of splits

 In the following example, `split` looks for 0 or more spaces in a string and returns the first 3 splits that it finds.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.split.3.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 This script displays the following:

 	Hello,World.,How

 #### Example: Capturing parentheses

 If `separator` contains capturing parentheses, matched results are returned in the array.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/String/string.split.4.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>

 This script displays the following:

 	Hello ,1, word. Sentence number ,2, .

 #### See Also
 * [[String.charAt `charAt()`]]
 * [[String.indexOf `indexOf()`]]
 * [[String.lastIndexOf `lastIndexOf()`]]
 * [[Array.join `Array.join()`]]
 
 


 Returns the calling string value converted to lower case, according to any locale-specific case mappings.


 The `toLocaleLowerCase` method returns the value of the string converted to lower case according to any locale-specific case mappings. `toLocaleLowerCase` does not affect the value of the string itself. In most cases, this will produce the same result as [[String.toLowerCase `toLowerCase()`]], but for some locales, such as Turkish, whose case mappings don't follow the default case mappings in Unicode, there may be a different result.

 #### Example: Using `toLocaleLowerCase`

 The following example displays the string "alphabet":

 	var upperText="ALPHABET";
 	console.log(upperText.toLocaleLowerCase());

 


 Returns the calling string value converted to lowercase.


 The `toLowerCase` method returns the value of the string converted to lowercase. `toLowerCase` does not affect the value of the string itself.

 #### Example: Using `toLowerCase`

 The following example displays the lowercase string "`alphabet`":

 	var upperText="ALPHABET";
 	console.log(upperText.toLowerCase());


 #### See Also
 * [[String.toLocaleLowerCase `toLocaleLowerCase()`]]
 * [[String.toUpperCase `toUpperCase()`]]
 
 


 The `toUpperCase` method returns the value of the string converted to uppercase. `toUpperCase` does not affect the value of the string itself.

 #### Example: Using `toUpperCase`

 The following example displays the string "`ALPHABET`":

     var lowerText="alphabet";
     console.log(lowerText.toUpperCase());

 #### See Also
 * [[String.toLocaleUpperCase `toLocaleUpperCase()`]]
 * [[String.toLowerCase `toLowerCase()`]]

 


 Returns the calling string value converted to upper case, according to any locale-specific case mappings.


 The `toLocaleUpperCase` method returns the value of the string converted to upper case according to any locale-specific case mappings. `toLocaleUpperCase` does not affect the value of the string itself. In most cases, this will produce the same result as [[String.toUpperCase `toUpperCase()`]], but for some locales, such as Turkish, whose case mappings don't follow the default case mappings in Unicode, there may be a different result.

 #### Example: Using `toLocaleUpperCase`

 The following example displays the string "ALPHABET":

 	var lowerText="alphabet";
 	console.log(lowerText.toLocaleUpperCase());


 


 Returns a string representing the specified object.


 The `String` object overrides the `toString` method of [[Object `Object`]]; it does not inherit [[Object.toString `Object.toString()`]]. For `String` objects, the `toString()` method returns a string representation of the object.

 #### Example: Using `toString`

 The following example displays the string value of a String object:

     var x = new String("Hello world");
     console.log(x.toString());      // Displays "Hello world"

 #### See Also
 * [[Object.toString `Object.toString()`]]

 


 This method returns the string stripped of whitespace from both ends. `trim` does not affect the value of the string itself.

 #### Example: Using `trim`

 The following example displays the lowercase string "foo":

 	var orig = "   foo  ";
 	console.log(orig.trim());


 #### See Also
 * [[String.trimLeft `trimLeft()`]]
 * [[String.trimRight `trimRight()`]]

 


 The `trimLeft` method returns the string stripped of whitespace from its left end. `trimLeft` does not affect the value of the string itself.

 #### Example: Using `trimLeft`

 The following example displays the lowercase string "foo ":

 	var orig="   foo  ";
 	console.log(orig.trimLeft()); // "foo  "

 #### See Also
 * [[String.trim `trim()`]]
 * [[String.trimRight `trimRight()`]]

 


 The `trimRight` method returns the string stripped of whitespace from its right end. `trimRight` does not affect the value of the string itself.

 #### Example: Using `trimRight`
 The following example displays the lowercase string "  foo":

     var orig="   foo  ";
     console.log(orig.trimRight()); // "   foo"

 #### See Also
 * [[String.trim `trim()`]]
 * [[String.trimLeft `trimLeftt()`]]

 
Compiling file src/latest/js_doc/Error/Error.js



 Runtime errors result in new `Error` objects being created and thrown.

 #### Error types

 Besides the generic `Error` constructor, there are six other core error constructors in Javascript:

 * [[EvalError `EvalError`]]: Creates an instance representing an error that occurs regarding the global function `eval()`.
 * [[RangeError `RangeError`]]: Creates an instance representing an error that occurs when a numeric variable or parameter is outside of its valid range
 * [[ReferenceError `ReferenceError`]]: Creates an instance representing an error that occurs when de-referencing an invalid reference
 * [[SyntaxError `SyntaxError`]]: Creates an instance representing a syntax error that occurs while parsing code in `eval()`
 * [[TypeError `TypeError`]]: Creates an instance representing an error that occurs when a variable or parameter is not of a valid type
 * [[URIError `URIError`]]: Creates an instance representing an error that occurs when `encodeURI()` or `decodeURI()` are passed invalid parameters

 For client-side exceptions, see [Exception Handling Statements](https://developer.mozilla.org/en/Javascript/Guide/Statements#Exception_Handling_Statements).


 #### Example: Throwing a generic error

 Usually you create an Error object with the intention of raising it using the [`throw`](https://developer.mozilla.org/en/Javascript/Reference/Statements/throw "en/Javascript/Reference/Statements/throw") keyword. You can handle the error using the [`try...catch`](https://developer.mozilla.org/en/Javascript/Reference/Statements/try...catch "en/Javascript/Reference/Statements/try...catch") construct:

 	try {
 		throw new Error("Whoops!");
 	} catch (e) {
 		console.log(e.name + ": " + e.message);
 	}

 #### Example: Handling a specific error

 You can choose to handle only specific error types by testing the error type with the error's [constructor](https://developer.mozilla.org/en/Javascript/Reference/Global_Objects/Object/constructor "en/Javascript/Reference/Global_Objects/Object/constructor") property or, if you're writing for modern Javascript engines, [`instanceof`](https://developer.mozilla.org/en/Javascript/Reference/Operators/instanceof "en/Javascript/Reference/Operators/Special_Operators/instanceof_Operator") keyword:

 	try {
 		foo.bar();
 	} catch (e) {
 		if (e instanceof EvalError) {
	 		console.log(e.name + ": " + e.message);
 		} else if (e instanceof RangeError) {
 			console.log(e.name + ": " + e.message);
 	  	}
 		// ... etc
 	}

 

 - message (String): Human-readable description of the error
 - fileName (String): The name of the file containing the code that caused the exception (Non-standard)
 - lineNumber (Number): The line number of the code that caused the exception (Non-standard)

 Creates an error object.

 #### Example: Custom Error Types

 The Error object can be extended to create Error Types for your project.

 <script src='http://snippets.c9.io/github.com/c9/nodemanual.org-examples/js_doc/Error/error.1.js?linestart=3&lineend=0&showlines=false' defer='defer'></script>
 
 


 A human-readable description of the error.

 This property contains a brief description of the error if one is available or has been set.

 By default, the `message` property is an empty string, but this behavior can be overridden for an instance by specifying a message as the first argument to the `Error` constructor.

 #### Example: Throwing a custom error

 	var e = new Error("Could not parse input"); // e.message is "Could not parse input"
 	throw e;
     
 


 A name for the type of error.

 By default, `Error` instances are given the name "Error". The `name` property, in addition to the [[Error.message `message`]] property, is used by the to create a string representation of the error.

 #### Example: Throwing a custom error

 	var e = new Error("Malformed input"); // e.name is "Error"
 	e.name = "ParseError";                // e.toString() would return
 	throw e;                              // "ParseError: Malformed input"
 
 


 This non-standard property of `Error` objects offers a trace of which functions were called, in what order, from which line and file, and with what arguments. The stack string proceeds from the most recent calls to earlier ones, leading back to the original global scope call.

 Each step will be separated by a newline, with the first part of the line being the function name (if not a call from the global scope), followed by the argument values converted to string in parentheses, then by an at (@) sign, the file location (except when the function is the error constructor as the error is being thrown), a colon, and, if there is a file location, the line number. (Note the Error object also possesses the fileName and lineNumber properties for retrieving these from the error thrown (but only the error, and not its trace).)

 While an object (or array, etc.) will appear in the converted form "[object Object]", and as such can't be evaluated back into the actual objects, scalar values can be retrieved (though it may be easier to use arguments.callee.caller.arguments, as could the function name be retrieved by arguments.callee.caller.name). "undefined" is listed as "(void 0)". Note that if string arguments are passed in with values such as "@", "(", ")" (or if in file names), you can't easily rely on these for breaking the line into its component parts.

 #### Example

 The following HTML markup demonstrates the use of `stack` property.

 	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
 	<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
 	<meta http-equiv="Content-Script-Type" content="text/Javascript">
 	<title>Stack Trace Example</title>
 	<body>
     <script type="text/Javascript">
         function trace() {
             try {
                 throw new Error("myError");
             }
             catch(e) {
                 alert(e.stack);
             }
         }
         function b() {
             trace();
         }
         function a() {
             b(3\. 4\. "\n\n", undefined, {});
         }
         a("first call, firstarg");
     </script>

 Assuming the above markup is saved as C:\example.html on a Windows file system and is open in a browser it produces an alert message box with the following text:

 	Error("myError")@:0
 	trace()@file:///C:/example.html:9
 	b(3,4,"\n\n",(void 0),[object Object])@file:///C:/example.html:16
 	a("first call, firstarg")@file:///C:/example.html:19
 	@file:///C:/example.html:21

 
 


 Returns a string representing the specified Error object.


 The `Error` object overrides the [[Object.toString `Object.toString()`]] method inherited by all objects. According to [ECMA-262](https://developer.mozilla.org/en/ECMAScript), implementations are free to decide the behavior of this method.

 If the string representation of either of these two properties is an empty string, this method simply returns the string representation of the property that has a non-zero length. If both properties' string representations are empty strings, this method returns an empty string.

 Note that when creating a string representation of the `name` and `message` properties, this method does not invoke those properties' `toString` methods. If the value in either of these properties is not already a string, this method will behave as if that property contained an empty string.

 #### Example

 	var e = new Error("fatal error");
 	e.toString(); // returns "Error: fatal error"

 	e.name = undefined;
 	e.toString(); // returns "fatal error"

 	e.message = undefined;
 	e.toString(); // returns ""

 	e.name = "Error";
 	e.toString(); // returns "Error"
 
 
Compiling file src/latest/js_doc/Error/EvalError.js


 An `EvalError` is thrown when `eval()` is used improperly.
 	
 

 - message (String): Human-readable description of the error
 - fileName (String): The name of the file containing the code that caused the exception (Non-standard)
 - lineNumber (Number): The line number of the code that caused the exception (Non-standard)

 Creates a new EvalError object.
 
Compiling file src/latest/js_doc/Error/RangeError.js


 A `RangeError` is thrown when trying to pass a number as an argument to a function that does not allow a range that includes that number. This can be encountered when to create an array of an illegal length with the [[Array `Array`]] constructor, or when passing bad values to the numeric methods [[Number.toExponential `Number.toExponential()`]], [[Number.toFixed `Number.toFixed()`]], or [[Number.toPrecision `Number.toPrecision()`]].

 

 - message (String): Human-readable description of the error
 - fileName (String): The name of the file containing the code that caused the exception (Non-standard)
 - lineNumber (Number): The line number of the code that caused the exception (Non-standard)

 Creates an new RangeError object.

 
Compiling file src/latest/js_doc/Error/ReferenceError.js


 A `ReferenceError` is thrown when the Javascript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.
 
 

 - message (String): Human-readable description of the error
 - fileName (String): The name of the file containing the code that caused the exception (Non-standard)
 - lineNumber (Number): The line number of the code that caused the exception (Non-standard)

 Creates a new ReferenceError object.

 
Compiling file src/latest/js_doc/Error/SyntaxError.js


 A `SyntaxError` is thrown when trying to dereference a variable that has not been declared.
 
 

 - message (String): Human-readable description of the error
 - fileName (String): The name of the file containing the code that caused the exception (Non-standard)
 - lineNumber (Number): The line number of the code that caused the exception (Non-standard)

 Creates a new SyntaxError object.

 
Compiling file src/latest/js_doc/Error/TypeError.js


 A `TypeError` is thrown when an operand or argument passed to a function is incompatible with the type expected by that operator or function.
 
 

 - message (String): Human-readable description of the error
 - fileName (String): The name of the file containing the code that caused the exception (Non-standard)
 - lineNumber (Number): The line number of the code that caused the exception (Non-standard)

 Creates a new TypeError object.

 
Compiling file src/latest/js_doc/Error/URIError.js


 A `URIError` is thrown when the URI handling functions are passed a malformed URI.
 
 

 - message (String): Human-readable description of the error
 - fileName (String): The name of the file containing the code that caused the exception (Non-standard)
 - lineNumber (Number): The line number of the code that caused the exception (Non-standard)

 Creates a new URIError object.

 
I did not create a menu for: { obj.id: Infinity, obj.name: Infinity }, which is a property
I did not create a menu for: { obj.id: NaN, obj.name: NaN }, which is a property
Constructing out/latest/nodejs_dev_guide/buffers_and_streams
Constructing out/latest/nodejs_dev_guide/closures_for_events_and_callbacks
Constructing out/latest/nodejs_dev_guide/core_libs_vs_user_libs
Constructing out/latest/nodejs_dev_guide/creating_an_http_server
Constructing out/latest/nodejs_dev_guide/creating_http_requests
Constructing out/latest/nodejs_dev_guide/deciphering_query_strings
Constructing out/latest/nodejs_dev_guide/ECMA5_in_nodejs
Constructing out/latest/nodejs_dev_guide/http_servers_and_clients
Constructing out/latest/nodejs_dev_guide/implementing_logging
Constructing out/latest/nodejs_dev_guide/index
Constructing out/latest/nodejs_dev_guide/manipulating_buffers
Constructing out/latest/nodejs_dev_guide/npm
Constructing out/latest/nodejs_dev_guide/reading_and_writing_files
Constructing out/latest/nodejs_dev_guide/serving_files
Constructing out/latest/nodejs_dev_guide/understanding_event_emitters
Constructing out/latest/nodejs_dev_guide/understanding_streams
Constructing out/latest/nodejs_dev_guide/using_closures
Constructing out/latest/nodejs_dev_guide/working_with_callbacks
Constructing out/latest/nodejs_dev_guide/writing_asynchronous_code
